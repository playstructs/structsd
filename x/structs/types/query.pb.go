// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryBlockHeight struct {
}

func (m *QueryBlockHeight) Reset()         { *m = QueryBlockHeight{} }
func (m *QueryBlockHeight) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeight) ProtoMessage()    {}
func (*QueryBlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{2}
}
func (m *QueryBlockHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeight.Merge(m, src)
}
func (m *QueryBlockHeight) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeight proto.InternalMessageInfo

type QueryBlockHeightResponse struct {
	BlockHeight uint64 `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *QueryBlockHeightResponse) Reset()         { *m = QueryBlockHeightResponse{} }
func (m *QueryBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockHeightResponse) ProtoMessage()    {}
func (*QueryBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{3}
}
func (m *QueryBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockHeightResponse.Merge(m, src)
}
func (m *QueryBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockHeightResponse proto.InternalMessageInfo

func (m *QueryBlockHeightResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryGetAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAddressRequest) Reset()         { *m = QueryGetAddressRequest{} }
func (m *QueryGetAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressRequest) ProtoMessage()    {}
func (*QueryGetAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{4}
}
func (m *QueryGetAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressRequest.Merge(m, src)
}
func (m *QueryGetAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressRequest proto.InternalMessageInfo

func (m *QueryGetAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAllAddressByPlayerRequest struct {
	PlayerId   string             `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressByPlayerRequest) Reset()         { *m = QueryAllAddressByPlayerRequest{} }
func (m *QueryAllAddressByPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressByPlayerRequest) ProtoMessage()    {}
func (*QueryAllAddressByPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{5}
}
func (m *QueryAllAddressByPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressByPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressByPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressByPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressByPlayerRequest.Merge(m, src)
}
func (m *QueryAllAddressByPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressByPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressByPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressByPlayerRequest proto.InternalMessageInfo

func (m *QueryAllAddressByPlayerRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *QueryAllAddressByPlayerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAddressRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressRequest) Reset()         { *m = QueryAllAddressRequest{} }
func (m *QueryAllAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressRequest) ProtoMessage()    {}
func (*QueryAllAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{6}
}
func (m *QueryAllAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressRequest.Merge(m, src)
}
func (m *QueryAllAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressRequest proto.InternalMessageInfo

func (m *QueryAllAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAddressResponse struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PlayerId    string `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Permissions uint64 `protobuf:"varint,3,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *QueryAddressResponse) Reset()         { *m = QueryAddressResponse{} }
func (m *QueryAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressResponse) ProtoMessage()    {}
func (*QueryAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{7}
}
func (m *QueryAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressResponse.Merge(m, src)
}
func (m *QueryAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressResponse proto.InternalMessageInfo

func (m *QueryAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAddressResponse) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *QueryAddressResponse) GetPermissions() uint64 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

type QueryAllAddressResponse struct {
	Address    []*QueryAddressResponse `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAddressResponse) Reset()         { *m = QueryAllAddressResponse{} }
func (m *QueryAllAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAddressResponse) ProtoMessage()    {}
func (*QueryAllAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{8}
}
func (m *QueryAllAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAddressResponse.Merge(m, src)
}
func (m *QueryAllAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAddressResponse proto.InternalMessageInfo

func (m *QueryAllAddressResponse) GetAddress() []*QueryAddressResponse {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *QueryAllAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllocationRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAllocationRequest) Reset()         { *m = QueryGetAllocationRequest{} }
func (m *QueryGetAllocationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllocationRequest) ProtoMessage()    {}
func (*QueryGetAllocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{9}
}
func (m *QueryGetAllocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllocationRequest.Merge(m, src)
}
func (m *QueryGetAllocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllocationRequest proto.InternalMessageInfo

func (m *QueryGetAllocationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetAllocationResponse struct {
	Allocation     Allocation      `protobuf:"bytes,1,opt,name=Allocation,proto3" json:"Allocation"`
	GridAttributes *GridAttributes `protobuf:"bytes,2,opt,name=gridAttributes,proto3" json:"gridAttributes,omitempty"`
}

func (m *QueryGetAllocationResponse) Reset()         { *m = QueryGetAllocationResponse{} }
func (m *QueryGetAllocationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllocationResponse) ProtoMessage()    {}
func (*QueryGetAllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{10}
}
func (m *QueryGetAllocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllocationResponse.Merge(m, src)
}
func (m *QueryGetAllocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllocationResponse proto.InternalMessageInfo

func (m *QueryGetAllocationResponse) GetAllocation() Allocation {
	if m != nil {
		return m.Allocation
	}
	return Allocation{}
}

func (m *QueryGetAllocationResponse) GetGridAttributes() *GridAttributes {
	if m != nil {
		return m.GridAttributes
	}
	return nil
}

type QueryAllAllocationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAllocationRequest) Reset()         { *m = QueryAllAllocationRequest{} }
func (m *QueryAllAllocationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllocationRequest) ProtoMessage()    {}
func (*QueryAllAllocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{11}
}
func (m *QueryAllAllocationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllocationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllocationRequest.Merge(m, src)
}
func (m *QueryAllAllocationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllocationRequest proto.InternalMessageInfo

func (m *QueryAllAllocationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAllocationResponse struct {
	Allocation []Allocation        `protobuf:"bytes,1,rep,name=Allocation,proto3" json:"Allocation"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status     []uint64            `protobuf:"varint,3,rep,packed,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryAllAllocationResponse) Reset()         { *m = QueryAllAllocationResponse{} }
func (m *QueryAllAllocationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAllocationResponse) ProtoMessage()    {}
func (*QueryAllAllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{12}
}
func (m *QueryAllAllocationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAllocationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAllocationResponse.Merge(m, src)
}
func (m *QueryAllAllocationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAllocationResponse proto.InternalMessageInfo

func (m *QueryAllAllocationResponse) GetAllocation() []Allocation {
	if m != nil {
		return m.Allocation
	}
	return nil
}

func (m *QueryAllAllocationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllAllocationResponse) GetStatus() []uint64 {
	if m != nil {
		return m.Status
	}
	return nil
}

type QueryGetFleetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFleetRequest) Reset()         { *m = QueryGetFleetRequest{} }
func (m *QueryGetFleetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFleetRequest) ProtoMessage()    {}
func (*QueryGetFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{13}
}
func (m *QueryGetFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFleetRequest.Merge(m, src)
}
func (m *QueryGetFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFleetRequest proto.InternalMessageInfo

func (m *QueryGetFleetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetFleetResponse struct {
	Fleet Fleet `protobuf:"bytes,1,opt,name=Fleet,proto3" json:"Fleet"`
}

func (m *QueryGetFleetResponse) Reset()         { *m = QueryGetFleetResponse{} }
func (m *QueryGetFleetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFleetResponse) ProtoMessage()    {}
func (*QueryGetFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{14}
}
func (m *QueryGetFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFleetResponse.Merge(m, src)
}
func (m *QueryGetFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFleetResponse proto.InternalMessageInfo

func (m *QueryGetFleetResponse) GetFleet() Fleet {
	if m != nil {
		return m.Fleet
	}
	return Fleet{}
}

type QueryGetFleetByIndexRequest struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetFleetByIndexRequest) Reset()         { *m = QueryGetFleetByIndexRequest{} }
func (m *QueryGetFleetByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFleetByIndexRequest) ProtoMessage()    {}
func (*QueryGetFleetByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{15}
}
func (m *QueryGetFleetByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFleetByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFleetByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFleetByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFleetByIndexRequest.Merge(m, src)
}
func (m *QueryGetFleetByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFleetByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFleetByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFleetByIndexRequest proto.InternalMessageInfo

func (m *QueryGetFleetByIndexRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryAllFleetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFleetRequest) Reset()         { *m = QueryAllFleetRequest{} }
func (m *QueryAllFleetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFleetRequest) ProtoMessage()    {}
func (*QueryAllFleetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{16}
}
func (m *QueryAllFleetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFleetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFleetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFleetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFleetRequest.Merge(m, src)
}
func (m *QueryAllFleetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFleetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFleetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFleetRequest proto.InternalMessageInfo

func (m *QueryAllFleetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFleetResponse struct {
	Fleet      []Fleet             `protobuf:"bytes,1,rep,name=Fleet,proto3" json:"Fleet"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFleetResponse) Reset()         { *m = QueryAllFleetResponse{} }
func (m *QueryAllFleetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFleetResponse) ProtoMessage()    {}
func (*QueryAllFleetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{17}
}
func (m *QueryAllFleetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFleetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFleetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFleetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFleetResponse.Merge(m, src)
}
func (m *QueryAllFleetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFleetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFleetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFleetResponse proto.InternalMessageInfo

func (m *QueryAllFleetResponse) GetFleet() []Fleet {
	if m != nil {
		return m.Fleet
	}
	return nil
}

func (m *QueryAllFleetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGridRequest struct {
	AttributeId string `protobuf:"bytes,1,opt,name=attributeId,proto3" json:"attributeId,omitempty"`
}

func (m *QueryGetGridRequest) Reset()         { *m = QueryGetGridRequest{} }
func (m *QueryGetGridRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGridRequest) ProtoMessage()    {}
func (*QueryGetGridRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{18}
}
func (m *QueryGetGridRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGridRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGridRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGridRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGridRequest.Merge(m, src)
}
func (m *QueryGetGridRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGridRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGridRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGridRequest proto.InternalMessageInfo

func (m *QueryGetGridRequest) GetAttributeId() string {
	if m != nil {
		return m.AttributeId
	}
	return ""
}

type QueryAllGridRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGridRequest) Reset()         { *m = QueryAllGridRequest{} }
func (m *QueryAllGridRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGridRequest) ProtoMessage()    {}
func (*QueryAllGridRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{19}
}
func (m *QueryAllGridRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGridRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGridRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGridRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGridRequest.Merge(m, src)
}
func (m *QueryAllGridRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGridRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGridRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGridRequest proto.InternalMessageInfo

func (m *QueryAllGridRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Generic Responses for Permissions
type QueryGetGridResponse struct {
	GridRecord *GridRecord `protobuf:"bytes,1,opt,name=gridRecord,proto3" json:"gridRecord,omitempty"`
}

func (m *QueryGetGridResponse) Reset()         { *m = QueryGetGridResponse{} }
func (m *QueryGetGridResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGridResponse) ProtoMessage()    {}
func (*QueryGetGridResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{20}
}
func (m *QueryGetGridResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGridResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGridResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGridResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGridResponse.Merge(m, src)
}
func (m *QueryGetGridResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGridResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGridResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGridResponse proto.InternalMessageInfo

func (m *QueryGetGridResponse) GetGridRecord() *GridRecord {
	if m != nil {
		return m.GridRecord
	}
	return nil
}

type QueryAllGridResponse struct {
	GridRecords []*GridRecord       `protobuf:"bytes,1,rep,name=gridRecords,proto3" json:"gridRecords,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGridResponse) Reset()         { *m = QueryAllGridResponse{} }
func (m *QueryAllGridResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGridResponse) ProtoMessage()    {}
func (*QueryAllGridResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{21}
}
func (m *QueryAllGridResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGridResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGridResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGridResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGridResponse.Merge(m, src)
}
func (m *QueryAllGridResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGridResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGridResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGridResponse proto.InternalMessageInfo

func (m *QueryAllGridResponse) GetGridRecords() []*GridRecord {
	if m != nil {
		return m.GridRecords
	}
	return nil
}

func (m *QueryAllGridResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGuildRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetGuildRequest) Reset()         { *m = QueryGetGuildRequest{} }
func (m *QueryGetGuildRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuildRequest) ProtoMessage()    {}
func (*QueryGetGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{22}
}
func (m *QueryGetGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuildRequest.Merge(m, src)
}
func (m *QueryGetGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuildRequest proto.InternalMessageInfo

func (m *QueryGetGuildRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetGuildResponse struct {
	Guild Guild `protobuf:"bytes,1,opt,name=Guild,proto3" json:"Guild"`
}

func (m *QueryGetGuildResponse) Reset()         { *m = QueryGetGuildResponse{} }
func (m *QueryGetGuildResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGuildResponse) ProtoMessage()    {}
func (*QueryGetGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{23}
}
func (m *QueryGetGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuildResponse.Merge(m, src)
}
func (m *QueryGetGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuildResponse proto.InternalMessageInfo

func (m *QueryGetGuildResponse) GetGuild() Guild {
	if m != nil {
		return m.Guild
	}
	return Guild{}
}

type QueryAllGuildRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuildRequest) Reset()         { *m = QueryAllGuildRequest{} }
func (m *QueryAllGuildRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuildRequest) ProtoMessage()    {}
func (*QueryAllGuildRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{24}
}
func (m *QueryAllGuildRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuildRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuildRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuildRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuildRequest.Merge(m, src)
}
func (m *QueryAllGuildRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuildRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuildRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuildRequest proto.InternalMessageInfo

func (m *QueryAllGuildRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGuildResponse struct {
	Guild      []Guild             `protobuf:"bytes,1,rep,name=Guild,proto3" json:"Guild"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuildResponse) Reset()         { *m = QueryAllGuildResponse{} }
func (m *QueryAllGuildResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGuildResponse) ProtoMessage()    {}
func (*QueryAllGuildResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{25}
}
func (m *QueryAllGuildResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuildResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuildResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuildResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuildResponse.Merge(m, src)
}
func (m *QueryAllGuildResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuildResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuildResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuildResponse proto.InternalMessageInfo

func (m *QueryAllGuildResponse) GetGuild() []Guild {
	if m != nil {
		return m.Guild
	}
	return nil
}

func (m *QueryAllGuildResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGuildMembershipApplicationRequest struct {
	GuildId  string `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
}

func (m *QueryGetGuildMembershipApplicationRequest) Reset() {
	*m = QueryGetGuildMembershipApplicationRequest{}
}
func (m *QueryGetGuildMembershipApplicationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetGuildMembershipApplicationRequest) ProtoMessage() {}
func (*QueryGetGuildMembershipApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{26}
}
func (m *QueryGetGuildMembershipApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuildMembershipApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuildMembershipApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuildMembershipApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuildMembershipApplicationRequest.Merge(m, src)
}
func (m *QueryGetGuildMembershipApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuildMembershipApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuildMembershipApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuildMembershipApplicationRequest proto.InternalMessageInfo

func (m *QueryGetGuildMembershipApplicationRequest) GetGuildId() string {
	if m != nil {
		return m.GuildId
	}
	return ""
}

func (m *QueryGetGuildMembershipApplicationRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

type QueryGetGuildMembershipApplicationResponse struct {
	GuildMembershipApplication GuildMembershipApplication `protobuf:"bytes,1,opt,name=GuildMembershipApplication,proto3" json:"GuildMembershipApplication"`
}

func (m *QueryGetGuildMembershipApplicationResponse) Reset() {
	*m = QueryGetGuildMembershipApplicationResponse{}
}
func (m *QueryGetGuildMembershipApplicationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetGuildMembershipApplicationResponse) ProtoMessage() {}
func (*QueryGetGuildMembershipApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{27}
}
func (m *QueryGetGuildMembershipApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGuildMembershipApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGuildMembershipApplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGuildMembershipApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGuildMembershipApplicationResponse.Merge(m, src)
}
func (m *QueryGetGuildMembershipApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGuildMembershipApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGuildMembershipApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGuildMembershipApplicationResponse proto.InternalMessageInfo

func (m *QueryGetGuildMembershipApplicationResponse) GetGuildMembershipApplication() GuildMembershipApplication {
	if m != nil {
		return m.GuildMembershipApplication
	}
	return GuildMembershipApplication{}
}

type QueryAllGuildMembershipApplicationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuildMembershipApplicationRequest) Reset() {
	*m = QueryAllGuildMembershipApplicationRequest{}
}
func (m *QueryAllGuildMembershipApplicationRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllGuildMembershipApplicationRequest) ProtoMessage() {}
func (*QueryAllGuildMembershipApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{28}
}
func (m *QueryAllGuildMembershipApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuildMembershipApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuildMembershipApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuildMembershipApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuildMembershipApplicationRequest.Merge(m, src)
}
func (m *QueryAllGuildMembershipApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuildMembershipApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuildMembershipApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuildMembershipApplicationRequest proto.InternalMessageInfo

func (m *QueryAllGuildMembershipApplicationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGuildMembershipApplicationResponse struct {
	GuildMembershipApplication []GuildMembershipApplication `protobuf:"bytes,1,rep,name=GuildMembershipApplication,proto3" json:"GuildMembershipApplication"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGuildMembershipApplicationResponse) Reset() {
	*m = QueryAllGuildMembershipApplicationResponse{}
}
func (m *QueryAllGuildMembershipApplicationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllGuildMembershipApplicationResponse) ProtoMessage() {}
func (*QueryAllGuildMembershipApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{29}
}
func (m *QueryAllGuildMembershipApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGuildMembershipApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGuildMembershipApplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGuildMembershipApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGuildMembershipApplicationResponse.Merge(m, src)
}
func (m *QueryAllGuildMembershipApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGuildMembershipApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGuildMembershipApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGuildMembershipApplicationResponse proto.InternalMessageInfo

func (m *QueryAllGuildMembershipApplicationResponse) GetGuildMembershipApplication() []GuildMembershipApplication {
	if m != nil {
		return m.GuildMembershipApplication
	}
	return nil
}

func (m *QueryAllGuildMembershipApplicationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInfusionRequest struct {
	DestinationId string `protobuf:"bytes,1,opt,name=destinationId,proto3" json:"destinationId,omitempty"`
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetInfusionRequest) Reset()         { *m = QueryGetInfusionRequest{} }
func (m *QueryGetInfusionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInfusionRequest) ProtoMessage()    {}
func (*QueryGetInfusionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{30}
}
func (m *QueryGetInfusionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInfusionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInfusionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInfusionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInfusionRequest.Merge(m, src)
}
func (m *QueryGetInfusionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInfusionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInfusionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInfusionRequest proto.InternalMessageInfo

func (m *QueryGetInfusionRequest) GetDestinationId() string {
	if m != nil {
		return m.DestinationId
	}
	return ""
}

func (m *QueryGetInfusionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetInfusionResponse struct {
	Infusion Infusion `protobuf:"bytes,1,opt,name=Infusion,proto3" json:"Infusion"`
}

func (m *QueryGetInfusionResponse) Reset()         { *m = QueryGetInfusionResponse{} }
func (m *QueryGetInfusionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInfusionResponse) ProtoMessage()    {}
func (*QueryGetInfusionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{31}
}
func (m *QueryGetInfusionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInfusionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInfusionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInfusionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInfusionResponse.Merge(m, src)
}
func (m *QueryGetInfusionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInfusionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInfusionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInfusionResponse proto.InternalMessageInfo

func (m *QueryGetInfusionResponse) GetInfusion() Infusion {
	if m != nil {
		return m.Infusion
	}
	return Infusion{}
}

type QueryAllInfusionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInfusionRequest) Reset()         { *m = QueryAllInfusionRequest{} }
func (m *QueryAllInfusionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInfusionRequest) ProtoMessage()    {}
func (*QueryAllInfusionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{32}
}
func (m *QueryAllInfusionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInfusionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInfusionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInfusionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInfusionRequest.Merge(m, src)
}
func (m *QueryAllInfusionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInfusionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInfusionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInfusionRequest proto.InternalMessageInfo

func (m *QueryAllInfusionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInfusionResponse struct {
	Infusion   []Infusion          `protobuf:"bytes,1,rep,name=Infusion,proto3" json:"Infusion"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status     []uint64            `protobuf:"varint,3,rep,packed,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryAllInfusionResponse) Reset()         { *m = QueryAllInfusionResponse{} }
func (m *QueryAllInfusionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInfusionResponse) ProtoMessage()    {}
func (*QueryAllInfusionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{33}
}
func (m *QueryAllInfusionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInfusionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInfusionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInfusionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInfusionResponse.Merge(m, src)
}
func (m *QueryAllInfusionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInfusionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInfusionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInfusionResponse proto.InternalMessageInfo

func (m *QueryAllInfusionResponse) GetInfusion() []Infusion {
	if m != nil {
		return m.Infusion
	}
	return nil
}

func (m *QueryAllInfusionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllInfusionResponse) GetStatus() []uint64 {
	if m != nil {
		return m.Status
	}
	return nil
}

type QueryGetPermissionRequest struct {
	PermissionId string `protobuf:"bytes,1,opt,name=permissionId,proto3" json:"permissionId,omitempty"`
}

func (m *QueryGetPermissionRequest) Reset()         { *m = QueryGetPermissionRequest{} }
func (m *QueryGetPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPermissionRequest) ProtoMessage()    {}
func (*QueryGetPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{34}
}
func (m *QueryGetPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPermissionRequest.Merge(m, src)
}
func (m *QueryGetPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPermissionRequest proto.InternalMessageInfo

func (m *QueryGetPermissionRequest) GetPermissionId() string {
	if m != nil {
		return m.PermissionId
	}
	return ""
}

type QueryAllPermissionByObjectRequest struct {
	ObjectId   string             `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPermissionByObjectRequest) Reset()         { *m = QueryAllPermissionByObjectRequest{} }
func (m *QueryAllPermissionByObjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPermissionByObjectRequest) ProtoMessage()    {}
func (*QueryAllPermissionByObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{35}
}
func (m *QueryAllPermissionByObjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPermissionByObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPermissionByObjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPermissionByObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPermissionByObjectRequest.Merge(m, src)
}
func (m *QueryAllPermissionByObjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPermissionByObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPermissionByObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPermissionByObjectRequest proto.InternalMessageInfo

func (m *QueryAllPermissionByObjectRequest) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

func (m *QueryAllPermissionByObjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPermissionByPlayerRequest struct {
	PlayerId   string             `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPermissionByPlayerRequest) Reset()         { *m = QueryAllPermissionByPlayerRequest{} }
func (m *QueryAllPermissionByPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPermissionByPlayerRequest) ProtoMessage()    {}
func (*QueryAllPermissionByPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{36}
}
func (m *QueryAllPermissionByPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPermissionByPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPermissionByPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPermissionByPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPermissionByPlayerRequest.Merge(m, src)
}
func (m *QueryAllPermissionByPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPermissionByPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPermissionByPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPermissionByPlayerRequest proto.InternalMessageInfo

func (m *QueryAllPermissionByPlayerRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *QueryAllPermissionByPlayerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPermissionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPermissionRequest) Reset()         { *m = QueryAllPermissionRequest{} }
func (m *QueryAllPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPermissionRequest) ProtoMessage()    {}
func (*QueryAllPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{37}
}
func (m *QueryAllPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPermissionRequest.Merge(m, src)
}
func (m *QueryAllPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPermissionRequest proto.InternalMessageInfo

func (m *QueryAllPermissionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Generic Responses for Permissions
type QueryGetPermissionResponse struct {
	PermissionRecord *PermissionRecord `protobuf:"bytes,1,opt,name=permissionRecord,proto3" json:"permissionRecord,omitempty"`
}

func (m *QueryGetPermissionResponse) Reset()         { *m = QueryGetPermissionResponse{} }
func (m *QueryGetPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPermissionResponse) ProtoMessage()    {}
func (*QueryGetPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{38}
}
func (m *QueryGetPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPermissionResponse.Merge(m, src)
}
func (m *QueryGetPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPermissionResponse proto.InternalMessageInfo

func (m *QueryGetPermissionResponse) GetPermissionRecord() *PermissionRecord {
	if m != nil {
		return m.PermissionRecord
	}
	return nil
}

type QueryAllPermissionResponse struct {
	PermissionRecords []*PermissionRecord `protobuf:"bytes,1,rep,name=permissionRecords,proto3" json:"permissionRecords,omitempty"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPermissionResponse) Reset()         { *m = QueryAllPermissionResponse{} }
func (m *QueryAllPermissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPermissionResponse) ProtoMessage()    {}
func (*QueryAllPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{39}
}
func (m *QueryAllPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPermissionResponse.Merge(m, src)
}
func (m *QueryAllPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPermissionResponse proto.InternalMessageInfo

func (m *QueryAllPermissionResponse) GetPermissionRecords() []*PermissionRecord {
	if m != nil {
		return m.PermissionRecords
	}
	return nil
}

func (m *QueryAllPermissionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPlanetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPlanetRequest) Reset()         { *m = QueryGetPlanetRequest{} }
func (m *QueryGetPlanetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlanetRequest) ProtoMessage()    {}
func (*QueryGetPlanetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{40}
}
func (m *QueryGetPlanetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlanetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlanetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlanetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlanetRequest.Merge(m, src)
}
func (m *QueryGetPlanetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlanetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlanetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlanetRequest proto.InternalMessageInfo

func (m *QueryGetPlanetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetPlanetResponse struct {
	Planet           Planet            `protobuf:"bytes,1,opt,name=Planet,proto3" json:"Planet"`
	GridAttributes   *GridAttributes   `protobuf:"bytes,2,opt,name=gridAttributes,proto3" json:"gridAttributes,omitempty"`
	PlanetAttributes *PlanetAttributes `protobuf:"bytes,3,opt,name=planetAttributes,proto3" json:"planetAttributes,omitempty"`
}

func (m *QueryGetPlanetResponse) Reset()         { *m = QueryGetPlanetResponse{} }
func (m *QueryGetPlanetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlanetResponse) ProtoMessage()    {}
func (*QueryGetPlanetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{41}
}
func (m *QueryGetPlanetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlanetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlanetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlanetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlanetResponse.Merge(m, src)
}
func (m *QueryGetPlanetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlanetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlanetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlanetResponse proto.InternalMessageInfo

func (m *QueryGetPlanetResponse) GetPlanet() Planet {
	if m != nil {
		return m.Planet
	}
	return Planet{}
}

func (m *QueryGetPlanetResponse) GetGridAttributes() *GridAttributes {
	if m != nil {
		return m.GridAttributes
	}
	return nil
}

func (m *QueryGetPlanetResponse) GetPlanetAttributes() *PlanetAttributes {
	if m != nil {
		return m.PlanetAttributes
	}
	return nil
}

type QueryAllPlanetRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlanetRequest) Reset()         { *m = QueryAllPlanetRequest{} }
func (m *QueryAllPlanetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlanetRequest) ProtoMessage()    {}
func (*QueryAllPlanetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{42}
}
func (m *QueryAllPlanetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlanetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlanetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlanetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlanetRequest.Merge(m, src)
}
func (m *QueryAllPlanetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlanetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlanetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlanetRequest proto.InternalMessageInfo

func (m *QueryAllPlanetRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPlanetByPlayerRequest struct {
	PlayerId   string             `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlanetByPlayerRequest) Reset()         { *m = QueryAllPlanetByPlayerRequest{} }
func (m *QueryAllPlanetByPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlanetByPlayerRequest) ProtoMessage()    {}
func (*QueryAllPlanetByPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{43}
}
func (m *QueryAllPlanetByPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlanetByPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlanetByPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlanetByPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlanetByPlayerRequest.Merge(m, src)
}
func (m *QueryAllPlanetByPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlanetByPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlanetByPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlanetByPlayerRequest proto.InternalMessageInfo

func (m *QueryAllPlanetByPlayerRequest) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *QueryAllPlanetByPlayerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPlanetResponse struct {
	Planet     []Planet            `protobuf:"bytes,1,rep,name=Planet,proto3" json:"Planet"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlanetResponse) Reset()         { *m = QueryAllPlanetResponse{} }
func (m *QueryAllPlanetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlanetResponse) ProtoMessage()    {}
func (*QueryAllPlanetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{44}
}
func (m *QueryAllPlanetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlanetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlanetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlanetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlanetResponse.Merge(m, src)
}
func (m *QueryAllPlanetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlanetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlanetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlanetResponse proto.InternalMessageInfo

func (m *QueryAllPlanetResponse) GetPlanet() []Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

func (m *QueryAllPlanetResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPlanetAttributeRequest struct {
	PlanetId      string `protobuf:"bytes,1,opt,name=planetId,proto3" json:"planetId,omitempty"`
	AttributeType string `protobuf:"bytes,2,opt,name=attributeType,proto3" json:"attributeType,omitempty"`
}

func (m *QueryGetPlanetAttributeRequest) Reset()         { *m = QueryGetPlanetAttributeRequest{} }
func (m *QueryGetPlanetAttributeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlanetAttributeRequest) ProtoMessage()    {}
func (*QueryGetPlanetAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{45}
}
func (m *QueryGetPlanetAttributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlanetAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlanetAttributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlanetAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlanetAttributeRequest.Merge(m, src)
}
func (m *QueryGetPlanetAttributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlanetAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlanetAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlanetAttributeRequest proto.InternalMessageInfo

func (m *QueryGetPlanetAttributeRequest) GetPlanetId() string {
	if m != nil {
		return m.PlanetId
	}
	return ""
}

func (m *QueryGetPlanetAttributeRequest) GetAttributeType() string {
	if m != nil {
		return m.AttributeType
	}
	return ""
}

type QueryGetPlanetAttributeResponse struct {
	Attribute uint64 `protobuf:"varint,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (m *QueryGetPlanetAttributeResponse) Reset()         { *m = QueryGetPlanetAttributeResponse{} }
func (m *QueryGetPlanetAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlanetAttributeResponse) ProtoMessage()    {}
func (*QueryGetPlanetAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{46}
}
func (m *QueryGetPlanetAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlanetAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlanetAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlanetAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlanetAttributeResponse.Merge(m, src)
}
func (m *QueryGetPlanetAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlanetAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlanetAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlanetAttributeResponse proto.InternalMessageInfo

func (m *QueryGetPlanetAttributeResponse) GetAttribute() uint64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

type QueryGetPlayerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPlayerRequest) Reset()         { *m = QueryGetPlayerRequest{} }
func (m *QueryGetPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlayerRequest) ProtoMessage()    {}
func (*QueryGetPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{47}
}
func (m *QueryGetPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlayerRequest.Merge(m, src)
}
func (m *QueryGetPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlayerRequest proto.InternalMessageInfo

func (m *QueryGetPlayerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetPlayerResponse struct {
	Player          Player           `protobuf:"bytes,1,opt,name=Player,proto3" json:"Player"`
	GridAttributes  *GridAttributes  `protobuf:"bytes,2,opt,name=gridAttributes,proto3" json:"gridAttributes,omitempty"`
	PlayerInventory *PlayerInventory `protobuf:"bytes,3,opt,name=playerInventory,proto3" json:"playerInventory,omitempty"`
}

func (m *QueryGetPlayerResponse) Reset()         { *m = QueryGetPlayerResponse{} }
func (m *QueryGetPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlayerResponse) ProtoMessage()    {}
func (*QueryGetPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{48}
}
func (m *QueryGetPlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlayerResponse.Merge(m, src)
}
func (m *QueryGetPlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlayerResponse proto.InternalMessageInfo

func (m *QueryGetPlayerResponse) GetPlayer() Player {
	if m != nil {
		return m.Player
	}
	return Player{}
}

func (m *QueryGetPlayerResponse) GetGridAttributes() *GridAttributes {
	if m != nil {
		return m.GridAttributes
	}
	return nil
}

func (m *QueryGetPlayerResponse) GetPlayerInventory() *PlayerInventory {
	if m != nil {
		return m.PlayerInventory
	}
	return nil
}

type QueryAllPlayerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlayerRequest) Reset()         { *m = QueryAllPlayerRequest{} }
func (m *QueryAllPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlayerRequest) ProtoMessage()    {}
func (*QueryAllPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{49}
}
func (m *QueryAllPlayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlayerRequest.Merge(m, src)
}
func (m *QueryAllPlayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlayerRequest proto.InternalMessageInfo

func (m *QueryAllPlayerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPlayerResponse struct {
	Player     []Player            `protobuf:"bytes,1,rep,name=Player,proto3" json:"Player"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlayerResponse) Reset()         { *m = QueryAllPlayerResponse{} }
func (m *QueryAllPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlayerResponse) ProtoMessage()    {}
func (*QueryAllPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{50}
}
func (m *QueryAllPlayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlayerResponse.Merge(m, src)
}
func (m *QueryAllPlayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlayerResponse proto.InternalMessageInfo

func (m *QueryAllPlayerResponse) GetPlayer() []Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *QueryAllPlayerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReactorRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetReactorRequest) Reset()         { *m = QueryGetReactorRequest{} }
func (m *QueryGetReactorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReactorRequest) ProtoMessage()    {}
func (*QueryGetReactorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{51}
}
func (m *QueryGetReactorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReactorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReactorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReactorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReactorRequest.Merge(m, src)
}
func (m *QueryGetReactorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReactorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReactorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReactorRequest proto.InternalMessageInfo

func (m *QueryGetReactorRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetReactorResponse struct {
	Reactor        Reactor         `protobuf:"bytes,1,opt,name=Reactor,proto3" json:"Reactor"`
	GridAttributes *GridAttributes `protobuf:"bytes,2,opt,name=gridAttributes,proto3" json:"gridAttributes,omitempty"`
}

func (m *QueryGetReactorResponse) Reset()         { *m = QueryGetReactorResponse{} }
func (m *QueryGetReactorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReactorResponse) ProtoMessage()    {}
func (*QueryGetReactorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{52}
}
func (m *QueryGetReactorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReactorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReactorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReactorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReactorResponse.Merge(m, src)
}
func (m *QueryGetReactorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReactorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReactorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReactorResponse proto.InternalMessageInfo

func (m *QueryGetReactorResponse) GetReactor() Reactor {
	if m != nil {
		return m.Reactor
	}
	return Reactor{}
}

func (m *QueryGetReactorResponse) GetGridAttributes() *GridAttributes {
	if m != nil {
		return m.GridAttributes
	}
	return nil
}

type QueryAllReactorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReactorRequest) Reset()         { *m = QueryAllReactorRequest{} }
func (m *QueryAllReactorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReactorRequest) ProtoMessage()    {}
func (*QueryAllReactorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{53}
}
func (m *QueryAllReactorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReactorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReactorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReactorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReactorRequest.Merge(m, src)
}
func (m *QueryAllReactorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReactorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReactorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReactorRequest proto.InternalMessageInfo

func (m *QueryAllReactorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReactorResponse struct {
	Reactor    []Reactor           `protobuf:"bytes,1,rep,name=Reactor,proto3" json:"Reactor"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReactorResponse) Reset()         { *m = QueryAllReactorResponse{} }
func (m *QueryAllReactorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReactorResponse) ProtoMessage()    {}
func (*QueryAllReactorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{54}
}
func (m *QueryAllReactorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReactorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReactorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReactorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReactorResponse.Merge(m, src)
}
func (m *QueryAllReactorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReactorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReactorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReactorResponse proto.InternalMessageInfo

func (m *QueryAllReactorResponse) GetReactor() []Reactor {
	if m != nil {
		return m.Reactor
	}
	return nil
}

func (m *QueryAllReactorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStructRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetStructRequest) Reset()         { *m = QueryGetStructRequest{} }
func (m *QueryGetStructRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStructRequest) ProtoMessage()    {}
func (*QueryGetStructRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{55}
}
func (m *QueryGetStructRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStructRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStructRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStructRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStructRequest.Merge(m, src)
}
func (m *QueryGetStructRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStructRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStructRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStructRequest proto.InternalMessageInfo

func (m *QueryGetStructRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetStructResponse struct {
	Struct           Struct            `protobuf:"bytes,1,opt,name=Struct,proto3" json:"Struct"`
	StructAttributes *StructAttributes `protobuf:"bytes,2,opt,name=structAttributes,proto3" json:"structAttributes,omitempty"`
	GridAttributes   *GridAttributes   `protobuf:"bytes,3,opt,name=gridAttributes,proto3" json:"gridAttributes,omitempty"`
	StructDefenders  []string          `protobuf:"bytes,4,rep,name=structDefenders,proto3" json:"structDefenders,omitempty"`
}

func (m *QueryGetStructResponse) Reset()         { *m = QueryGetStructResponse{} }
func (m *QueryGetStructResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStructResponse) ProtoMessage()    {}
func (*QueryGetStructResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{56}
}
func (m *QueryGetStructResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStructResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStructResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStructResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStructResponse.Merge(m, src)
}
func (m *QueryGetStructResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStructResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStructResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStructResponse proto.InternalMessageInfo

func (m *QueryGetStructResponse) GetStruct() Struct {
	if m != nil {
		return m.Struct
	}
	return Struct{}
}

func (m *QueryGetStructResponse) GetStructAttributes() *StructAttributes {
	if m != nil {
		return m.StructAttributes
	}
	return nil
}

func (m *QueryGetStructResponse) GetGridAttributes() *GridAttributes {
	if m != nil {
		return m.GridAttributes
	}
	return nil
}

func (m *QueryGetStructResponse) GetStructDefenders() []string {
	if m != nil {
		return m.StructDefenders
	}
	return nil
}

type QueryAllStructRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStructRequest) Reset()         { *m = QueryAllStructRequest{} }
func (m *QueryAllStructRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStructRequest) ProtoMessage()    {}
func (*QueryAllStructRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{57}
}
func (m *QueryAllStructRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStructRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStructRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStructRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStructRequest.Merge(m, src)
}
func (m *QueryAllStructRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStructRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStructRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStructRequest proto.InternalMessageInfo

func (m *QueryAllStructRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStructResponse struct {
	Struct     []Struct            `protobuf:"bytes,1,rep,name=Struct,proto3" json:"Struct"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStructResponse) Reset()         { *m = QueryAllStructResponse{} }
func (m *QueryAllStructResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStructResponse) ProtoMessage()    {}
func (*QueryAllStructResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{58}
}
func (m *QueryAllStructResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStructResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStructResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStructResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStructResponse.Merge(m, src)
}
func (m *QueryAllStructResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStructResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStructResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStructResponse proto.InternalMessageInfo

func (m *QueryAllStructResponse) GetStruct() []Struct {
	if m != nil {
		return m.Struct
	}
	return nil
}

func (m *QueryAllStructResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStructAttributeRequest struct {
	StructId      string `protobuf:"bytes,1,opt,name=structId,proto3" json:"structId,omitempty"`
	AttributeType string `protobuf:"bytes,2,opt,name=attributeType,proto3" json:"attributeType,omitempty"`
}

func (m *QueryGetStructAttributeRequest) Reset()         { *m = QueryGetStructAttributeRequest{} }
func (m *QueryGetStructAttributeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStructAttributeRequest) ProtoMessage()    {}
func (*QueryGetStructAttributeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{59}
}
func (m *QueryGetStructAttributeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStructAttributeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStructAttributeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStructAttributeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStructAttributeRequest.Merge(m, src)
}
func (m *QueryGetStructAttributeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStructAttributeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStructAttributeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStructAttributeRequest proto.InternalMessageInfo

func (m *QueryGetStructAttributeRequest) GetStructId() string {
	if m != nil {
		return m.StructId
	}
	return ""
}

func (m *QueryGetStructAttributeRequest) GetAttributeType() string {
	if m != nil {
		return m.AttributeType
	}
	return ""
}

type QueryGetStructAttributeResponse struct {
	Attribute uint64 `protobuf:"varint,1,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (m *QueryGetStructAttributeResponse) Reset()         { *m = QueryGetStructAttributeResponse{} }
func (m *QueryGetStructAttributeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStructAttributeResponse) ProtoMessage()    {}
func (*QueryGetStructAttributeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{60}
}
func (m *QueryGetStructAttributeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStructAttributeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStructAttributeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStructAttributeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStructAttributeResponse.Merge(m, src)
}
func (m *QueryGetStructAttributeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStructAttributeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStructAttributeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStructAttributeResponse proto.InternalMessageInfo

func (m *QueryGetStructAttributeResponse) GetAttribute() uint64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

type QueryGetStructTypeRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetStructTypeRequest) Reset()         { *m = QueryGetStructTypeRequest{} }
func (m *QueryGetStructTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStructTypeRequest) ProtoMessage()    {}
func (*QueryGetStructTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{61}
}
func (m *QueryGetStructTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStructTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStructTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStructTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStructTypeRequest.Merge(m, src)
}
func (m *QueryGetStructTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStructTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStructTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStructTypeRequest proto.InternalMessageInfo

func (m *QueryGetStructTypeRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetStructTypeResponse struct {
	StructType StructType `protobuf:"bytes,1,opt,name=StructType,proto3" json:"StructType"`
}

func (m *QueryGetStructTypeResponse) Reset()         { *m = QueryGetStructTypeResponse{} }
func (m *QueryGetStructTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStructTypeResponse) ProtoMessage()    {}
func (*QueryGetStructTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{62}
}
func (m *QueryGetStructTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStructTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStructTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStructTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStructTypeResponse.Merge(m, src)
}
func (m *QueryGetStructTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStructTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStructTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStructTypeResponse proto.InternalMessageInfo

func (m *QueryGetStructTypeResponse) GetStructType() StructType {
	if m != nil {
		return m.StructType
	}
	return StructType{}
}

type QueryAllStructTypeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStructTypeRequest) Reset()         { *m = QueryAllStructTypeRequest{} }
func (m *QueryAllStructTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStructTypeRequest) ProtoMessage()    {}
func (*QueryAllStructTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{63}
}
func (m *QueryAllStructTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStructTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStructTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStructTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStructTypeRequest.Merge(m, src)
}
func (m *QueryAllStructTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStructTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStructTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStructTypeRequest proto.InternalMessageInfo

func (m *QueryAllStructTypeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStructTypeResponse struct {
	StructType []StructType        `protobuf:"bytes,1,rep,name=StructType,proto3" json:"StructType"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStructTypeResponse) Reset()         { *m = QueryAllStructTypeResponse{} }
func (m *QueryAllStructTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStructTypeResponse) ProtoMessage()    {}
func (*QueryAllStructTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{64}
}
func (m *QueryAllStructTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStructTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStructTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStructTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStructTypeResponse.Merge(m, src)
}
func (m *QueryAllStructTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStructTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStructTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStructTypeResponse proto.InternalMessageInfo

func (m *QueryAllStructTypeResponse) GetStructType() []StructType {
	if m != nil {
		return m.StructType
	}
	return nil
}

func (m *QueryAllStructTypeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSubstationRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetSubstationRequest) Reset()         { *m = QueryGetSubstationRequest{} }
func (m *QueryGetSubstationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubstationRequest) ProtoMessage()    {}
func (*QueryGetSubstationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{65}
}
func (m *QueryGetSubstationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubstationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubstationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubstationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubstationRequest.Merge(m, src)
}
func (m *QueryGetSubstationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubstationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubstationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubstationRequest proto.InternalMessageInfo

func (m *QueryGetSubstationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetSubstationResponse struct {
	Substation     Substation      `protobuf:"bytes,1,opt,name=Substation,proto3" json:"Substation"`
	GridAttributes *GridAttributes `protobuf:"bytes,2,opt,name=gridAttributes,proto3" json:"gridAttributes,omitempty"`
}

func (m *QueryGetSubstationResponse) Reset()         { *m = QueryGetSubstationResponse{} }
func (m *QueryGetSubstationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubstationResponse) ProtoMessage()    {}
func (*QueryGetSubstationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{66}
}
func (m *QueryGetSubstationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubstationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubstationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubstationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubstationResponse.Merge(m, src)
}
func (m *QueryGetSubstationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubstationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubstationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubstationResponse proto.InternalMessageInfo

func (m *QueryGetSubstationResponse) GetSubstation() Substation {
	if m != nil {
		return m.Substation
	}
	return Substation{}
}

func (m *QueryGetSubstationResponse) GetGridAttributes() *GridAttributes {
	if m != nil {
		return m.GridAttributes
	}
	return nil
}

type QueryAllSubstationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSubstationRequest) Reset()         { *m = QueryAllSubstationRequest{} }
func (m *QueryAllSubstationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSubstationRequest) ProtoMessage()    {}
func (*QueryAllSubstationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{67}
}
func (m *QueryAllSubstationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSubstationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSubstationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSubstationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSubstationRequest.Merge(m, src)
}
func (m *QueryAllSubstationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSubstationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSubstationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSubstationRequest proto.InternalMessageInfo

func (m *QueryAllSubstationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSubstationResponse struct {
	Substation []Substation        `protobuf:"bytes,1,rep,name=Substation,proto3" json:"Substation"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSubstationResponse) Reset()         { *m = QueryAllSubstationResponse{} }
func (m *QueryAllSubstationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSubstationResponse) ProtoMessage()    {}
func (*QueryAllSubstationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec69a82c62500e60, []int{68}
}
func (m *QueryAllSubstationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSubstationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSubstationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSubstationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSubstationResponse.Merge(m, src)
}
func (m *QueryAllSubstationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSubstationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSubstationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSubstationResponse proto.InternalMessageInfo

func (m *QueryAllSubstationResponse) GetSubstation() []Substation {
	if m != nil {
		return m.Substation
	}
	return nil
}

func (m *QueryAllSubstationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "structs.structs.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "structs.structs.QueryParamsResponse")
	proto.RegisterType((*QueryBlockHeight)(nil), "structs.structs.QueryBlockHeight")
	proto.RegisterType((*QueryBlockHeightResponse)(nil), "structs.structs.QueryBlockHeightResponse")
	proto.RegisterType((*QueryGetAddressRequest)(nil), "structs.structs.QueryGetAddressRequest")
	proto.RegisterType((*QueryAllAddressByPlayerRequest)(nil), "structs.structs.QueryAllAddressByPlayerRequest")
	proto.RegisterType((*QueryAllAddressRequest)(nil), "structs.structs.QueryAllAddressRequest")
	proto.RegisterType((*QueryAddressResponse)(nil), "structs.structs.QueryAddressResponse")
	proto.RegisterType((*QueryAllAddressResponse)(nil), "structs.structs.QueryAllAddressResponse")
	proto.RegisterType((*QueryGetAllocationRequest)(nil), "structs.structs.QueryGetAllocationRequest")
	proto.RegisterType((*QueryGetAllocationResponse)(nil), "structs.structs.QueryGetAllocationResponse")
	proto.RegisterType((*QueryAllAllocationRequest)(nil), "structs.structs.QueryAllAllocationRequest")
	proto.RegisterType((*QueryAllAllocationResponse)(nil), "structs.structs.QueryAllAllocationResponse")
	proto.RegisterType((*QueryGetFleetRequest)(nil), "structs.structs.QueryGetFleetRequest")
	proto.RegisterType((*QueryGetFleetResponse)(nil), "structs.structs.QueryGetFleetResponse")
	proto.RegisterType((*QueryGetFleetByIndexRequest)(nil), "structs.structs.QueryGetFleetByIndexRequest")
	proto.RegisterType((*QueryAllFleetRequest)(nil), "structs.structs.QueryAllFleetRequest")
	proto.RegisterType((*QueryAllFleetResponse)(nil), "structs.structs.QueryAllFleetResponse")
	proto.RegisterType((*QueryGetGridRequest)(nil), "structs.structs.QueryGetGridRequest")
	proto.RegisterType((*QueryAllGridRequest)(nil), "structs.structs.QueryAllGridRequest")
	proto.RegisterType((*QueryGetGridResponse)(nil), "structs.structs.QueryGetGridResponse")
	proto.RegisterType((*QueryAllGridResponse)(nil), "structs.structs.QueryAllGridResponse")
	proto.RegisterType((*QueryGetGuildRequest)(nil), "structs.structs.QueryGetGuildRequest")
	proto.RegisterType((*QueryGetGuildResponse)(nil), "structs.structs.QueryGetGuildResponse")
	proto.RegisterType((*QueryAllGuildRequest)(nil), "structs.structs.QueryAllGuildRequest")
	proto.RegisterType((*QueryAllGuildResponse)(nil), "structs.structs.QueryAllGuildResponse")
	proto.RegisterType((*QueryGetGuildMembershipApplicationRequest)(nil), "structs.structs.QueryGetGuildMembershipApplicationRequest")
	proto.RegisterType((*QueryGetGuildMembershipApplicationResponse)(nil), "structs.structs.QueryGetGuildMembershipApplicationResponse")
	proto.RegisterType((*QueryAllGuildMembershipApplicationRequest)(nil), "structs.structs.QueryAllGuildMembershipApplicationRequest")
	proto.RegisterType((*QueryAllGuildMembershipApplicationResponse)(nil), "structs.structs.QueryAllGuildMembershipApplicationResponse")
	proto.RegisterType((*QueryGetInfusionRequest)(nil), "structs.structs.QueryGetInfusionRequest")
	proto.RegisterType((*QueryGetInfusionResponse)(nil), "structs.structs.QueryGetInfusionResponse")
	proto.RegisterType((*QueryAllInfusionRequest)(nil), "structs.structs.QueryAllInfusionRequest")
	proto.RegisterType((*QueryAllInfusionResponse)(nil), "structs.structs.QueryAllInfusionResponse")
	proto.RegisterType((*QueryGetPermissionRequest)(nil), "structs.structs.QueryGetPermissionRequest")
	proto.RegisterType((*QueryAllPermissionByObjectRequest)(nil), "structs.structs.QueryAllPermissionByObjectRequest")
	proto.RegisterType((*QueryAllPermissionByPlayerRequest)(nil), "structs.structs.QueryAllPermissionByPlayerRequest")
	proto.RegisterType((*QueryAllPermissionRequest)(nil), "structs.structs.QueryAllPermissionRequest")
	proto.RegisterType((*QueryGetPermissionResponse)(nil), "structs.structs.QueryGetPermissionResponse")
	proto.RegisterType((*QueryAllPermissionResponse)(nil), "structs.structs.QueryAllPermissionResponse")
	proto.RegisterType((*QueryGetPlanetRequest)(nil), "structs.structs.QueryGetPlanetRequest")
	proto.RegisterType((*QueryGetPlanetResponse)(nil), "structs.structs.QueryGetPlanetResponse")
	proto.RegisterType((*QueryAllPlanetRequest)(nil), "structs.structs.QueryAllPlanetRequest")
	proto.RegisterType((*QueryAllPlanetByPlayerRequest)(nil), "structs.structs.QueryAllPlanetByPlayerRequest")
	proto.RegisterType((*QueryAllPlanetResponse)(nil), "structs.structs.QueryAllPlanetResponse")
	proto.RegisterType((*QueryGetPlanetAttributeRequest)(nil), "structs.structs.QueryGetPlanetAttributeRequest")
	proto.RegisterType((*QueryGetPlanetAttributeResponse)(nil), "structs.structs.QueryGetPlanetAttributeResponse")
	proto.RegisterType((*QueryGetPlayerRequest)(nil), "structs.structs.QueryGetPlayerRequest")
	proto.RegisterType((*QueryGetPlayerResponse)(nil), "structs.structs.QueryGetPlayerResponse")
	proto.RegisterType((*QueryAllPlayerRequest)(nil), "structs.structs.QueryAllPlayerRequest")
	proto.RegisterType((*QueryAllPlayerResponse)(nil), "structs.structs.QueryAllPlayerResponse")
	proto.RegisterType((*QueryGetReactorRequest)(nil), "structs.structs.QueryGetReactorRequest")
	proto.RegisterType((*QueryGetReactorResponse)(nil), "structs.structs.QueryGetReactorResponse")
	proto.RegisterType((*QueryAllReactorRequest)(nil), "structs.structs.QueryAllReactorRequest")
	proto.RegisterType((*QueryAllReactorResponse)(nil), "structs.structs.QueryAllReactorResponse")
	proto.RegisterType((*QueryGetStructRequest)(nil), "structs.structs.QueryGetStructRequest")
	proto.RegisterType((*QueryGetStructResponse)(nil), "structs.structs.QueryGetStructResponse")
	proto.RegisterType((*QueryAllStructRequest)(nil), "structs.structs.QueryAllStructRequest")
	proto.RegisterType((*QueryAllStructResponse)(nil), "structs.structs.QueryAllStructResponse")
	proto.RegisterType((*QueryGetStructAttributeRequest)(nil), "structs.structs.QueryGetStructAttributeRequest")
	proto.RegisterType((*QueryGetStructAttributeResponse)(nil), "structs.structs.QueryGetStructAttributeResponse")
	proto.RegisterType((*QueryGetStructTypeRequest)(nil), "structs.structs.QueryGetStructTypeRequest")
	proto.RegisterType((*QueryGetStructTypeResponse)(nil), "structs.structs.QueryGetStructTypeResponse")
	proto.RegisterType((*QueryAllStructTypeRequest)(nil), "structs.structs.QueryAllStructTypeRequest")
	proto.RegisterType((*QueryAllStructTypeResponse)(nil), "structs.structs.QueryAllStructTypeResponse")
	proto.RegisterType((*QueryGetSubstationRequest)(nil), "structs.structs.QueryGetSubstationRequest")
	proto.RegisterType((*QueryGetSubstationResponse)(nil), "structs.structs.QueryGetSubstationResponse")
	proto.RegisterType((*QueryAllSubstationRequest)(nil), "structs.structs.QueryAllSubstationRequest")
	proto.RegisterType((*QueryAllSubstationResponse)(nil), "structs.structs.QueryAllSubstationResponse")
}

func init() { proto.RegisterFile("structs/structs/query.proto", fileDescriptor_ec69a82c62500e60) }

var fileDescriptor_ec69a82c62500e60 = []byte{
	// 2533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0x7b, 0x1c, 0x3b, 0x2e, 0x27, 0x76, 0x5c, 0x71, 0xec, 0xf1, 0x38, 0xfe, 0xea, 0xb5,
	0xe3, 0x59, 0x67, 0xd7, 0x4d, 0x1c, 0xbe, 0x94, 0x0d, 0x8a, 0x6c, 0xa1, 0x1d, 0x02, 0x5a, 0xad,
	0x77, 0xb2, 0x12, 0x02, 0x09, 0xcc, 0x8c, 0xa7, 0x32, 0x19, 0x32, 0x9e, 0x19, 0x4f, 0xb7, 0x97,
	0x8c, 0x46, 0x73, 0x81, 0x85, 0xe5, 0x82, 0xc4, 0x8a, 0x3d, 0x20, 0xb4, 0x5a, 0x0e, 0x70, 0xc8,
	0x11, 0x71, 0x40, 0x1c, 0xb9, 0xb1, 0xc7, 0x95, 0xb8, 0xc0, 0x05, 0xa1, 0x64, 0xa5, 0xf0, 0x67,
	0xa0, 0xae, 0x7a, 0xd5, 0xf5, 0xd5, 0xd5, 0xd3, 0xb6, 0xda, 0xec, 0x25, 0xe3, 0xae, 0x7e, 0xaf,
	0xde, 0xef, 0x7d, 0x54, 0xd5, 0xab, 0xf7, 0x3a, 0x68, 0xd1, 0x0f, 0xba, 0x27, 0x87, 0x81, 0xef,
	0xf1, 0xdf, 0xe3, 0x13, 0xd2, 0xed, 0x6d, 0x77, 0xba, 0xed, 0xa0, 0x8d, 0xa7, 0x61, 0x70, 0x1b,
	0x7e, 0x0b, 0x33, 0x95, 0xa3, 0x46, 0xab, 0xed, 0xd1, 0x7f, 0x19, 0x4d, 0x61, 0xb6, 0xde, 0xae,
	0xb7, 0xe9, 0x9f, 0x5e, 0xf8, 0x17, 0x8c, 0xde, 0xa8, 0xb7, 0xdb, 0xf5, 0x26, 0xf1, 0x2a, 0x9d,
	0x86, 0x57, 0x69, 0xb5, 0xda, 0x41, 0x25, 0x68, 0xb4, 0x5b, 0x3e, 0xbc, 0xdd, 0x3a, 0x6c, 0xfb,
	0x47, 0x6d, 0xdf, 0xab, 0x56, 0x7c, 0xc2, 0x04, 0x7a, 0xef, 0xdd, 0xae, 0x92, 0xa0, 0x72, 0xdb,
	0xeb, 0x54, 0xea, 0x8d, 0x16, 0x25, 0xe6, 0x33, 0xe9, 0x00, 0x3b, 0x95, 0x6e, 0xe5, 0x88, 0xcf,
	0xb4, 0xa4, 0xbf, 0xad, 0xd4, 0x6a, 0x5d, 0xe2, 0xf3, 0xd7, 0xab, 0xc6, 0xeb, 0x66, 0xb3, 0x7d,
	0x28, 0x4f, 0x6f, 0xe8, 0xff, 0xa8, 0x49, 0x48, 0x00, 0x2f, 0x0b, 0xfa, 0xcb, 0x7a, 0xb7, 0x51,
	0xb3, 0x31, 0xd6, 0x4f, 0x1a, 0x4d, 0xfe, 0x72, 0x59, 0x7f, 0xd9, 0x68, 0x3d, 0x3a, 0xf1, 0x85,
	0x54, 0x63, 0xe2, 0x27, 0xa4, 0x67, 0xc5, 0xdc, 0x21, 0xdd, 0xa3, 0x86, 0xef, 0x27, 0x99, 0xa4,
	0x59, 0xe9, 0x91, 0x6e, 0xc2, 0xdb, 0x56, 0xa4, 0x92, 0x61, 0xb0, 0x2e, 0xa9, 0x1c, 0x06, 0x6d,
	0x2b, 0x33, 0xfb, 0xb5, 0x41, 0xf3, 0x4f, 0xaa, 0x7e, 0x20, 0x99, 0xd3, 0x9d, 0x45, 0xf8, 0x9d,
	0xd0, 0x9f, 0xfb, 0xd4, 0x49, 0x65, 0x72, 0x7c, 0x42, 0xfc, 0xc0, 0x7d, 0x07, 0x5d, 0x53, 0x46,
	0xfd, 0x4e, 0xbb, 0xe5, 0x13, 0x7c, 0x17, 0x8d, 0x31, 0x67, 0xe6, 0x9d, 0x55, 0xa7, 0x38, 0xb9,
	0x33, 0xbf, 0xad, 0xc5, 0xdb, 0x36, 0x63, 0xd8, 0x9b, 0xf8, 0xf4, 0xdf, 0x2b, 0x17, 0x9e, 0xbd,
	0xfc, 0xd3, 0x96, 0x53, 0x06, 0x0e, 0x17, 0xa3, 0xab, 0x74, 0xca, 0xbd, 0x66, 0xfb, 0xf0, 0xc9,
	0xb7, 0x48, 0xa3, 0xfe, 0x38, 0x70, 0xef, 0xa1, 0xbc, 0x3e, 0x16, 0xc9, 0x5a, 0x45, 0x93, 0x55,
	0x31, 0x4c, 0x05, 0x8e, 0x96, 0xe5, 0x21, 0x77, 0x07, 0xcd, 0x51, 0xee, 0x12, 0x09, 0x76, 0x59,
	0x10, 0x01, 0x7c, 0x9c, 0x47, 0xe3, 0x10, 0x56, 0x94, 0x6f, 0xa2, 0xcc, 0x1f, 0xdd, 0xf7, 0x1d,
	0xb4, 0x4c, 0x99, 0x76, 0x9b, 0x4d, 0x60, 0xda, 0xeb, 0xed, 0x53, 0x6f, 0x70, 0xe6, 0x02, 0xba,
	0xc4, 0xdc, 0xf3, 0xa0, 0x06, 0xdc, 0xd1, 0x33, 0x7e, 0x13, 0x21, 0x11, 0xef, 0xf9, 0x11, 0x6a,
	0x84, 0x9b, 0xdb, 0x6c, 0x71, 0x6c, 0x87, 0x8b, 0x63, 0x9b, 0xad, 0x46, 0x58, 0x1c, 0xdb, 0xfb,
	0x95, 0x3a, 0x81, 0x79, 0xcb, 0x12, 0xa7, 0xfb, 0x23, 0x80, 0x2e, 0x50, 0x70, 0xe9, 0xaa, 0x04,
	0xe7, 0xcc, 0x12, 0x5a, 0x68, 0x96, 0x49, 0xe0, 0xd3, 0x83, 0x59, 0xad, 0xa6, 0x51, 0xf4, 0x1e,
	0xd1, 0xf4, 0x5e, 0x45, 0x93, 0x22, 0xa8, 0xfd, 0x7c, 0x8e, 0x39, 0x43, 0x1a, 0x72, 0xff, 0xe0,
	0xa0, 0x79, 0x43, 0x25, 0x90, 0x79, 0x5f, 0x96, 0x99, 0x2b, 0x4e, 0xee, 0x6c, 0x18, 0x71, 0x13,
	0x87, 0x55, 0x40, 0x2b, 0xc5, 0x98, 0x7d, 0x73, 0xa8, 0x51, 0x60, 0x16, 0xd9, 0x2a, 0xb7, 0xd0,
	0x42, 0x14, 0x32, 0xd1, 0xc6, 0xc2, 0x4d, 0x3f, 0x85, 0x46, 0x1a, 0xdc, 0xe5, 0x23, 0x8d, 0x9a,
	0xfb, 0xcc, 0x41, 0x85, 0x38, 0x6a, 0xd0, 0x6a, 0x17, 0x21, 0x31, 0x0a, 0x9e, 0x5a, 0x34, 0x14,
	0x13, 0x24, 0x7b, 0xa3, 0xe1, 0xa2, 0x28, 0x4b, 0x4c, 0xb8, 0x84, 0xa6, 0xc2, 0x0d, 0x6a, 0x37,
	0x08, 0xba, 0x8d, 0xea, 0x49, 0x40, 0x7c, 0xd0, 0x6d, 0xc5, 0x98, 0xa6, 0xa4, 0x90, 0x95, 0x35,
	0x36, 0xf7, 0x10, 0xf4, 0x0a, 0x8d, 0x6f, 0xe8, 0x95, 0x55, 0x48, 0xfd, 0x8d, 0xdb, 0x43, 0x93,
	0x62, 0xb1, 0x47, 0xee, 0x2c, 0xf6, 0xc8, 0xc6, 0xcf, 0x78, 0x0e, 0x8d, 0x85, 0xdb, 0xdc, 0x49,
	0x18, 0xaa, 0xb9, 0xe2, 0x68, 0x19, 0x9e, 0xdc, 0x9b, 0xb0, 0x2a, 0x4a, 0x24, 0x78, 0x33, 0x3c,
	0x36, 0x6c, 0xae, 0xff, 0x0e, 0xba, 0xae, 0xd1, 0x81, 0x92, 0x3b, 0xe8, 0x22, 0x1d, 0x00, 0x33,
	0xce, 0x19, 0xfa, 0xd1, 0xb7, 0xa0, 0x1a, 0x23, 0x75, 0xef, 0xa0, 0x45, 0x65, 0xb2, 0xbd, 0xde,
	0x83, 0x56, 0x8d, 0x3c, 0xe5, 0xb2, 0x67, 0xd1, 0xc5, 0x46, 0xf8, 0x0c, 0x5b, 0x1c, 0x7b, 0x70,
	0x7f, 0xc8, 0xd7, 0x6f, 0xb3, 0xa9, 0x20, 0xcd, 0xca, 0x99, 0x1f, 0x39, 0xa0, 0xa2, 0x10, 0x60,
	0xaa, 0x98, 0x4b, 0xa9, 0x62, 0x76, 0x0b, 0xf4, 0x6b, 0x70, 0xf0, 0x94, 0x48, 0x10, 0x86, 0x3c,
	0xd7, 0x7a, 0x15, 0x4d, 0x56, 0x78, 0xb4, 0x47, 0xdb, 0xb2, 0x3c, 0xe4, 0xfe, 0x00, 0x18, 0x77,
	0x9b, 0x4d, 0x99, 0x31, 0x2b, 0x73, 0x3d, 0x14, 0x81, 0xc3, 0xa6, 0x07, 0x63, 0xbd, 0x81, 0x50,
	0x9d, 0x3e, 0x1f, 0xb6, 0xbb, 0x35, 0xeb, 0x26, 0x50, 0x8a, 0x48, 0xca, 0x12, 0xb9, 0xfb, 0x89,
	0x23, 0x9c, 0xac, 0xcc, 0xfa, 0x0d, 0x34, 0x29, 0xc8, 0x7c, 0xeb, 0x5a, 0x92, 0xa6, 0x95, 0xe9,
	0xb3, 0xf3, 0x86, 0xb4, 0x5c, 0x4a, 0x61, 0xb2, 0x94, 0x62, 0xb9, 0x00, 0x9d, 0x88, 0x25, 0x3a,
	0x60, 0x5d, 0x2e, 0xf4, 0x2d, 0x8f, 0x25, 0xfa, 0x20, 0x47, 0xbe, 0x22, 0xf4, 0x3c, 0x22, 0xdf,
	0x8a, 0x36, 0x97, 0x12, 0x6d, 0x76, 0xb6, 0xae, 0xa0, 0x57, 0x15, 0x1b, 0xbe, 0x45, 0x8e, 0xaa,
	0xa4, 0xeb, 0x3f, 0x6e, 0x74, 0x76, 0x3b, 0x9d, 0x66, 0x43, 0xdd, 0xd2, 0xf3, 0x68, 0x9c, 0x66,
	0xaf, 0xd1, 0x5a, 0xe0, 0x8f, 0x49, 0xa7, 0xb8, 0xfb, 0x7b, 0x07, 0x6d, 0xa5, 0x91, 0x01, 0xe6,
	0x38, 0x46, 0x05, 0x3b, 0x15, 0x38, 0xe0, 0x56, 0xbc, 0x8d, 0x62, 0x59, 0xc0, 0x70, 0x09, 0x93,
	0xba, 0x3e, 0x18, 0x81, 0xbb, 0x26, 0xd1, 0x08, 0x59, 0x05, 0xc4, 0x7f, 0xb9, 0x59, 0x86, 0x48,
	0x4d, 0x69, 0x96, 0x5c, 0xe6, 0x66, 0xc9, 0x2e, 0xc8, 0xbe, 0x07, 0x49, 0x5a, 0x89, 0x04, 0x0f,
	0xe0, 0x82, 0xc3, 0xad, 0xb9, 0x8e, 0xae, 0xd4, 0x88, 0x1f, 0x00, 0x65, 0x14, 0x58, 0xea, 0xa0,
	0x9c, 0x3e, 0x8e, 0xa8, 0x99, 0xf5, 0x77, 0x21, 0x97, 0x57, 0xa6, 0x8e, 0x76, 0xc9, 0x4b, 0x7c,
	0x0c, 0xfc, 0xb4, 0x60, 0x18, 0x88, 0x13, 0x80, 0x39, 0x22, 0x06, 0xb7, 0x22, 0x12, 0x4b, 0x1d,
	0x73, 0x56, 0x11, 0xf0, 0x57, 0x07, 0xc0, 0x2b, 0x32, 0x62, 0xc1, 0xe7, 0x4e, 0x05, 0xfe, 0xfc,
	0x33, 0x9a, 0xfb, 0x22, 0xa3, 0xdd, 0x8f, 0xd2, 0x71, 0x6e, 0x1f, 0x17, 0x5d, 0x16, 0x39, 0x7a,
	0xe4, 0x52, 0x65, 0xcc, 0xfd, 0xc0, 0x41, 0x6b, 0x5c, 0x77, 0x31, 0xc3, 0x5e, 0xef, 0xed, 0xea,
	0x8f, 0xc9, 0x61, 0x20, 0x5d, 0x8a, 0xda, 0x74, 0x40, 0x5c, 0x8a, 0xf8, 0x73, 0x66, 0x97, 0x22,
	0x1b, 0x92, 0xff, 0xff, 0xf5, 0x4c, 0x4a, 0xa7, 0x4d, 0xa3, 0x66, 0x15, 0x74, 0x4f, 0xc4, 0xed,
	0x42, 0x16, 0x02, 0x51, 0xf7, 0x16, 0xba, 0xda, 0x91, 0x46, 0xa5, 0xf4, 0x62, 0xcd, 0xbc, 0x74,
	0x6b, 0x84, 0x65, 0x83, 0xd5, 0xfd, 0x8b, 0x94, 0xbb, 0xc7, 0x48, 0x7b, 0x1b, 0xcd, 0xe8, 0x2c,
	0x3c, 0xed, 0x48, 0x21, 0xce, 0xe4, 0xcd, 0x6e, 0xc7, 0xda, 0x14, 0xa9, 0xc5, 0x3e, 0x2d, 0x8b,
	0xd8, 0x72, 0x90, 0x97, 0x8e, 0x28, 0x07, 0x70, 0x4a, 0xd0, 0xee, 0x2b, 0x68, 0x8c, 0x8d, 0xd8,
	0xcb, 0x16, 0xf4, 0x35, 0xac, 0x5e, 0x20, 0xce, 0xec, 0x76, 0x46, 0x7d, 0x49, 0xa7, 0x94, 0xa6,
	0xca, 0xd9, 0x7c, 0xa9, 0x11, 0x96, 0x0d, 0x56, 0xf7, 0x40, 0xe4, 0x2f, 0xaa, 0x49, 0xb2, 0x8a,
	0xcc, 0x9f, 0x39, 0x68, 0x49, 0x95, 0xf0, 0x45, 0x2c, 0xc2, 0xdf, 0x3a, 0xa2, 0x48, 0x92, 0xe0,
	0xd0, 0xdc, 0x69, 0x1c, 0x9a, 0x51, 0x50, 0x56, 0xa1, 0x88, 0x14, 0x85, 0x5a, 0xe4, 0x1d, 0xd5,
	0x40, 0x2d, 0x12, 0x28, 0x06, 0xa2, 0xcf, 0xe1, 0x49, 0x1b, 0xdd, 0x5c, 0xde, 0xed, 0x75, 0x08,
	0x9c, 0xa4, 0xea, 0xa0, 0x7b, 0x1f, 0xad, 0x58, 0x65, 0x80, 0x19, 0x6e, 0xa0, 0x89, 0x88, 0x07,
	0x6e, 0x8f, 0x62, 0x40, 0x5b, 0x39, 0x92, 0xf3, 0xf4, 0x95, 0xf3, 0xb9, 0xba, 0x72, 0x28, 0xa5,
	0x62, 0xe8, 0x1e, 0xe9, 0x26, 0xad, 0x9c, 0x1e, 0xe9, 0x4a, 0x86, 0xee, 0x91, 0x6e, 0x76, 0x2b,
	0xe7, 0xdb, 0x68, 0x1a, 0xe2, 0xaa, 0xf5, 0x1e, 0x69, 0x05, 0xed, 0x6e, 0x0f, 0x16, 0xce, 0xaa,
	0x05, 0x48, 0x44, 0x57, 0xd6, 0x19, 0xb5, 0x65, 0x23, 0xd9, 0x23, 0xab, 0x65, 0xa3, 0x05, 0xac,
	0xcd, 0x8e, 0xb9, 0xd3, 0xd8, 0x31, 0xa3, 0x80, 0x2d, 0x0a, 0x0f, 0x97, 0x59, 0xf9, 0xd8, 0x16,
	0x0c, 0x1f, 0x3b, 0x22, 0x45, 0x8c, 0x48, 0x41, 0x8b, 0xaf, 0xa3, 0x71, 0x18, 0x02, 0x2b, 0xe5,
	0x0d, 0x35, 0xe0, 0x3d, 0xe8, 0xc1, 0xc9, 0xb3, 0x2b, 0x74, 0x49, 0x85, 0x53, 0x4d, 0x91, 0xac,
	0xbc, 0xf8, 0xb1, 0x54, 0xc8, 0x4c, 0x34, 0x40, 0xee, 0x74, 0x06, 0xc8, 0xfe, 0x3c, 0x7c, 0x48,
	0x45, 0xda, 0x1c, 0xf9, 0xe1, 0x88, 0xf0, 0x39, 0xa7, 0x14, 0xd1, 0xc8, 0x46, 0xac, 0xab, 0x9a,
	0xbd, 0xe6, 0xd1, 0xc8, 0x9e, 0xc2, 0x63, 0x8c, 0xbd, 0x37, 0xdc, 0xb8, 0x66, 0x99, 0x40, 0x3e,
	0xc6, 0x74, 0xd6, 0x98, 0x98, 0xc8, 0x9d, 0x6d, 0x93, 0x28, 0x22, 0x68, 0x7b, 0x7d, 0x93, 0x3c,
	0x22, 0xad, 0x1a, 0xe9, 0xfa, 0xf9, 0xd1, 0xd5, 0x5c, 0x71, 0xa2, 0xac, 0x0f, 0xcb, 0x5b, 0x80,
	0x6a, 0xbc, 0xf3, 0xd8, 0x02, 0x12, 0x8c, 0x9e, 0x4b, 0x6f, 0xf4, 0xf3, 0x38, 0xb3, 0x34, 0xe7,
	0x48, 0x67, 0x16, 0x83, 0x22, 0xce, 0x2c, 0xfe, 0x7c, 0xfa, 0x33, 0xcb, 0x90, 0x91, 0xea, 0xcc,
	0x92, 0xea, 0xf3, 0x6c, 0x82, 0x70, 0x5a, 0x33, 0xc2, 0x47, 0x69, 0x84, 0x1f, 0x88, 0x04, 0x5a,
	0x26, 0x16, 0xe5, 0x68, 0x31, 0x6a, 0xad, 0xcc, 0x09, 0x12, 0x5e, 0x8e, 0x16, 0x23, 0xf2, 0x35,
	0xc0, 0x44, 0x93, 0x55, 0xc8, 0x3c, 0x93, 0x32, 0xf3, 0x14, 0x6a, 0xe4, 0x4e, 0xad, 0xc6, 0xb9,
	0x74, 0x4f, 0x1e, 0x46, 0x7d, 0xc4, 0x34, 0xdd, 0x13, 0x99, 0x5a, 0xd2, 0x2b, 0x1a, 0xb5, 0xbb,
	0x27, 0x22, 0x89, 0xf4, 0x8a, 0x46, 0xce, 0xa5, 0x7b, 0x62, 0xea, 0x75, 0x2e, 0x7e, 0x1e, 0x6e,
	0x8f, 0xdc, 0x59, 0xec, 0x91, 0x8d, 0x9f, 0x77, 0xde, 0x2f, 0xa2, 0x8b, 0x14, 0x2a, 0x0e, 0xd0,
	0x54, 0x89, 0x04, 0x52, 0x7b, 0x16, 0xaf, 0xc5, 0xb7, 0xee, 0x24, 0x92, 0xc2, 0xab, 0x43, 0x49,
	0xb8, 0x54, 0x77, 0xf6, 0xa7, 0xff, 0xf8, 0xfc, 0x37, 0x23, 0x53, 0xf8, 0xb2, 0x47, 0x1b, 0xbb,
	0x8f, 0x99, 0x8c, 0x00, 0x8d, 0xb1, 0x3e, 0x32, 0x7e, 0x25, 0x7e, 0x2a, 0xa5, 0x59, 0x5d, 0x58,
	0x4f, 0x26, 0x02, 0x51, 0x2b, 0x54, 0xd4, 0x02, 0x9e, 0xf7, 0xe2, 0xbf, 0x4f, 0xc0, 0x03, 0x34,
	0x0e, 0x0d, 0x48, 0xbc, 0x19, 0x3f, 0xa3, 0xd1, 0x68, 0x2e, 0xa4, 0x6b, 0x64, 0xba, 0x2e, 0x95,
	0x7d, 0x03, 0x17, 0xf4, 0xaf, 0x1e, 0xbc, 0x3e, 0xfc, 0x31, 0xc0, 0x3d, 0x84, 0x80, 0x6d, 0xb7,
	0xd9, 0xb4, 0x21, 0x30, 0xfa, 0xc5, 0x85, 0xe2, 0x70, 0x42, 0x00, 0x91, 0xa7, 0x20, 0x30, 0xbe,
	0xaa, 0x83, 0xc0, 0x9f, 0x38, 0x08, 0x0b, 0xd9, 0xfc, 0xae, 0x87, 0xbd, 0x61, 0x53, 0x6b, 0xb7,
	0xc2, 0x53, 0x60, 0x79, 0x9d, 0x62, 0xd9, 0xc4, 0x1b, 0x3a, 0x96, 0x83, 0x6a, 0xef, 0x80, 0x25,
	0xee, 0x5e, 0x9f, 0xdf, 0x28, 0x07, 0xf8, 0x03, 0x47, 0xee, 0x2d, 0xe2, 0x2d, 0xbb, 0x7b, 0xf4,
	0xe6, 0x67, 0xe1, 0x56, 0x2a, 0x5a, 0x80, 0xb5, 0x4a, 0x61, 0x15, 0x70, 0x3e, 0xe6, 0xf3, 0x13,
	0xaf, 0xdf, 0xa8, 0x0d, 0xf0, 0xcf, 0x1d, 0x74, 0x45, 0x30, 0x86, 0x9e, 0xda, 0xb2, 0x2b, 0x9d,
	0x16, 0x4c, 0x6c, 0x3f, 0xd5, 0x5d, 0xa4, 0x60, 0xae, 0xe3, 0x6b, 0x31, 0x60, 0xb0, 0x0f, 0x4d,
	0x3a, 0xbc, 0x61, 0xd5, 0x4f, 0x6e, 0x1b, 0x16, 0x6e, 0x0e, 0x23, 0xb3, 0x0a, 0xa5, 0x9f, 0xd7,
	0x30, 0xe5, 0x7f, 0xe5, 0xa0, 0xcb, 0x72, 0x07, 0x13, 0xbf, 0x96, 0x3c, 0xab, 0xda, 0xe8, 0x4c,
	0x8d, 0x61, 0x93, 0x62, 0x58, 0xc3, 0x2b, 0x2a, 0x86, 0x30, 0x34, 0x68, 0x6f, 0xd4, 0xeb, 0xd3,
	0x9f, 0x01, 0x3e, 0x46, 0x97, 0x28, 0x67, 0xe8, 0x86, 0x0d, 0xab, 0x69, 0xd3, 0xd8, 0x41, 0x6f,
	0x82, 0xba, 0x73, 0x14, 0xc3, 0x55, 0x3c, 0xa5, 0x62, 0xc0, 0x4f, 0xd1, 0x68, 0x78, 0x98, 0xe0,
	0x75, 0xab, 0x2e, 0x52, 0xf7, 0xb1, 0xb0, 0x31, 0x84, 0x0a, 0x84, 0xbd, 0x42, 0x85, 0x2d, 0xe1,
	0x45, 0xe5, 0xb3, 0x25, 0xaf, 0x2f, 0xf5, 0x37, 0x07, 0xf8, 0x08, 0x8d, 0xd3, 0x63, 0xac, 0xd9,
	0xb4, 0x09, 0x57, 0x5b, 0x9f, 0x85, 0x8d, 0x21, 0x54, 0x20, 0xfc, 0x3a, 0x15, 0x3e, 0x8d, 0xaf,
	0x28, 0xc2, 0xc3, 0x00, 0x63, 0x0d, 0xae, 0x04, 0x1d, 0xa4, 0xee, 0x5c, 0x82, 0x73, 0x95, 0x1e,
	0x5b, 0x4c, 0x80, 0xd1, 0xce, 0x15, 0x0b, 0xb0, 0x63, 0x74, 0x89, 0x52, 0x27, 0x3b, 0x34, 0x8d,
	0x5c, 0xbd, 0xb7, 0x17, 0xe3, 0x50, 0x2a, 0x17, 0xff, 0xcb, 0x49, 0x6a, 0xe7, 0xe0, 0xbb, 0xc9,
	0x6a, 0x25, 0xf5, 0xa7, 0x0a, 0x6f, 0x9c, 0x89, 0x17, 0xf0, 0xee, 0x51, 0xbc, 0xf7, 0xf0, 0x5d,
	0x15, 0xef, 0xc1, 0x51, 0xc4, 0x75, 0x50, 0x11, 0x6c, 0x5e, 0x1f, 0xfa, 0x7f, 0x03, 0x79, 0xdb,
	0xfc, 0xbb, 0x83, 0x96, 0xec, 0xa2, 0x42, 0x23, 0xdf, 0x4d, 0xb6, 0xde, 0x59, 0xd4, 0x4b, 0xd5,
	0x44, 0x8b, 0x39, 0x00, 0x92, 0xd4, 0xc3, 0x1f, 0x39, 0xa2, 0x09, 0x83, 0x8b, 0x56, 0xbb, 0x6a,
	0xfd, 0x21, 0x5b, 0x26, 0x12, 0xd3, 0xa2, 0x72, 0xef, 0x50, 0x40, 0xaf, 0xe3, 0x5b, 0xc6, 0x17,
	0x80, 0x5e, 0x5f, 0x69, 0x81, 0x0d, 0xa4, 0x33, 0x7b, 0x80, 0x26, 0xf9, 0x44, 0xa1, 0x35, 0xed,
	0xe7, 0x5f, 0x4a, 0x60, 0x31, 0xed, 0x27, 0x77, 0x81, 0x02, 0xbb, 0x86, 0x67, 0x0c, 0x60, 0xf8,
	0x43, 0x07, 0x21, 0x51, 0x8c, 0x4f, 0x38, 0x16, 0x8d, 0x26, 0x46, 0xc2, 0xb1, 0x68, 0x76, 0x07,
	0xdc, 0x2d, 0x0a, 0x61, 0x1d, 0xbb, 0x31, 0x5f, 0x38, 0x7a, 0x7d, 0xb9, 0x9b, 0x34, 0xc0, 0x7f,
	0x74, 0x10, 0x36, 0xdb, 0x48, 0x78, 0xc7, 0xaa, 0xb0, 0xb5, 0xe7, 0x94, 0x70, 0x5a, 0xc6, 0x60,
	0x34, 0x03, 0x4a, 0xc2, 0xc8, 0x5a, 0x55, 0x5e, 0x9f, 0xb7, 0xac, 0x4c, 0x98, 0x90, 0xf2, 0xa4,
	0x83, 0xa9, 0x66, 0x3d, 0xd9, 0xc1, 0x34, 0x13, 0x9f, 0x30, 0xdd, 0x10, 0xb3, 0x24, 0xa7, 0x1b,
	0xa9, 0x9d, 0x1c, 0x8f, 0xcc, 0xdc, 0x98, 0x05, 0x32, 0xfc, 0x13, 0x5e, 0xbf, 0xc4, 0xf6, 0x7d,
	0x5e, 0xb5, 0xca, 0xe6, 0x50, 0x3a, 0x90, 0x7b, 0x83, 0xca, 0x9d, 0xc3, 0xb3, 0xda, 0xc7, 0xb1,
	0xec, 0x44, 0x38, 0x41, 0x13, 0x8c, 0x3e, 0xd4, 0xdd, 0xbe, 0xd7, 0xa7, 0x92, 0x6d, 0x94, 0x65,
	0xdd, 0x79, 0x2a, 0x7b, 0x06, 0x4f, 0x6b, 0xb2, 0x41, 0xdf, 0x16, 0x09, 0x92, 0xf5, 0x15, 0xbd,
	0x97, 0x64, 0x7d, 0xa5, 0xde, 0x45, 0xbc, 0xbe, 0x2d, 0x9e, 0x62, 0x31, 0x7d, 0x5b, 0x2c, 0xa7,
	0x49, 0xd4, 0x77, 0xb8, 0x6c, 0xa3, 0x6f, 0x12, 0xaf, 0x6f, 0xa8, 0xe5, 0xef, 0x1c, 0x34, 0x13,
	0xc9, 0x8d, 0x56, 0xc3, 0xf6, 0x90, 0x79, 0xf5, 0x95, 0x90, 0x1a, 0xc7, 0x6b, 0x14, 0xc7, 0x4d,
	0xbc, 0xae, 0xe1, 0x88, 0xcf, 0xfe, 0xff, 0xec, 0xa0, 0x69, 0xad, 0x05, 0x62, 0xbb, 0x9b, 0x58,
	0x1b, 0x32, 0x85, 0x2f, 0xa5, 0x67, 0x00, 0x90, 0xf7, 0x28, 0xc8, 0xaf, 0xe2, 0x2f, 0xeb, 0x20,
	0xa3, 0xb4, 0x8c, 0x82, 0xa4, 0x3d, 0x9d, 0x81, 0x94, 0xac, 0xbd, 0xdb, 0xeb, 0x90, 0x01, 0xee,
	0x47, 0xa5, 0xe2, 0x84, 0xdb, 0xa4, 0x5a, 0xc2, 0x2e, 0x14, 0x87, 0x13, 0x02, 0xb6, 0x25, 0x8a,
	0x6d, 0x1e, 0x5f, 0xd7, 0xbf, 0x0a, 0x67, 0x51, 0xd4, 0x43, 0x08, 0x38, 0x92, 0xef, 0x92, 0xe9,
	0xe4, 0x9b, 0x85, 0xf0, 0x98, 0xbb, 0x24, 0xc8, 0x0f, 0x57, 0x0e, 0x54, 0x2e, 0xed, 0x2b, 0x47,
	0xa9, 0xbd, 0x26, 0xac, 0x1c, 0xb5, 0x82, 0x1a, 0xb3, 0x72, 0xd8, 0x6f, 0xb4, 0x72, 0xa0, 0xe6,
	0x98, 0xb8, 0x72, 0x52, 0xc9, 0x36, 0xaa, 0xb7, 0x31, 0x2b, 0x87, 0xfd, 0xd2, 0xe0, 0xd4, 0x6a,
	0x9d, 0x09, 0xc1, 0x19, 0x5f, 0x79, 0x4d, 0x08, 0x4e, 0x4b, 0x19, 0x35, 0x26, 0x38, 0xd9, 0xaf,
	0x1c, 0x9c, 0xbc, 0x78, 0x6b, 0x06, 0xe7, 0x2f, 0x1d, 0xb9, 0xaa, 0x98, 0x90, 0x38, 0x18, 0x65,
	0xcf, 0x84, 0xc4, 0xc1, 0x2c, 0x5e, 0xba, 0x6b, 0x14, 0xe5, 0x22, 0x5e, 0xd0, 0x51, 0x06, 0xbd,
	0x0e, 0x61, 0x6e, 0xfb, 0x85, 0x83, 0xae, 0x08, 0xce, 0xe4, 0x13, 0x2e, 0x35, 0x9a, 0xd8, 0x52,
	0xaa, 0x35, 0x7e, 0x28, 0x1a, 0x5a, 0x63, 0x90, 0x8a, 0x69, 0x09, 0x36, 0xd1, 0x4b, 0x84, 0x49,
	0x36, 0x31, 0x0a, 0x7d, 0x31, 0x35, 0x06, 0xf1, 0x7f, 0x32, 0x44, 0x8d, 0x41, 0x30, 0x0e, 0x31,
	0x49, 0x5a, 0x30, 0xb1, 0x55, 0xc7, 0x98, 0x43, 0x5f, 0x80, 0xd9, 0xbb, 0xfd, 0xe9, 0xf3, 0x65,
	0xe7, 0xb3, 0xe7, 0xcb, 0xce, 0x7f, 0x9e, 0x2f, 0x3b, 0xbf, 0x7e, 0xb1, 0x7c, 0xe1, 0xb3, 0x17,
	0xcb, 0x17, 0xfe, 0xf9, 0x62, 0xf9, 0xc2, 0xf7, 0xe7, 0x39, 0xf5, 0xd3, 0x88, 0x2f, 0xb4, 0xa1,
	0x5f, 0x1d, 0xa3, 0xff, 0xa9, 0xe4, 0xce, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x2c, 0xad,
	0x3e, 0xa5, 0x34, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetBlockHeight(ctx context.Context, in *QueryBlockHeight, opts ...grpc.CallOption) (*QueryBlockHeightResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries for Addresses.
	Address(ctx context.Context, in *QueryGetAddressRequest, opts ...grpc.CallOption) (*QueryAddressResponse, error)
	AddressAll(ctx context.Context, in *QueryAllAddressRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error)
	AddressAllByPlayer(ctx context.Context, in *QueryAllAddressByPlayerRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error)
	// Queries a list of Allocation items.
	Allocation(ctx context.Context, in *QueryGetAllocationRequest, opts ...grpc.CallOption) (*QueryGetAllocationResponse, error)
	AllocationAll(ctx context.Context, in *QueryAllAllocationRequest, opts ...grpc.CallOption) (*QueryAllAllocationResponse, error)
	// Queries a list of Fleet items.
	Fleet(ctx context.Context, in *QueryGetFleetRequest, opts ...grpc.CallOption) (*QueryGetFleetResponse, error)
	FleetByIndex(ctx context.Context, in *QueryGetFleetByIndexRequest, opts ...grpc.CallOption) (*QueryGetFleetResponse, error)
	FleetAll(ctx context.Context, in *QueryAllFleetRequest, opts ...grpc.CallOption) (*QueryAllFleetResponse, error)
	// Queries a specific Grid details
	Grid(ctx context.Context, in *QueryGetGridRequest, opts ...grpc.CallOption) (*QueryGetGridResponse, error)
	// Queries a list of all Grid details
	GridAll(ctx context.Context, in *QueryAllGridRequest, opts ...grpc.CallOption) (*QueryAllGridResponse, error)
	// Queries a list of Guild items.
	Guild(ctx context.Context, in *QueryGetGuildRequest, opts ...grpc.CallOption) (*QueryGetGuildResponse, error)
	GuildAll(ctx context.Context, in *QueryAllGuildRequest, opts ...grpc.CallOption) (*QueryAllGuildResponse, error)
	GuildMembershipApplication(ctx context.Context, in *QueryGetGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryGetGuildMembershipApplicationResponse, error)
	GuildMembershipApplicationAll(ctx context.Context, in *QueryAllGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryAllGuildMembershipApplicationResponse, error)
	// Queries a list of Infusions.
	Infusion(ctx context.Context, in *QueryGetInfusionRequest, opts ...grpc.CallOption) (*QueryGetInfusionResponse, error)
	InfusionAll(ctx context.Context, in *QueryAllInfusionRequest, opts ...grpc.CallOption) (*QueryAllInfusionResponse, error)
	// Queries a specific Permission
	Permission(ctx context.Context, in *QueryGetPermissionRequest, opts ...grpc.CallOption) (*QueryGetPermissionResponse, error)
	// Queries a list of Permissions based on Object
	PermissionByObject(ctx context.Context, in *QueryAllPermissionByObjectRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a list of Permissions based on the Player with the permissions
	PermissionByPlayer(ctx context.Context, in *QueryAllPermissionByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a list of all Permissions
	PermissionAll(ctx context.Context, in *QueryAllPermissionRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a list of Player items.
	Player(ctx context.Context, in *QueryGetPlayerRequest, opts ...grpc.CallOption) (*QueryGetPlayerResponse, error)
	PlayerAll(ctx context.Context, in *QueryAllPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlayerResponse, error)
	// Queries a list of Planet items.
	Planet(ctx context.Context, in *QueryGetPlanetRequest, opts ...grpc.CallOption) (*QueryGetPlanetResponse, error)
	PlanetAll(ctx context.Context, in *QueryAllPlanetRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error)
	PlanetAllByPlayer(ctx context.Context, in *QueryAllPlanetByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error)
	PlanetAttribute(ctx context.Context, in *QueryGetPlanetAttributeRequest, opts ...grpc.CallOption) (*QueryGetPlanetAttributeResponse, error)
	// Queries a list of Reactor items.
	Reactor(ctx context.Context, in *QueryGetReactorRequest, opts ...grpc.CallOption) (*QueryGetReactorResponse, error)
	ReactorAll(ctx context.Context, in *QueryAllReactorRequest, opts ...grpc.CallOption) (*QueryAllReactorResponse, error)
	// Queries a list of Structs items.
	Struct(ctx context.Context, in *QueryGetStructRequest, opts ...grpc.CallOption) (*QueryGetStructResponse, error)
	StructAll(ctx context.Context, in *QueryAllStructRequest, opts ...grpc.CallOption) (*QueryAllStructResponse, error)
	StructAttribute(ctx context.Context, in *QueryGetStructAttributeRequest, opts ...grpc.CallOption) (*QueryGetStructAttributeResponse, error)
	// Queries a list of Struct Types items.
	StructType(ctx context.Context, in *QueryGetStructTypeRequest, opts ...grpc.CallOption) (*QueryGetStructTypeResponse, error)
	StructTypeAll(ctx context.Context, in *QueryAllStructTypeRequest, opts ...grpc.CallOption) (*QueryAllStructTypeResponse, error)
	// Queries a list of Substation items.
	Substation(ctx context.Context, in *QueryGetSubstationRequest, opts ...grpc.CallOption) (*QueryGetSubstationResponse, error)
	SubstationAll(ctx context.Context, in *QueryAllSubstationRequest, opts ...grpc.CallOption) (*QueryAllSubstationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetBlockHeight(ctx context.Context, in *QueryBlockHeight, opts ...grpc.CallOption) (*QueryBlockHeightResponse, error) {
	out := new(QueryBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/GetBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Address(ctx context.Context, in *QueryGetAddressRequest, opts ...grpc.CallOption) (*QueryAddressResponse, error) {
	out := new(QueryAddressResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressAll(ctx context.Context, in *QueryAllAddressRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error) {
	out := new(QueryAllAddressResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/AddressAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressAllByPlayer(ctx context.Context, in *QueryAllAddressByPlayerRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error) {
	out := new(QueryAllAddressResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/AddressAllByPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Allocation(ctx context.Context, in *QueryGetAllocationRequest, opts ...grpc.CallOption) (*QueryGetAllocationResponse, error) {
	out := new(QueryGetAllocationResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Allocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllocationAll(ctx context.Context, in *QueryAllAllocationRequest, opts ...grpc.CallOption) (*QueryAllAllocationResponse, error) {
	out := new(QueryAllAllocationResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/AllocationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fleet(ctx context.Context, in *QueryGetFleetRequest, opts ...grpc.CallOption) (*QueryGetFleetResponse, error) {
	out := new(QueryGetFleetResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Fleet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FleetByIndex(ctx context.Context, in *QueryGetFleetByIndexRequest, opts ...grpc.CallOption) (*QueryGetFleetResponse, error) {
	out := new(QueryGetFleetResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/FleetByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FleetAll(ctx context.Context, in *QueryAllFleetRequest, opts ...grpc.CallOption) (*QueryAllFleetResponse, error) {
	out := new(QueryAllFleetResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/FleetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Grid(ctx context.Context, in *QueryGetGridRequest, opts ...grpc.CallOption) (*QueryGetGridResponse, error) {
	out := new(QueryGetGridResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Grid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridAll(ctx context.Context, in *QueryAllGridRequest, opts ...grpc.CallOption) (*QueryAllGridResponse, error) {
	out := new(QueryAllGridResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/GridAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Guild(ctx context.Context, in *QueryGetGuildRequest, opts ...grpc.CallOption) (*QueryGetGuildResponse, error) {
	out := new(QueryGetGuildResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Guild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuildAll(ctx context.Context, in *QueryAllGuildRequest, opts ...grpc.CallOption) (*QueryAllGuildResponse, error) {
	out := new(QueryAllGuildResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/GuildAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuildMembershipApplication(ctx context.Context, in *QueryGetGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryGetGuildMembershipApplicationResponse, error) {
	out := new(QueryGetGuildMembershipApplicationResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/GuildMembershipApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuildMembershipApplicationAll(ctx context.Context, in *QueryAllGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryAllGuildMembershipApplicationResponse, error) {
	out := new(QueryAllGuildMembershipApplicationResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/GuildMembershipApplicationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Infusion(ctx context.Context, in *QueryGetInfusionRequest, opts ...grpc.CallOption) (*QueryGetInfusionResponse, error) {
	out := new(QueryGetInfusionResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Infusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InfusionAll(ctx context.Context, in *QueryAllInfusionRequest, opts ...grpc.CallOption) (*QueryAllInfusionResponse, error) {
	out := new(QueryAllInfusionResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/InfusionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Permission(ctx context.Context, in *QueryGetPermissionRequest, opts ...grpc.CallOption) (*QueryGetPermissionResponse, error) {
	out := new(QueryGetPermissionResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Permission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionByObject(ctx context.Context, in *QueryAllPermissionByObjectRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PermissionByObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionByPlayer(ctx context.Context, in *QueryAllPermissionByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PermissionByPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionAll(ctx context.Context, in *QueryAllPermissionRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PermissionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Player(ctx context.Context, in *QueryGetPlayerRequest, opts ...grpc.CallOption) (*QueryGetPlayerResponse, error) {
	out := new(QueryGetPlayerResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Player", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlayerAll(ctx context.Context, in *QueryAllPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlayerResponse, error) {
	out := new(QueryAllPlayerResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PlayerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Planet(ctx context.Context, in *QueryGetPlanetRequest, opts ...grpc.CallOption) (*QueryGetPlanetResponse, error) {
	out := new(QueryGetPlanetResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Planet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlanetAll(ctx context.Context, in *QueryAllPlanetRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error) {
	out := new(QueryAllPlanetResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PlanetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlanetAllByPlayer(ctx context.Context, in *QueryAllPlanetByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error) {
	out := new(QueryAllPlanetResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PlanetAllByPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlanetAttribute(ctx context.Context, in *QueryGetPlanetAttributeRequest, opts ...grpc.CallOption) (*QueryGetPlanetAttributeResponse, error) {
	out := new(QueryGetPlanetAttributeResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/PlanetAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reactor(ctx context.Context, in *QueryGetReactorRequest, opts ...grpc.CallOption) (*QueryGetReactorResponse, error) {
	out := new(QueryGetReactorResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Reactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReactorAll(ctx context.Context, in *QueryAllReactorRequest, opts ...grpc.CallOption) (*QueryAllReactorResponse, error) {
	out := new(QueryAllReactorResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/ReactorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Struct(ctx context.Context, in *QueryGetStructRequest, opts ...grpc.CallOption) (*QueryGetStructResponse, error) {
	out := new(QueryGetStructResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Struct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructAll(ctx context.Context, in *QueryAllStructRequest, opts ...grpc.CallOption) (*QueryAllStructResponse, error) {
	out := new(QueryAllStructResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/StructAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructAttribute(ctx context.Context, in *QueryGetStructAttributeRequest, opts ...grpc.CallOption) (*QueryGetStructAttributeResponse, error) {
	out := new(QueryGetStructAttributeResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/StructAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructType(ctx context.Context, in *QueryGetStructTypeRequest, opts ...grpc.CallOption) (*QueryGetStructTypeResponse, error) {
	out := new(QueryGetStructTypeResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/StructType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructTypeAll(ctx context.Context, in *QueryAllStructTypeRequest, opts ...grpc.CallOption) (*QueryAllStructTypeResponse, error) {
	out := new(QueryAllStructTypeResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/StructTypeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Substation(ctx context.Context, in *QueryGetSubstationRequest, opts ...grpc.CallOption) (*QueryGetSubstationResponse, error) {
	out := new(QueryGetSubstationResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/Substation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubstationAll(ctx context.Context, in *QueryAllSubstationRequest, opts ...grpc.CallOption) (*QueryAllSubstationResponse, error) {
	out := new(QueryAllSubstationResponse)
	err := c.cc.Invoke(ctx, "/structs.structs.Query/SubstationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetBlockHeight(context.Context, *QueryBlockHeight) (*QueryBlockHeightResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries for Addresses.
	Address(context.Context, *QueryGetAddressRequest) (*QueryAddressResponse, error)
	AddressAll(context.Context, *QueryAllAddressRequest) (*QueryAllAddressResponse, error)
	AddressAllByPlayer(context.Context, *QueryAllAddressByPlayerRequest) (*QueryAllAddressResponse, error)
	// Queries a list of Allocation items.
	Allocation(context.Context, *QueryGetAllocationRequest) (*QueryGetAllocationResponse, error)
	AllocationAll(context.Context, *QueryAllAllocationRequest) (*QueryAllAllocationResponse, error)
	// Queries a list of Fleet items.
	Fleet(context.Context, *QueryGetFleetRequest) (*QueryGetFleetResponse, error)
	FleetByIndex(context.Context, *QueryGetFleetByIndexRequest) (*QueryGetFleetResponse, error)
	FleetAll(context.Context, *QueryAllFleetRequest) (*QueryAllFleetResponse, error)
	// Queries a specific Grid details
	Grid(context.Context, *QueryGetGridRequest) (*QueryGetGridResponse, error)
	// Queries a list of all Grid details
	GridAll(context.Context, *QueryAllGridRequest) (*QueryAllGridResponse, error)
	// Queries a list of Guild items.
	Guild(context.Context, *QueryGetGuildRequest) (*QueryGetGuildResponse, error)
	GuildAll(context.Context, *QueryAllGuildRequest) (*QueryAllGuildResponse, error)
	GuildMembershipApplication(context.Context, *QueryGetGuildMembershipApplicationRequest) (*QueryGetGuildMembershipApplicationResponse, error)
	GuildMembershipApplicationAll(context.Context, *QueryAllGuildMembershipApplicationRequest) (*QueryAllGuildMembershipApplicationResponse, error)
	// Queries a list of Infusions.
	Infusion(context.Context, *QueryGetInfusionRequest) (*QueryGetInfusionResponse, error)
	InfusionAll(context.Context, *QueryAllInfusionRequest) (*QueryAllInfusionResponse, error)
	// Queries a specific Permission
	Permission(context.Context, *QueryGetPermissionRequest) (*QueryGetPermissionResponse, error)
	// Queries a list of Permissions based on Object
	PermissionByObject(context.Context, *QueryAllPermissionByObjectRequest) (*QueryAllPermissionResponse, error)
	// Queries a list of Permissions based on the Player with the permissions
	PermissionByPlayer(context.Context, *QueryAllPermissionByPlayerRequest) (*QueryAllPermissionResponse, error)
	// Queries a list of all Permissions
	PermissionAll(context.Context, *QueryAllPermissionRequest) (*QueryAllPermissionResponse, error)
	// Queries a list of Player items.
	Player(context.Context, *QueryGetPlayerRequest) (*QueryGetPlayerResponse, error)
	PlayerAll(context.Context, *QueryAllPlayerRequest) (*QueryAllPlayerResponse, error)
	// Queries a list of Planet items.
	Planet(context.Context, *QueryGetPlanetRequest) (*QueryGetPlanetResponse, error)
	PlanetAll(context.Context, *QueryAllPlanetRequest) (*QueryAllPlanetResponse, error)
	PlanetAllByPlayer(context.Context, *QueryAllPlanetByPlayerRequest) (*QueryAllPlanetResponse, error)
	PlanetAttribute(context.Context, *QueryGetPlanetAttributeRequest) (*QueryGetPlanetAttributeResponse, error)
	// Queries a list of Reactor items.
	Reactor(context.Context, *QueryGetReactorRequest) (*QueryGetReactorResponse, error)
	ReactorAll(context.Context, *QueryAllReactorRequest) (*QueryAllReactorResponse, error)
	// Queries a list of Structs items.
	Struct(context.Context, *QueryGetStructRequest) (*QueryGetStructResponse, error)
	StructAll(context.Context, *QueryAllStructRequest) (*QueryAllStructResponse, error)
	StructAttribute(context.Context, *QueryGetStructAttributeRequest) (*QueryGetStructAttributeResponse, error)
	// Queries a list of Struct Types items.
	StructType(context.Context, *QueryGetStructTypeRequest) (*QueryGetStructTypeResponse, error)
	StructTypeAll(context.Context, *QueryAllStructTypeRequest) (*QueryAllStructTypeResponse, error)
	// Queries a list of Substation items.
	Substation(context.Context, *QueryGetSubstationRequest) (*QueryGetSubstationResponse, error)
	SubstationAll(context.Context, *QueryAllSubstationRequest) (*QueryAllSubstationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetBlockHeight(ctx context.Context, req *QueryBlockHeight) (*QueryBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeight not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Address(ctx context.Context, req *QueryGetAddressRequest) (*QueryAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (*UnimplementedQueryServer) AddressAll(ctx context.Context, req *QueryAllAddressRequest) (*QueryAllAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressAll not implemented")
}
func (*UnimplementedQueryServer) AddressAllByPlayer(ctx context.Context, req *QueryAllAddressByPlayerRequest) (*QueryAllAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressAllByPlayer not implemented")
}
func (*UnimplementedQueryServer) Allocation(ctx context.Context, req *QueryGetAllocationRequest) (*QueryGetAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocation not implemented")
}
func (*UnimplementedQueryServer) AllocationAll(ctx context.Context, req *QueryAllAllocationRequest) (*QueryAllAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationAll not implemented")
}
func (*UnimplementedQueryServer) Fleet(ctx context.Context, req *QueryGetFleetRequest) (*QueryGetFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fleet not implemented")
}
func (*UnimplementedQueryServer) FleetByIndex(ctx context.Context, req *QueryGetFleetByIndexRequest) (*QueryGetFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FleetByIndex not implemented")
}
func (*UnimplementedQueryServer) FleetAll(ctx context.Context, req *QueryAllFleetRequest) (*QueryAllFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FleetAll not implemented")
}
func (*UnimplementedQueryServer) Grid(ctx context.Context, req *QueryGetGridRequest) (*QueryGetGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grid not implemented")
}
func (*UnimplementedQueryServer) GridAll(ctx context.Context, req *QueryAllGridRequest) (*QueryAllGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridAll not implemented")
}
func (*UnimplementedQueryServer) Guild(ctx context.Context, req *QueryGetGuildRequest) (*QueryGetGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guild not implemented")
}
func (*UnimplementedQueryServer) GuildAll(ctx context.Context, req *QueryAllGuildRequest) (*QueryAllGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildAll not implemented")
}
func (*UnimplementedQueryServer) GuildMembershipApplication(ctx context.Context, req *QueryGetGuildMembershipApplicationRequest) (*QueryGetGuildMembershipApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipApplication not implemented")
}
func (*UnimplementedQueryServer) GuildMembershipApplicationAll(ctx context.Context, req *QueryAllGuildMembershipApplicationRequest) (*QueryAllGuildMembershipApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipApplicationAll not implemented")
}
func (*UnimplementedQueryServer) Infusion(ctx context.Context, req *QueryGetInfusionRequest) (*QueryGetInfusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infusion not implemented")
}
func (*UnimplementedQueryServer) InfusionAll(ctx context.Context, req *QueryAllInfusionRequest) (*QueryAllInfusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfusionAll not implemented")
}
func (*UnimplementedQueryServer) Permission(ctx context.Context, req *QueryGetPermissionRequest) (*QueryGetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permission not implemented")
}
func (*UnimplementedQueryServer) PermissionByObject(ctx context.Context, req *QueryAllPermissionByObjectRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionByObject not implemented")
}
func (*UnimplementedQueryServer) PermissionByPlayer(ctx context.Context, req *QueryAllPermissionByPlayerRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionByPlayer not implemented")
}
func (*UnimplementedQueryServer) PermissionAll(ctx context.Context, req *QueryAllPermissionRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionAll not implemented")
}
func (*UnimplementedQueryServer) Player(ctx context.Context, req *QueryGetPlayerRequest) (*QueryGetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Player not implemented")
}
func (*UnimplementedQueryServer) PlayerAll(ctx context.Context, req *QueryAllPlayerRequest) (*QueryAllPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerAll not implemented")
}
func (*UnimplementedQueryServer) Planet(ctx context.Context, req *QueryGetPlanetRequest) (*QueryGetPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Planet not implemented")
}
func (*UnimplementedQueryServer) PlanetAll(ctx context.Context, req *QueryAllPlanetRequest) (*QueryAllPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetAll not implemented")
}
func (*UnimplementedQueryServer) PlanetAllByPlayer(ctx context.Context, req *QueryAllPlanetByPlayerRequest) (*QueryAllPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetAllByPlayer not implemented")
}
func (*UnimplementedQueryServer) PlanetAttribute(ctx context.Context, req *QueryGetPlanetAttributeRequest) (*QueryGetPlanetAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetAttribute not implemented")
}
func (*UnimplementedQueryServer) Reactor(ctx context.Context, req *QueryGetReactorRequest) (*QueryGetReactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reactor not implemented")
}
func (*UnimplementedQueryServer) ReactorAll(ctx context.Context, req *QueryAllReactorRequest) (*QueryAllReactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactorAll not implemented")
}
func (*UnimplementedQueryServer) Struct(ctx context.Context, req *QueryGetStructRequest) (*QueryGetStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Struct not implemented")
}
func (*UnimplementedQueryServer) StructAll(ctx context.Context, req *QueryAllStructRequest) (*QueryAllStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructAll not implemented")
}
func (*UnimplementedQueryServer) StructAttribute(ctx context.Context, req *QueryGetStructAttributeRequest) (*QueryGetStructAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructAttribute not implemented")
}
func (*UnimplementedQueryServer) StructType(ctx context.Context, req *QueryGetStructTypeRequest) (*QueryGetStructTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructType not implemented")
}
func (*UnimplementedQueryServer) StructTypeAll(ctx context.Context, req *QueryAllStructTypeRequest) (*QueryAllStructTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructTypeAll not implemented")
}
func (*UnimplementedQueryServer) Substation(ctx context.Context, req *QueryGetSubstationRequest) (*QueryGetSubstationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Substation not implemented")
}
func (*UnimplementedQueryServer) SubstationAll(ctx context.Context, req *QueryAllSubstationRequest) (*QueryAllSubstationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/GetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBlockHeight(ctx, req.(*QueryBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Address(ctx, req.(*QueryGetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/AddressAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressAll(ctx, req.(*QueryAllAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressAllByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressAllByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/AddressAllByPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressAllByPlayer(ctx, req.(*QueryAllAddressByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Allocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Allocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Allocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Allocation(ctx, req.(*QueryGetAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllocationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllocationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/AllocationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllocationAll(ctx, req.(*QueryAllAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Fleet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fleet(ctx, req.(*QueryGetFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FleetByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFleetByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FleetByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/FleetByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FleetByIndex(ctx, req.(*QueryGetFleetByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FleetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FleetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/FleetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FleetAll(ctx, req.(*QueryAllFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Grid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Grid(ctx, req.(*QueryGetGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/GridAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridAll(ctx, req.(*QueryAllGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Guild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Guild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Guild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Guild(ctx, req.(*QueryGetGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuildAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuildAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/GuildAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuildAll(ctx, req.(*QueryAllGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuildMembershipApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuildMembershipApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuildMembershipApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/GuildMembershipApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuildMembershipApplication(ctx, req.(*QueryGetGuildMembershipApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuildMembershipApplicationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuildMembershipApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuildMembershipApplicationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/GuildMembershipApplicationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuildMembershipApplicationAll(ctx, req.(*QueryAllGuildMembershipApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Infusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInfusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Infusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Infusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Infusion(ctx, req.(*QueryGetInfusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InfusionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInfusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InfusionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/InfusionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InfusionAll(ctx, req.(*QueryAllInfusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Permission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Permission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Permission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Permission(ctx, req.(*QueryGetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionByObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionByObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionByObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PermissionByObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionByObject(ctx, req.(*QueryAllPermissionByObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PermissionByPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionByPlayer(ctx, req.(*QueryAllPermissionByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PermissionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionAll(ctx, req.(*QueryAllPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Player_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Player(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Player",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Player(ctx, req.(*QueryGetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlayerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlayerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PlayerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlayerAll(ctx, req.(*QueryAllPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Planet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Planet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Planet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Planet(ctx, req.(*QueryGetPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlanetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlanetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PlanetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlanetAll(ctx, req.(*QueryAllPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlanetAllByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlanetByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlanetAllByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PlanetAllByPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlanetAllByPlayer(ctx, req.(*QueryAllPlanetByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlanetAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlanetAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlanetAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/PlanetAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlanetAttribute(ctx, req.(*QueryGetPlanetAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Reactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reactor(ctx, req.(*QueryGetReactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReactorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReactorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/ReactorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReactorAll(ctx, req.(*QueryAllReactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Struct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Struct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Struct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Struct(ctx, req.(*QueryGetStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/StructAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructAll(ctx, req.(*QueryAllStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStructAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/StructAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructAttribute(ctx, req.(*QueryGetStructAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStructTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/StructType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructType(ctx, req.(*QueryGetStructTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructTypeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStructTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructTypeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/StructTypeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructTypeAll(ctx, req.(*QueryAllStructTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Substation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubstationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Substation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/Substation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Substation(ctx, req.(*QueryGetSubstationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubstationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSubstationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubstationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.structs.Query/SubstationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubstationAll(ctx, req.(*QueryAllSubstationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "structs.structs.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockHeight",
			Handler:    _Query_GetBlockHeight_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _Query_Address_Handler,
		},
		{
			MethodName: "AddressAll",
			Handler:    _Query_AddressAll_Handler,
		},
		{
			MethodName: "AddressAllByPlayer",
			Handler:    _Query_AddressAllByPlayer_Handler,
		},
		{
			MethodName: "Allocation",
			Handler:    _Query_Allocation_Handler,
		},
		{
			MethodName: "AllocationAll",
			Handler:    _Query_AllocationAll_Handler,
		},
		{
			MethodName: "Fleet",
			Handler:    _Query_Fleet_Handler,
		},
		{
			MethodName: "FleetByIndex",
			Handler:    _Query_FleetByIndex_Handler,
		},
		{
			MethodName: "FleetAll",
			Handler:    _Query_FleetAll_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _Query_Grid_Handler,
		},
		{
			MethodName: "GridAll",
			Handler:    _Query_GridAll_Handler,
		},
		{
			MethodName: "Guild",
			Handler:    _Query_Guild_Handler,
		},
		{
			MethodName: "GuildAll",
			Handler:    _Query_GuildAll_Handler,
		},
		{
			MethodName: "GuildMembershipApplication",
			Handler:    _Query_GuildMembershipApplication_Handler,
		},
		{
			MethodName: "GuildMembershipApplicationAll",
			Handler:    _Query_GuildMembershipApplicationAll_Handler,
		},
		{
			MethodName: "Infusion",
			Handler:    _Query_Infusion_Handler,
		},
		{
			MethodName: "InfusionAll",
			Handler:    _Query_InfusionAll_Handler,
		},
		{
			MethodName: "Permission",
			Handler:    _Query_Permission_Handler,
		},
		{
			MethodName: "PermissionByObject",
			Handler:    _Query_PermissionByObject_Handler,
		},
		{
			MethodName: "PermissionByPlayer",
			Handler:    _Query_PermissionByPlayer_Handler,
		},
		{
			MethodName: "PermissionAll",
			Handler:    _Query_PermissionAll_Handler,
		},
		{
			MethodName: "Player",
			Handler:    _Query_Player_Handler,
		},
		{
			MethodName: "PlayerAll",
			Handler:    _Query_PlayerAll_Handler,
		},
		{
			MethodName: "Planet",
			Handler:    _Query_Planet_Handler,
		},
		{
			MethodName: "PlanetAll",
			Handler:    _Query_PlanetAll_Handler,
		},
		{
			MethodName: "PlanetAllByPlayer",
			Handler:    _Query_PlanetAllByPlayer_Handler,
		},
		{
			MethodName: "PlanetAttribute",
			Handler:    _Query_PlanetAttribute_Handler,
		},
		{
			MethodName: "Reactor",
			Handler:    _Query_Reactor_Handler,
		},
		{
			MethodName: "ReactorAll",
			Handler:    _Query_ReactorAll_Handler,
		},
		{
			MethodName: "Struct",
			Handler:    _Query_Struct_Handler,
		},
		{
			MethodName: "StructAll",
			Handler:    _Query_StructAll_Handler,
		},
		{
			MethodName: "StructAttribute",
			Handler:    _Query_StructAttribute_Handler,
		},
		{
			MethodName: "StructType",
			Handler:    _Query_StructType_Handler,
		},
		{
			MethodName: "StructTypeAll",
			Handler:    _Query_StructTypeAll_Handler,
		},
		{
			MethodName: "Substation",
			Handler:    _Query_Substation_Handler,
		},
		{
			MethodName: "SubstationAll",
			Handler:    _Query_SubstationAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structs/structs/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressByPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressByPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressByPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Permissions))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Address[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GridAttributes != nil {
		{
			size, err := m.GridAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Allocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAllocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllocationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllocationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAllocationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAllocationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAllocationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA9 := make([]byte, len(m.Status)*10)
		var j8 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintQuery(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Allocation) > 0 {
		for iNdEx := len(m.Allocation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Allocation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetFleetByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFleetByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFleetByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFleetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFleetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFleetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFleetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFleetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFleetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Fleet) > 0 {
		for iNdEx := len(m.Fleet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fleet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGridRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGridRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGridRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttributeId) > 0 {
		i -= len(m.AttributeId)
		copy(dAtA[i:], m.AttributeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AttributeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGridRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGridRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGridRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGridResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGridResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGridResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GridRecord != nil {
		{
			size, err := m.GridRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGridResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGridResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGridResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GridRecords) > 0 {
		for iNdEx := len(m.GridRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GridRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Guild.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGuildRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuildRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuildRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGuildResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuildResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuildResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Guild) > 0 {
		for iNdEx := len(m.Guild) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Guild[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuildMembershipApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuildMembershipApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuildMembershipApplicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GuildId) > 0 {
		i -= len(m.GuildId)
		copy(dAtA[i:], m.GuildId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GuildId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGuildMembershipApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGuildMembershipApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGuildMembershipApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GuildMembershipApplication.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGuildMembershipApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuildMembershipApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuildMembershipApplicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGuildMembershipApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGuildMembershipApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGuildMembershipApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GuildMembershipApplication) > 0 {
		for iNdEx := len(m.GuildMembershipApplication) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GuildMembershipApplication[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInfusionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInfusionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInfusionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestinationId) > 0 {
		i -= len(m.DestinationId)
		copy(dAtA[i:], m.DestinationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInfusionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInfusionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInfusionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Infusion.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllInfusionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInfusionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInfusionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInfusionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInfusionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInfusionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		dAtA26 := make([]byte, len(m.Status)*10)
		var j25 int
		for _, num := range m.Status {
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		i -= j25
		copy(dAtA[i:], dAtA26[:j25])
		i = encodeVarintQuery(dAtA, i, uint64(j25))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Infusion) > 0 {
		for iNdEx := len(m.Infusion) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infusion[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PermissionId) > 0 {
		i -= len(m.PermissionId)
		copy(dAtA[i:], m.PermissionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PermissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPermissionByObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPermissionByObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPermissionByObjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPermissionByPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPermissionByPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPermissionByPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PermissionRecord != nil {
		{
			size, err := m.PermissionRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PermissionRecords) > 0 {
		for iNdEx := len(m.PermissionRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermissionRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlanetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlanetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlanetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlanetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlanetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlanetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetAttributes != nil {
		{
			size, err := m.PlanetAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GridAttributes != nil {
		{
			size, err := m.GridAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPlanetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlanetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlanetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlanetByPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlanetByPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlanetByPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlanetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlanetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlanetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Planet) > 0 {
		for iNdEx := len(m.Planet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Planet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlanetAttributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlanetAttributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlanetAttributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttributeType) > 0 {
		i -= len(m.AttributeType)
		copy(dAtA[i:], m.AttributeType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AttributeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlanetId) > 0 {
		i -= len(m.PlanetId)
		copy(dAtA[i:], m.PlanetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlanetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlanetAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlanetAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlanetAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attribute != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlayerInventory != nil {
		{
			size, err := m.PlayerInventory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GridAttributes != nil {
		{
			size, err := m.GridAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPlayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Player) > 0 {
		for iNdEx := len(m.Player) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Player[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReactorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReactorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReactorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReactorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReactorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReactorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GridAttributes != nil {
		{
			size, err := m.GridAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Reactor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReactorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReactorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReactorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReactorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReactorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReactorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reactor) > 0 {
		for iNdEx := len(m.Reactor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStructRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStructRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStructRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStructResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStructResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStructResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StructDefenders) > 0 {
		for iNdEx := len(m.StructDefenders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StructDefenders[iNdEx])
			copy(dAtA[i:], m.StructDefenders[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.StructDefenders[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GridAttributes != nil {
		{
			size, err := m.GridAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StructAttributes != nil {
		{
			size, err := m.StructAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Struct.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStructRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStructRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStructRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStructResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStructResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStructResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Struct) > 0 {
		for iNdEx := len(m.Struct) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Struct[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStructAttributeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStructAttributeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStructAttributeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttributeType) > 0 {
		i -= len(m.AttributeType)
		copy(dAtA[i:], m.AttributeType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AttributeType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StructId) > 0 {
		i -= len(m.StructId)
		copy(dAtA[i:], m.StructId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StructId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStructAttributeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStructAttributeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStructAttributeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attribute != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Attribute))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStructTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStructTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStructTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStructTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStructTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStructTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StructType.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStructTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStructTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStructTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStructTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStructTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStructTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StructType) > 0 {
		for iNdEx := len(m.StructType) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StructType[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubstationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubstationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubstationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubstationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubstationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubstationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GridAttributes != nil {
		{
			size, err := m.GridAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Substation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSubstationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSubstationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSubstationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSubstationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSubstationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSubstationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Substation) > 0 {
		for iNdEx := len(m.Substation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Substation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBlockHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryGetAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressByPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Permissions != 0 {
		n += 1 + sovQuery(uint64(m.Permissions))
	}
	return n
}

func (m *QueryAllAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, e := range m.Address {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allocation.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.GridAttributes != nil {
		l = m.GridAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllocationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAllocationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Allocation) > 0 {
		for _, e := range m.Allocation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryGetFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Fleet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetFleetByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryAllFleetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFleetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fleet) > 0 {
		for _, e := range m.Fleet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGridRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttributeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGridRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGridResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GridRecord != nil {
		l = m.GridRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGridResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GridRecords) > 0 {
		for _, e := range m.GridRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Guild.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGuildRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGuildResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Guild) > 0 {
		for _, e := range m.Guild {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuildMembershipApplicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GuildId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGuildMembershipApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GuildMembershipApplication.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGuildMembershipApplicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGuildMembershipApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuildMembershipApplication) > 0 {
		for _, e := range m.GuildMembershipApplication {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInfusionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInfusionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Infusion.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllInfusionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInfusionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infusion) > 0 {
		for _, e := range m.Infusion {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryGetPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PermissionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPermissionByObjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPermissionByPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermissionRecord != nil {
		l = m.PermissionRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PermissionRecords) > 0 {
		for _, e := range m.PermissionRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlanetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlanetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Planet.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.GridAttributes != nil {
		l = m.GridAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PlanetAttributes != nil {
		l = m.PlanetAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlanetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlanetByPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlanetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Planet) > 0 {
		for _, e := range m.Planet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlanetAttributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlanetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AttributeType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlanetAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attribute != 0 {
		n += 1 + sovQuery(uint64(m.Attribute))
	}
	return n
}

func (m *QueryGetPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Player.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.GridAttributes != nil {
		l = m.GridAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PlayerInventory != nil {
		l = m.PlayerInventory.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Player) > 0 {
		for _, e := range m.Player {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReactorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReactorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reactor.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.GridAttributes != nil {
		l = m.GridAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReactorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReactorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reactor) > 0 {
		for _, e := range m.Reactor {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStructRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStructResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Struct.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.StructAttributes != nil {
		l = m.StructAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GridAttributes != nil {
		l = m.GridAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.StructDefenders) > 0 {
		for _, s := range m.StructDefenders {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllStructRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStructResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Struct) > 0 {
		for _, e := range m.Struct {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStructAttributeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StructId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AttributeType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStructAttributeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attribute != 0 {
		n += 1 + sovQuery(uint64(m.Attribute))
	}
	return n
}

func (m *QueryGetStructTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetStructTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StructType.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStructTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStructTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StructType) > 0 {
		for _, e := range m.StructType {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubstationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubstationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Substation.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.GridAttributes != nil {
		l = m.GridAttributes.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSubstationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSubstationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Substation) > 0 {
		for _, e := range m.Substation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressByPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressByPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressByPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			m.Permissions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permissions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, &QueryAddressResponse{})
			if err := m.Address[len(m.Address)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridAttributes == nil {
				m.GridAttributes = &GridAttributes{}
			}
			if err := m.GridAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAllocationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAllocationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAllocationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocation = append(m.Allocation, Allocation{})
			if err := m.Allocation[len(m.Allocation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFleetByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFleetByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFleetByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFleetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFleetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFleetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFleetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFleetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFleetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fleet = append(m.Fleet, Fleet{})
			if err := m.Fleet[len(m.Fleet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGridRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGridRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGridRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGridRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGridRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGridRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGridResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGridResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGridResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridRecord == nil {
				m.GridRecord = &GridRecord{}
			}
			if err := m.GridRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGridResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGridResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGridResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GridRecords = append(m.GridRecords, &GridRecord{})
			if err := m.GridRecords[len(m.GridRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuildRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuildRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuildRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuildResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuildResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuildResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guild = append(m.Guild, Guild{})
			if err := m.Guild[len(m.Guild)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuildMembershipApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuildMembershipApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuildMembershipApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGuildMembershipApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGuildMembershipApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGuildMembershipApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMembershipApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GuildMembershipApplication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuildMembershipApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuildMembershipApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuildMembershipApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGuildMembershipApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGuildMembershipApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGuildMembershipApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMembershipApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildMembershipApplication = append(m.GuildMembershipApplication, GuildMembershipApplication{})
			if err := m.GuildMembershipApplication[len(m.GuildMembershipApplication)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInfusionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInfusionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInfusionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInfusionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInfusionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInfusionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infusion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Infusion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInfusionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInfusionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInfusionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInfusionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInfusionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInfusionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infusion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infusion = append(m.Infusion, Infusion{})
			if err := m.Infusion[len(m.Infusion)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPermissionByObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPermissionByObjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPermissionByObjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPermissionByPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPermissionByPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPermissionByPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PermissionRecord == nil {
				m.PermissionRecord = &PermissionRecord{}
			}
			if err := m.PermissionRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionRecords = append(m.PermissionRecords, &PermissionRecord{})
			if err := m.PermissionRecords[len(m.PermissionRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlanetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlanetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlanetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlanetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlanetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlanetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridAttributes == nil {
				m.GridAttributes = &GridAttributes{}
			}
			if err := m.GridAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanetAttributes == nil {
				m.PlanetAttributes = &PlanetAttributes{}
			}
			if err := m.PlanetAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlanetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlanetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlanetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlanetByPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlanetByPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlanetByPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlanetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlanetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlanetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Planet = append(m.Planet, Planet{})
			if err := m.Planet[len(m.Planet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlanetAttributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlanetAttributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlanetAttributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlanetAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlanetAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlanetAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridAttributes == nil {
				m.GridAttributes = &GridAttributes{}
			}
			if err := m.GridAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInventory == nil {
				m.PlayerInventory = &PlayerInventory{}
			}
			if err := m.PlayerInventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = append(m.Player, Player{})
			if err := m.Player[len(m.Player)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReactorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReactorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReactorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReactorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReactorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReactorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridAttributes == nil {
				m.GridAttributes = &GridAttributes{}
			}
			if err := m.GridAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReactorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReactorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReactorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReactorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReactorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReactorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactor = append(m.Reactor, Reactor{})
			if err := m.Reactor[len(m.Reactor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStructRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStructRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStructRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStructResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStructResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStructResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Struct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Struct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StructAttributes == nil {
				m.StructAttributes = &StructAttributes{}
			}
			if err := m.StructAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridAttributes == nil {
				m.GridAttributes = &GridAttributes{}
			}
			if err := m.GridAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructDefenders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StructDefenders = append(m.StructDefenders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStructRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStructRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStructRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStructResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStructResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStructResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Struct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Struct = append(m.Struct, Struct{})
			if err := m.Struct[len(m.Struct)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStructAttributeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStructAttributeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStructAttributeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StructId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStructAttributeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStructAttributeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStructAttributeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStructTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStructTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStructTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStructTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStructTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStructTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StructType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStructTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStructTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStructTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStructTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStructTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStructTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StructType = append(m.StructType, StructType{})
			if err := m.StructType[len(m.StructType)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubstationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubstationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubstationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubstationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubstationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubstationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Substation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Substation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridAttributes == nil {
				m.GridAttributes = &GridAttributes{}
			}
			if err := m.GridAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSubstationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSubstationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSubstationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSubstationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSubstationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSubstationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Substation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Substation = append(m.Substation, Substation{})
			if err := m.Substation[len(m.Substation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
