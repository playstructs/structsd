// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/agreement.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Agreement struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProviderId string `protobuf:"bytes,2,opt,name=providerId,proto3" json:"providerId,omitempty"`
	Capacity   uint64 `protobuf:"varint,3,opt,name=capacity,proto3" json:"capacity,omitempty"`
	StartBlock uint64 `protobuf:"varint,4,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	Endblock   uint64 `protobuf:"varint,5,opt,name=endblock,proto3" json:"endblock,omitempty"`
}

func (m *Agreement) Reset()         { *m = Agreement{} }
func (m *Agreement) String() string { return proto.CompactTextString(m) }
func (*Agreement) ProtoMessage()    {}
func (*Agreement) Descriptor() ([]byte, []int) {
	return fileDescriptor_7fda446516154598, []int{0}
}
func (m *Agreement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agreement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agreement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agreement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agreement.Merge(m, src)
}
func (m *Agreement) XXX_Size() int {
	return m.Size()
}
func (m *Agreement) XXX_DiscardUnknown() {
	xxx_messageInfo_Agreement.DiscardUnknown(m)
}

var xxx_messageInfo_Agreement proto.InternalMessageInfo

func (m *Agreement) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Agreement) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *Agreement) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Agreement) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Agreement) GetEndblock() uint64 {
	if m != nil {
		return m.Endblock
	}
	return 0
}

func init() {
	proto.RegisterType((*Agreement)(nil), "structs.structs.Agreement")
}

func init() { proto.RegisterFile("structs/structs/agreement.proto", fileDescriptor_7fda446516154598) }

var fileDescriptor_7fda446516154598 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0x29, 0xd6, 0x87, 0xd1, 0x89, 0xe9, 0x45, 0xa9, 0xa9, 0xb9, 0xa9, 0x79, 0x25, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xfc, 0x50, 0x09, 0x3d, 0x28, 0x2d, 0x25, 0x99, 0x9c, 0x5f,
	0x9c, 0x9b, 0x5f, 0x1c, 0x0f, 0x96, 0xd6, 0x87, 0x70, 0x20, 0x6a, 0xa5, 0x44, 0xd2, 0xf3, 0xd3,
	0xf3, 0x21, 0xe2, 0x20, 0x16, 0x54, 0x54, 0x0e, 0xa2, 0x46, 0x3f, 0x29, 0xb1, 0x38, 0x55, 0xbf,
	0xcc, 0x30, 0x29, 0xb5, 0x24, 0xd1, 0x50, 0x3f, 0x39, 0x3f, 0x33, 0x0f, 0x22, 0xaf, 0x34, 0x93,
	0x91, 0x8b, 0xd3, 0x11, 0x66, 0xab, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x1c, 0x17, 0x57, 0x41, 0x51, 0x7e, 0x59, 0x66, 0x4a,
	0x6a, 0x91, 0x67, 0x8a, 0x04, 0x13, 0x58, 0x1c, 0x49, 0x44, 0x48, 0x8a, 0x8b, 0x23, 0x39, 0xb1,
	0x20, 0x31, 0x39, 0xb3, 0xa4, 0x52, 0x82, 0x59, 0x81, 0x51, 0x83, 0x25, 0x08, 0xce, 0x07, 0xe9,
	0x2d, 0x2e, 0x49, 0x2c, 0x2a, 0x71, 0xca, 0xc9, 0x4f, 0xce, 0x96, 0x60, 0x01, 0xcb, 0x22, 0x89,
	0x80, 0xf4, 0xa6, 0xe6, 0xa5, 0x24, 0x81, 0x65, 0x59, 0x21, 0x7a, 0x61, 0x7c, 0x2b, 0x96, 0x17,
	0x0b, 0xe4, 0x19, 0x9d, 0x0c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a,
	0x1c, 0x16, 0x60, 0x15, 0xf0, 0xa0, 0x2b, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0xfb, 0xca,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x3d, 0x35, 0xd7, 0x5a, 0x01, 0x00, 0x00,
}

func (this *Agreement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Agreement)
	if !ok {
		that2, ok := that.(Agreement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ProviderId != that1.ProviderId {
		return false
	}
	if this.Capacity != that1.Capacity {
		return false
	}
	if this.StartBlock != that1.StartBlock {
		return false
	}
	if this.Endblock != that1.Endblock {
		return false
	}
	return true
}
func (m *Agreement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agreement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agreement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Endblock != 0 {
		i = encodeVarintAgreement(dAtA, i, uint64(m.Endblock))
		i--
		dAtA[i] = 0x28
	}
	if m.StartBlock != 0 {
		i = encodeVarintAgreement(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.Capacity != 0 {
		i = encodeVarintAgreement(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintAgreement(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAgreement(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgreement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgreement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Agreement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAgreement(uint64(l))
	}
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovAgreement(uint64(l))
	}
	if m.Capacity != 0 {
		n += 1 + sovAgreement(uint64(m.Capacity))
	}
	if m.StartBlock != 0 {
		n += 1 + sovAgreement(uint64(m.StartBlock))
	}
	if m.Endblock != 0 {
		n += 1 + sovAgreement(uint64(m.Endblock))
	}
	return n
}

func sovAgreement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgreement(x uint64) (n int) {
	return sovAgreement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Agreement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgreement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agreement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agreement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgreement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgreement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgreement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgreement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endblock", wireType)
			}
			m.Endblock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Endblock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgreement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgreement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgreement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgreement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgreement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgreement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgreement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgreement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgreement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgreement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgreement = fmt.Errorf("proto: unexpected end of group")
)
