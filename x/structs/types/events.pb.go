// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventAllocation struct {
	Allocation *Allocation `protobuf:"bytes,1,opt,name=allocation,proto3" json:"allocation,omitempty"`
}

func (m *EventAllocation) Reset()         { *m = EventAllocation{} }
func (m *EventAllocation) String() string { return proto.CompactTextString(m) }
func (*EventAllocation) ProtoMessage()    {}
func (*EventAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{0}
}
func (m *EventAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAllocation.Merge(m, src)
}
func (m *EventAllocation) XXX_Size() int {
	return m.Size()
}
func (m *EventAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_EventAllocation proto.InternalMessageInfo

func (m *EventAllocation) GetAllocation() *Allocation {
	if m != nil {
		return m.Allocation
	}
	return nil
}

type EventFleet struct {
	Fleet *Fleet `protobuf:"bytes,1,opt,name=fleet,proto3" json:"fleet,omitempty"`
}

func (m *EventFleet) Reset()         { *m = EventFleet{} }
func (m *EventFleet) String() string { return proto.CompactTextString(m) }
func (*EventFleet) ProtoMessage()    {}
func (*EventFleet) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{1}
}
func (m *EventFleet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFleet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFleet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFleet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFleet.Merge(m, src)
}
func (m *EventFleet) XXX_Size() int {
	return m.Size()
}
func (m *EventFleet) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFleet.DiscardUnknown(m)
}

var xxx_messageInfo_EventFleet proto.InternalMessageInfo

func (m *EventFleet) GetFleet() *Fleet {
	if m != nil {
		return m.Fleet
	}
	return nil
}

type EventGuild struct {
	Guild *Guild `protobuf:"bytes,1,opt,name=guild,proto3" json:"guild,omitempty"`
}

func (m *EventGuild) Reset()         { *m = EventGuild{} }
func (m *EventGuild) String() string { return proto.CompactTextString(m) }
func (*EventGuild) ProtoMessage()    {}
func (*EventGuild) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{2}
}
func (m *EventGuild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGuild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGuild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGuild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGuild.Merge(m, src)
}
func (m *EventGuild) XXX_Size() int {
	return m.Size()
}
func (m *EventGuild) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGuild.DiscardUnknown(m)
}

var xxx_messageInfo_EventGuild proto.InternalMessageInfo

func (m *EventGuild) GetGuild() *Guild {
	if m != nil {
		return m.Guild
	}
	return nil
}

type EventInfusion struct {
	Infusion *Infusion `protobuf:"bytes,1,opt,name=infusion,proto3" json:"infusion,omitempty"`
}

func (m *EventInfusion) Reset()         { *m = EventInfusion{} }
func (m *EventInfusion) String() string { return proto.CompactTextString(m) }
func (*EventInfusion) ProtoMessage()    {}
func (*EventInfusion) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{3}
}
func (m *EventInfusion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInfusion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInfusion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInfusion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInfusion.Merge(m, src)
}
func (m *EventInfusion) XXX_Size() int {
	return m.Size()
}
func (m *EventInfusion) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInfusion.DiscardUnknown(m)
}

var xxx_messageInfo_EventInfusion proto.InternalMessageInfo

func (m *EventInfusion) GetInfusion() *Infusion {
	if m != nil {
		return m.Infusion
	}
	return nil
}

type EventPlanet struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=planet,proto3" json:"planet,omitempty"`
}

func (m *EventPlanet) Reset()         { *m = EventPlanet{} }
func (m *EventPlanet) String() string { return proto.CompactTextString(m) }
func (*EventPlanet) ProtoMessage()    {}
func (*EventPlanet) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{4}
}
func (m *EventPlanet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPlanet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPlanet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPlanet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPlanet.Merge(m, src)
}
func (m *EventPlanet) XXX_Size() int {
	return m.Size()
}
func (m *EventPlanet) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPlanet.DiscardUnknown(m)
}

var xxx_messageInfo_EventPlanet proto.InternalMessageInfo

func (m *EventPlanet) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

type EventPlanetAttribute struct {
	PlanetAttributeRecord *PlanetAttributeRecord `protobuf:"bytes,1,opt,name=planetAttributeRecord,proto3" json:"planetAttributeRecord,omitempty"`
}

func (m *EventPlanetAttribute) Reset()         { *m = EventPlanetAttribute{} }
func (m *EventPlanetAttribute) String() string { return proto.CompactTextString(m) }
func (*EventPlanetAttribute) ProtoMessage()    {}
func (*EventPlanetAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{5}
}
func (m *EventPlanetAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPlanetAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPlanetAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPlanetAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPlanetAttribute.Merge(m, src)
}
func (m *EventPlanetAttribute) XXX_Size() int {
	return m.Size()
}
func (m *EventPlanetAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPlanetAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_EventPlanetAttribute proto.InternalMessageInfo

func (m *EventPlanetAttribute) GetPlanetAttributeRecord() *PlanetAttributeRecord {
	if m != nil {
		return m.PlanetAttributeRecord
	}
	return nil
}

type EventPlayer struct {
	Player *Player `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
}

func (m *EventPlayer) Reset()         { *m = EventPlayer{} }
func (m *EventPlayer) String() string { return proto.CompactTextString(m) }
func (*EventPlayer) ProtoMessage()    {}
func (*EventPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{6}
}
func (m *EventPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPlayer.Merge(m, src)
}
func (m *EventPlayer) XXX_Size() int {
	return m.Size()
}
func (m *EventPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_EventPlayer proto.InternalMessageInfo

func (m *EventPlayer) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

type EventReactor struct {
	Reactor *Reactor `protobuf:"bytes,1,opt,name=reactor,proto3" json:"reactor,omitempty"`
}

func (m *EventReactor) Reset()         { *m = EventReactor{} }
func (m *EventReactor) String() string { return proto.CompactTextString(m) }
func (*EventReactor) ProtoMessage()    {}
func (*EventReactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{7}
}
func (m *EventReactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventReactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventReactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReactor.Merge(m, src)
}
func (m *EventReactor) XXX_Size() int {
	return m.Size()
}
func (m *EventReactor) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReactor.DiscardUnknown(m)
}

var xxx_messageInfo_EventReactor proto.InternalMessageInfo

func (m *EventReactor) GetReactor() *Reactor {
	if m != nil {
		return m.Reactor
	}
	return nil
}

type EventStruct struct {
	Structure *Struct `protobuf:"bytes,1,opt,name=structure,proto3" json:"structure,omitempty"`
}

func (m *EventStruct) Reset()         { *m = EventStruct{} }
func (m *EventStruct) String() string { return proto.CompactTextString(m) }
func (*EventStruct) ProtoMessage()    {}
func (*EventStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{8}
}
func (m *EventStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStruct.Merge(m, src)
}
func (m *EventStruct) XXX_Size() int {
	return m.Size()
}
func (m *EventStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EventStruct proto.InternalMessageInfo

func (m *EventStruct) GetStructure() *Struct {
	if m != nil {
		return m.Structure
	}
	return nil
}

type EventStructAttribute struct {
	StructAttributeRecord *StructAttributeRecord `protobuf:"bytes,1,opt,name=structAttributeRecord,proto3" json:"structAttributeRecord,omitempty"`
}

func (m *EventStructAttribute) Reset()         { *m = EventStructAttribute{} }
func (m *EventStructAttribute) String() string { return proto.CompactTextString(m) }
func (*EventStructAttribute) ProtoMessage()    {}
func (*EventStructAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{9}
}
func (m *EventStructAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStructAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStructAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStructAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStructAttribute.Merge(m, src)
}
func (m *EventStructAttribute) XXX_Size() int {
	return m.Size()
}
func (m *EventStructAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStructAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_EventStructAttribute proto.InternalMessageInfo

func (m *EventStructAttribute) GetStructAttributeRecord() *StructAttributeRecord {
	if m != nil {
		return m.StructAttributeRecord
	}
	return nil
}

type EventStructDefender struct {
	StructDefender *StructDefender `protobuf:"bytes,1,opt,name=structDefender,proto3" json:"structDefender,omitempty"`
}

func (m *EventStructDefender) Reset()         { *m = EventStructDefender{} }
func (m *EventStructDefender) String() string { return proto.CompactTextString(m) }
func (*EventStructDefender) ProtoMessage()    {}
func (*EventStructDefender) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{10}
}
func (m *EventStructDefender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStructDefender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStructDefender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStructDefender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStructDefender.Merge(m, src)
}
func (m *EventStructDefender) XXX_Size() int {
	return m.Size()
}
func (m *EventStructDefender) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStructDefender.DiscardUnknown(m)
}

var xxx_messageInfo_EventStructDefender proto.InternalMessageInfo

func (m *EventStructDefender) GetStructDefender() *StructDefender {
	if m != nil {
		return m.StructDefender
	}
	return nil
}

type EventStructType struct {
	StructType *StructType `protobuf:"bytes,1,opt,name=structType,proto3" json:"structType,omitempty"`
}

func (m *EventStructType) Reset()         { *m = EventStructType{} }
func (m *EventStructType) String() string { return proto.CompactTextString(m) }
func (*EventStructType) ProtoMessage()    {}
func (*EventStructType) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{11}
}
func (m *EventStructType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStructType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStructType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStructType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStructType.Merge(m, src)
}
func (m *EventStructType) XXX_Size() int {
	return m.Size()
}
func (m *EventStructType) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStructType.DiscardUnknown(m)
}

var xxx_messageInfo_EventStructType proto.InternalMessageInfo

func (m *EventStructType) GetStructType() *StructType {
	if m != nil {
		return m.StructType
	}
	return nil
}

type EventSubstation struct {
	Substation *Substation `protobuf:"bytes,1,opt,name=substation,proto3" json:"substation,omitempty"`
}

func (m *EventSubstation) Reset()         { *m = EventSubstation{} }
func (m *EventSubstation) String() string { return proto.CompactTextString(m) }
func (*EventSubstation) ProtoMessage()    {}
func (*EventSubstation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{12}
}
func (m *EventSubstation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSubstation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSubstation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSubstation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSubstation.Merge(m, src)
}
func (m *EventSubstation) XXX_Size() int {
	return m.Size()
}
func (m *EventSubstation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSubstation.DiscardUnknown(m)
}

var xxx_messageInfo_EventSubstation proto.InternalMessageInfo

func (m *EventSubstation) GetSubstation() *Substation {
	if m != nil {
		return m.Substation
	}
	return nil
}

type EventTime struct {
	EventTimeDetail *EventTimeDetail `protobuf:"bytes,1,opt,name=eventTimeDetail,proto3" json:"eventTimeDetail,omitempty"`
}

func (m *EventTime) Reset()         { *m = EventTime{} }
func (m *EventTime) String() string { return proto.CompactTextString(m) }
func (*EventTime) ProtoMessage()    {}
func (*EventTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{13}
}
func (m *EventTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTime.Merge(m, src)
}
func (m *EventTime) XXX_Size() int {
	return m.Size()
}
func (m *EventTime) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTime.DiscardUnknown(m)
}

var xxx_messageInfo_EventTime proto.InternalMessageInfo

func (m *EventTime) GetEventTimeDetail() *EventTimeDetail {
	if m != nil {
		return m.EventTimeDetail
	}
	return nil
}

type EventTimeDetail struct {
	BlockHeight int64     `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockTime   time.Time `protobuf:"bytes,2,opt,name=blockTime,proto3,stdtime" json:"blockTime"`
}

func (m *EventTimeDetail) Reset()         { *m = EventTimeDetail{} }
func (m *EventTimeDetail) String() string { return proto.CompactTextString(m) }
func (*EventTimeDetail) ProtoMessage()    {}
func (*EventTimeDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{14}
}
func (m *EventTimeDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventTimeDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventTimeDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventTimeDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTimeDetail.Merge(m, src)
}
func (m *EventTimeDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventTimeDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTimeDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventTimeDetail proto.InternalMessageInfo

func (m *EventTimeDetail) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EventTimeDetail) GetBlockTime() time.Time {
	if m != nil {
		return m.BlockTime
	}
	return time.Time{}
}

type EventPermission struct {
	PermissionRecord *PermissionRecord `protobuf:"bytes,1,opt,name=permissionRecord,proto3" json:"permissionRecord,omitempty"`
}

func (m *EventPermission) Reset()         { *m = EventPermission{} }
func (m *EventPermission) String() string { return proto.CompactTextString(m) }
func (*EventPermission) ProtoMessage()    {}
func (*EventPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{15}
}
func (m *EventPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPermission.Merge(m, src)
}
func (m *EventPermission) XXX_Size() int {
	return m.Size()
}
func (m *EventPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPermission.DiscardUnknown(m)
}

var xxx_messageInfo_EventPermission proto.InternalMessageInfo

func (m *EventPermission) GetPermissionRecord() *PermissionRecord {
	if m != nil {
		return m.PermissionRecord
	}
	return nil
}

type EventGrid struct {
	GridRecord *GridRecord `protobuf:"bytes,1,opt,name=gridRecord,proto3" json:"gridRecord,omitempty"`
}

func (m *EventGrid) Reset()         { *m = EventGrid{} }
func (m *EventGrid) String() string { return proto.CompactTextString(m) }
func (*EventGrid) ProtoMessage()    {}
func (*EventGrid) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{16}
}
func (m *EventGrid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGrid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGrid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGrid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGrid.Merge(m, src)
}
func (m *EventGrid) XXX_Size() int {
	return m.Size()
}
func (m *EventGrid) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGrid.DiscardUnknown(m)
}

var xxx_messageInfo_EventGrid proto.InternalMessageInfo

func (m *EventGrid) GetGridRecord() *GridRecord {
	if m != nil {
		return m.GridRecord
	}
	return nil
}

type EventDelete struct {
	ObjectId string `protobuf:"bytes,1,opt,name=objectId,proto3" json:"objectId,omitempty"`
}

func (m *EventDelete) Reset()         { *m = EventDelete{} }
func (m *EventDelete) String() string { return proto.CompactTextString(m) }
func (*EventDelete) ProtoMessage()    {}
func (*EventDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{17}
}
func (m *EventDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDelete.Merge(m, src)
}
func (m *EventDelete) XXX_Size() int {
	return m.Size()
}
func (m *EventDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDelete.DiscardUnknown(m)
}

var xxx_messageInfo_EventDelete proto.InternalMessageInfo

func (m *EventDelete) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

type EventAddressAssociation struct {
	AddressAssociation *AddressAssociation `protobuf:"bytes,1,opt,name=addressAssociation,proto3" json:"addressAssociation,omitempty"`
}

func (m *EventAddressAssociation) Reset()         { *m = EventAddressAssociation{} }
func (m *EventAddressAssociation) String() string { return proto.CompactTextString(m) }
func (*EventAddressAssociation) ProtoMessage()    {}
func (*EventAddressAssociation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{18}
}
func (m *EventAddressAssociation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddressAssociation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddressAssociation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddressAssociation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddressAssociation.Merge(m, src)
}
func (m *EventAddressAssociation) XXX_Size() int {
	return m.Size()
}
func (m *EventAddressAssociation) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddressAssociation.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddressAssociation proto.InternalMessageInfo

func (m *EventAddressAssociation) GetAddressAssociation() *AddressAssociation {
	if m != nil {
		return m.AddressAssociation
	}
	return nil
}

type EventAddressActivity struct {
	AddressActivity *AddressActivity `protobuf:"bytes,1,opt,name=addressActivity,proto3" json:"addressActivity,omitempty"`
}

func (m *EventAddressActivity) Reset()         { *m = EventAddressActivity{} }
func (m *EventAddressActivity) String() string { return proto.CompactTextString(m) }
func (*EventAddressActivity) ProtoMessage()    {}
func (*EventAddressActivity) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{19}
}
func (m *EventAddressActivity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddressActivity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddressActivity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddressActivity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddressActivity.Merge(m, src)
}
func (m *EventAddressActivity) XXX_Size() int {
	return m.Size()
}
func (m *EventAddressActivity) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddressActivity.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddressActivity proto.InternalMessageInfo

func (m *EventAddressActivity) GetAddressActivity() *AddressActivity {
	if m != nil {
		return m.AddressActivity
	}
	return nil
}

type EventGuildMembershipApplication struct {
	GuildMembershipApplication *GuildMembershipApplication `protobuf:"bytes,1,opt,name=guildMembershipApplication,proto3" json:"guildMembershipApplication,omitempty"`
}

func (m *EventGuildMembershipApplication) Reset()         { *m = EventGuildMembershipApplication{} }
func (m *EventGuildMembershipApplication) String() string { return proto.CompactTextString(m) }
func (*EventGuildMembershipApplication) ProtoMessage()    {}
func (*EventGuildMembershipApplication) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{20}
}
func (m *EventGuildMembershipApplication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGuildMembershipApplication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGuildMembershipApplication.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGuildMembershipApplication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGuildMembershipApplication.Merge(m, src)
}
func (m *EventGuildMembershipApplication) XXX_Size() int {
	return m.Size()
}
func (m *EventGuildMembershipApplication) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGuildMembershipApplication.DiscardUnknown(m)
}

var xxx_messageInfo_EventGuildMembershipApplication proto.InternalMessageInfo

func (m *EventGuildMembershipApplication) GetGuildMembershipApplication() *GuildMembershipApplication {
	if m != nil {
		return m.GuildMembershipApplication
	}
	return nil
}

type EventOreMine struct {
	EventOreMineDetail *EventOreMineDetail `protobuf:"bytes,1,opt,name=eventOreMineDetail,proto3" json:"eventOreMineDetail,omitempty"`
}

func (m *EventOreMine) Reset()         { *m = EventOreMine{} }
func (m *EventOreMine) String() string { return proto.CompactTextString(m) }
func (*EventOreMine) ProtoMessage()    {}
func (*EventOreMine) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{21}
}
func (m *EventOreMine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOreMine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOreMine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOreMine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOreMine.Merge(m, src)
}
func (m *EventOreMine) XXX_Size() int {
	return m.Size()
}
func (m *EventOreMine) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOreMine.DiscardUnknown(m)
}

var xxx_messageInfo_EventOreMine proto.InternalMessageInfo

func (m *EventOreMine) GetEventOreMineDetail() *EventOreMineDetail {
	if m != nil {
		return m.EventOreMineDetail
	}
	return nil
}

type EventOreMineDetail struct {
	PlayerId       string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PrimaryAddress string `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventOreMineDetail) Reset()         { *m = EventOreMineDetail{} }
func (m *EventOreMineDetail) String() string { return proto.CompactTextString(m) }
func (*EventOreMineDetail) ProtoMessage()    {}
func (*EventOreMineDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{22}
}
func (m *EventOreMineDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOreMineDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOreMineDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOreMineDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOreMineDetail.Merge(m, src)
}
func (m *EventOreMineDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventOreMineDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOreMineDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventOreMineDetail proto.InternalMessageInfo

func (m *EventOreMineDetail) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *EventOreMineDetail) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *EventOreMineDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EventAlphaRefine struct {
	EventAlphaRefineDetail *EventAlphaRefineDetail `protobuf:"bytes,1,opt,name=eventAlphaRefineDetail,proto3" json:"eventAlphaRefineDetail,omitempty"`
}

func (m *EventAlphaRefine) Reset()         { *m = EventAlphaRefine{} }
func (m *EventAlphaRefine) String() string { return proto.CompactTextString(m) }
func (*EventAlphaRefine) ProtoMessage()    {}
func (*EventAlphaRefine) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{23}
}
func (m *EventAlphaRefine) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlphaRefine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlphaRefine.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlphaRefine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlphaRefine.Merge(m, src)
}
func (m *EventAlphaRefine) XXX_Size() int {
	return m.Size()
}
func (m *EventAlphaRefine) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlphaRefine.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlphaRefine proto.InternalMessageInfo

func (m *EventAlphaRefine) GetEventAlphaRefineDetail() *EventAlphaRefineDetail {
	if m != nil {
		return m.EventAlphaRefineDetail
	}
	return nil
}

type EventAlphaRefineDetail struct {
	PlayerId       string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PrimaryAddress string `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventAlphaRefineDetail) Reset()         { *m = EventAlphaRefineDetail{} }
func (m *EventAlphaRefineDetail) String() string { return proto.CompactTextString(m) }
func (*EventAlphaRefineDetail) ProtoMessage()    {}
func (*EventAlphaRefineDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{24}
}
func (m *EventAlphaRefineDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlphaRefineDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlphaRefineDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlphaRefineDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlphaRefineDetail.Merge(m, src)
}
func (m *EventAlphaRefineDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventAlphaRefineDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlphaRefineDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlphaRefineDetail proto.InternalMessageInfo

func (m *EventAlphaRefineDetail) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *EventAlphaRefineDetail) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *EventAlphaRefineDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EventAlphaInfuse struct {
	EventAlphaInfuseDetail *EventAlphaInfuseDetail `protobuf:"bytes,1,opt,name=eventAlphaInfuseDetail,proto3" json:"eventAlphaInfuseDetail,omitempty"`
}

func (m *EventAlphaInfuse) Reset()         { *m = EventAlphaInfuse{} }
func (m *EventAlphaInfuse) String() string { return proto.CompactTextString(m) }
func (*EventAlphaInfuse) ProtoMessage()    {}
func (*EventAlphaInfuse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{25}
}
func (m *EventAlphaInfuse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlphaInfuse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlphaInfuse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlphaInfuse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlphaInfuse.Merge(m, src)
}
func (m *EventAlphaInfuse) XXX_Size() int {
	return m.Size()
}
func (m *EventAlphaInfuse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlphaInfuse.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlphaInfuse proto.InternalMessageInfo

func (m *EventAlphaInfuse) GetEventAlphaInfuseDetail() *EventAlphaInfuseDetail {
	if m != nil {
		return m.EventAlphaInfuseDetail
	}
	return nil
}

type EventAlphaInfuseDetail struct {
	PlayerId       string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PrimaryAddress string `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventAlphaInfuseDetail) Reset()         { *m = EventAlphaInfuseDetail{} }
func (m *EventAlphaInfuseDetail) String() string { return proto.CompactTextString(m) }
func (*EventAlphaInfuseDetail) ProtoMessage()    {}
func (*EventAlphaInfuseDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{26}
}
func (m *EventAlphaInfuseDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlphaInfuseDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlphaInfuseDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlphaInfuseDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlphaInfuseDetail.Merge(m, src)
}
func (m *EventAlphaInfuseDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventAlphaInfuseDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlphaInfuseDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlphaInfuseDetail proto.InternalMessageInfo

func (m *EventAlphaInfuseDetail) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *EventAlphaInfuseDetail) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *EventAlphaInfuseDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EventAlphaDefuse struct {
	EventAlphaDefuseDetail *EventAlphaDefuseDetail `protobuf:"bytes,1,opt,name=eventAlphaDefuseDetail,proto3" json:"eventAlphaDefuseDetail,omitempty"`
}

func (m *EventAlphaDefuse) Reset()         { *m = EventAlphaDefuse{} }
func (m *EventAlphaDefuse) String() string { return proto.CompactTextString(m) }
func (*EventAlphaDefuse) ProtoMessage()    {}
func (*EventAlphaDefuse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{27}
}
func (m *EventAlphaDefuse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlphaDefuse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlphaDefuse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlphaDefuse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlphaDefuse.Merge(m, src)
}
func (m *EventAlphaDefuse) XXX_Size() int {
	return m.Size()
}
func (m *EventAlphaDefuse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlphaDefuse.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlphaDefuse proto.InternalMessageInfo

func (m *EventAlphaDefuse) GetEventAlphaDefuseDetail() *EventAlphaDefuseDetail {
	if m != nil {
		return m.EventAlphaDefuseDetail
	}
	return nil
}

type EventAlphaDefuseDetail struct {
	PrimaryAddress string `protobuf:"bytes,1,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Amount         uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventAlphaDefuseDetail) Reset()         { *m = EventAlphaDefuseDetail{} }
func (m *EventAlphaDefuseDetail) String() string { return proto.CompactTextString(m) }
func (*EventAlphaDefuseDetail) ProtoMessage()    {}
func (*EventAlphaDefuseDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{28}
}
func (m *EventAlphaDefuseDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAlphaDefuseDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAlphaDefuseDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAlphaDefuseDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAlphaDefuseDetail.Merge(m, src)
}
func (m *EventAlphaDefuseDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventAlphaDefuseDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAlphaDefuseDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventAlphaDefuseDetail proto.InternalMessageInfo

func (m *EventAlphaDefuseDetail) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *EventAlphaDefuseDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EventOreTheft struct {
	EventOreTheftDetail *EventOreTheftDetail `protobuf:"bytes,1,opt,name=eventOreTheftDetail,proto3" json:"eventOreTheftDetail,omitempty"`
}

func (m *EventOreTheft) Reset()         { *m = EventOreTheft{} }
func (m *EventOreTheft) String() string { return proto.CompactTextString(m) }
func (*EventOreTheft) ProtoMessage()    {}
func (*EventOreTheft) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{29}
}
func (m *EventOreTheft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOreTheft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOreTheft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOreTheft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOreTheft.Merge(m, src)
}
func (m *EventOreTheft) XXX_Size() int {
	return m.Size()
}
func (m *EventOreTheft) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOreTheft.DiscardUnknown(m)
}

var xxx_messageInfo_EventOreTheft proto.InternalMessageInfo

func (m *EventOreTheft) GetEventOreTheftDetail() *EventOreTheftDetail {
	if m != nil {
		return m.EventOreTheftDetail
	}
	return nil
}

type EventOreTheftDetail struct {
	VictimPrimaryAddress string `protobuf:"bytes,1,opt,name=victimPrimaryAddress,proto3" json:"victimPrimaryAddress,omitempty"`
	VictimPlayerId       string `protobuf:"bytes,2,opt,name=victimPlayerId,proto3" json:"victimPlayerId,omitempty"`
	ThiefPrimaryAddress  string `protobuf:"bytes,3,opt,name=thiefPrimaryAddress,proto3" json:"thiefPrimaryAddress,omitempty"`
	ThiefPlayerId        string `protobuf:"bytes,4,opt,name=thiefPlayerId,proto3" json:"thiefPlayerId,omitempty"`
	Amount               uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventOreTheftDetail) Reset()         { *m = EventOreTheftDetail{} }
func (m *EventOreTheftDetail) String() string { return proto.CompactTextString(m) }
func (*EventOreTheftDetail) ProtoMessage()    {}
func (*EventOreTheftDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{30}
}
func (m *EventOreTheftDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOreTheftDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOreTheftDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOreTheftDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOreTheftDetail.Merge(m, src)
}
func (m *EventOreTheftDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventOreTheftDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOreTheftDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventOreTheftDetail proto.InternalMessageInfo

func (m *EventOreTheftDetail) GetVictimPrimaryAddress() string {
	if m != nil {
		return m.VictimPrimaryAddress
	}
	return ""
}

func (m *EventOreTheftDetail) GetVictimPlayerId() string {
	if m != nil {
		return m.VictimPlayerId
	}
	return ""
}

func (m *EventOreTheftDetail) GetThiefPrimaryAddress() string {
	if m != nil {
		return m.ThiefPrimaryAddress
	}
	return ""
}

func (m *EventOreTheftDetail) GetThiefPlayerId() string {
	if m != nil {
		return m.ThiefPlayerId
	}
	return ""
}

func (m *EventOreTheftDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EventOreMigrate struct {
	EventOreMigrateDetail *EventOreMigrateDetail `protobuf:"bytes,1,opt,name=eventOreMigrateDetail,proto3" json:"eventOreMigrateDetail,omitempty"`
}

func (m *EventOreMigrate) Reset()         { *m = EventOreMigrate{} }
func (m *EventOreMigrate) String() string { return proto.CompactTextString(m) }
func (*EventOreMigrate) ProtoMessage()    {}
func (*EventOreMigrate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{31}
}
func (m *EventOreMigrate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOreMigrate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOreMigrate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOreMigrate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOreMigrate.Merge(m, src)
}
func (m *EventOreMigrate) XXX_Size() int {
	return m.Size()
}
func (m *EventOreMigrate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOreMigrate.DiscardUnknown(m)
}

var xxx_messageInfo_EventOreMigrate proto.InternalMessageInfo

func (m *EventOreMigrate) GetEventOreMigrateDetail() *EventOreMigrateDetail {
	if m != nil {
		return m.EventOreMigrateDetail
	}
	return nil
}

type EventOreMigrateDetail struct {
	PlayerId          string `protobuf:"bytes,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	PrimaryAddress    string `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	OldPrimaryAddress string `protobuf:"bytes,3,opt,name=oldPrimaryAddress,proto3" json:"oldPrimaryAddress,omitempty"`
	Amount            uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventOreMigrateDetail) Reset()         { *m = EventOreMigrateDetail{} }
func (m *EventOreMigrateDetail) String() string { return proto.CompactTextString(m) }
func (*EventOreMigrateDetail) ProtoMessage()    {}
func (*EventOreMigrateDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{32}
}
func (m *EventOreMigrateDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOreMigrateDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOreMigrateDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOreMigrateDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOreMigrateDetail.Merge(m, src)
}
func (m *EventOreMigrateDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventOreMigrateDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOreMigrateDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventOreMigrateDetail proto.InternalMessageInfo

func (m *EventOreMigrateDetail) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *EventOreMigrateDetail) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *EventOreMigrateDetail) GetOldPrimaryAddress() string {
	if m != nil {
		return m.OldPrimaryAddress
	}
	return ""
}

func (m *EventOreMigrateDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type EventAttack struct {
	EventAttackDetail *EventAttackDetail `protobuf:"bytes,1,opt,name=eventAttackDetail,proto3" json:"eventAttackDetail,omitempty"`
}

func (m *EventAttack) Reset()         { *m = EventAttack{} }
func (m *EventAttack) String() string { return proto.CompactTextString(m) }
func (*EventAttack) ProtoMessage()    {}
func (*EventAttack) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{33}
}
func (m *EventAttack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttack.Merge(m, src)
}
func (m *EventAttack) XXX_Size() int {
	return m.Size()
}
func (m *EventAttack) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttack.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttack proto.InternalMessageInfo

func (m *EventAttack) GetEventAttackDetail() *EventAttackDetail {
	if m != nil {
		return m.EventAttackDetail
	}
	return nil
}

type EventAttackDetail struct {
	AttackerStructId                              string                   `protobuf:"bytes,1,opt,name=attackerStructId,proto3" json:"attackerStructId,omitempty"`
	WeaponSystem                                  TechWeaponSystem         `protobuf:"varint,2,opt,name=weaponSystem,proto3,enum=structs.structs.TechWeaponSystem" json:"weaponSystem,omitempty"`
	WeaponControl                                 TechWeaponControl        `protobuf:"varint,3,opt,name=weaponControl,proto3,enum=structs.structs.TechWeaponControl" json:"weaponControl,omitempty"`
	ActiveWeaponry                                TechActiveWeaponry       `protobuf:"varint,4,opt,name=activeWeaponry,proto3,enum=structs.structs.TechActiveWeaponry" json:"activeWeaponry,omitempty"`
	EventAttackShotDetail                         []*EventAttackShotDetail `protobuf:"bytes,5,rep,name=eventAttackShotDetail,proto3" json:"eventAttackShotDetail,omitempty"`
	RecoilDamageToAttacker                        bool                     `protobuf:"varint,6,opt,name=recoilDamageToAttacker,proto3" json:"recoilDamageToAttacker,omitempty"`
	RecoilDamage                                  uint64                   `protobuf:"varint,7,opt,name=recoilDamage,proto3" json:"recoilDamage,omitempty"`
	RecoilDamageDestroyedAttacker                 bool                     `protobuf:"varint,8,opt,name=recoilDamageDestroyedAttacker,proto3" json:"recoilDamageDestroyedAttacker,omitempty"`
	PlanetaryDefenseCannonDamageToAttacker        bool                     `protobuf:"varint,9,opt,name=planetaryDefenseCannonDamageToAttacker,proto3" json:"planetaryDefenseCannonDamageToAttacker,omitempty"`
	PlanetaryDefenseCannonDamage                  uint64                   `protobuf:"varint,10,opt,name=planetaryDefenseCannonDamage,proto3" json:"planetaryDefenseCannonDamage,omitempty"`
	PlanetaryDefenseCannonDamageDestroyedAttacker bool                     `protobuf:"varint,11,opt,name=planetaryDefenseCannonDamageDestroyedAttacker,proto3" json:"planetaryDefenseCannonDamageDestroyedAttacker,omitempty"`
}

func (m *EventAttackDetail) Reset()         { *m = EventAttackDetail{} }
func (m *EventAttackDetail) String() string { return proto.CompactTextString(m) }
func (*EventAttackDetail) ProtoMessage()    {}
func (*EventAttackDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{34}
}
func (m *EventAttackDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttackDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttackDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttackDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttackDetail.Merge(m, src)
}
func (m *EventAttackDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventAttackDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttackDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttackDetail proto.InternalMessageInfo

func (m *EventAttackDetail) GetAttackerStructId() string {
	if m != nil {
		return m.AttackerStructId
	}
	return ""
}

func (m *EventAttackDetail) GetWeaponSystem() TechWeaponSystem {
	if m != nil {
		return m.WeaponSystem
	}
	return TechWeaponSystem_primaryWeapon
}

func (m *EventAttackDetail) GetWeaponControl() TechWeaponControl {
	if m != nil {
		return m.WeaponControl
	}
	return TechWeaponControl_noWeaponControl
}

func (m *EventAttackDetail) GetActiveWeaponry() TechActiveWeaponry {
	if m != nil {
		return m.ActiveWeaponry
	}
	return TechActiveWeaponry_noActiveWeaponry
}

func (m *EventAttackDetail) GetEventAttackShotDetail() []*EventAttackShotDetail {
	if m != nil {
		return m.EventAttackShotDetail
	}
	return nil
}

func (m *EventAttackDetail) GetRecoilDamageToAttacker() bool {
	if m != nil {
		return m.RecoilDamageToAttacker
	}
	return false
}

func (m *EventAttackDetail) GetRecoilDamage() uint64 {
	if m != nil {
		return m.RecoilDamage
	}
	return 0
}

func (m *EventAttackDetail) GetRecoilDamageDestroyedAttacker() bool {
	if m != nil {
		return m.RecoilDamageDestroyedAttacker
	}
	return false
}

func (m *EventAttackDetail) GetPlanetaryDefenseCannonDamageToAttacker() bool {
	if m != nil {
		return m.PlanetaryDefenseCannonDamageToAttacker
	}
	return false
}

func (m *EventAttackDetail) GetPlanetaryDefenseCannonDamage() uint64 {
	if m != nil {
		return m.PlanetaryDefenseCannonDamage
	}
	return 0
}

func (m *EventAttackDetail) GetPlanetaryDefenseCannonDamageDestroyedAttacker() bool {
	if m != nil {
		return m.PlanetaryDefenseCannonDamageDestroyedAttacker
	}
	return false
}

type EventAttackShotDetail struct {
	TargetStructId                         string                              `protobuf:"bytes,1,opt,name=targetStructId,proto3" json:"targetStructId,omitempty"`
	Evaded                                 bool                                `protobuf:"varint,2,opt,name=evaded,proto3" json:"evaded,omitempty"`
	EvadedCause                            TechUnitDefenses                    `protobuf:"varint,3,opt,name=evadedCause,proto3,enum=structs.structs.TechUnitDefenses" json:"evadedCause,omitempty"`
	EvadedByPlanetaryDefenses              bool                                `protobuf:"varint,4,opt,name=evadedByPlanetaryDefenses,proto3" json:"evadedByPlanetaryDefenses,omitempty"`
	EvadedByPlanetaryDefensesCause         TechPlanetaryDefenses               `protobuf:"varint,5,opt,name=evadedByPlanetaryDefensesCause,proto3,enum=structs.structs.TechPlanetaryDefenses" json:"evadedByPlanetaryDefensesCause,omitempty"`
	Blocked                                bool                                `protobuf:"varint,6,opt,name=blocked,proto3" json:"blocked,omitempty"`
	BlockedByStructId                      string                              `protobuf:"bytes,7,opt,name=blockedByStructId,proto3" json:"blockedByStructId,omitempty"`
	BlockerDestroyed                       bool                                `protobuf:"varint,8,opt,name=blockerDestroyed,proto3" json:"blockerDestroyed,omitempty"`
	EventAttackDefenderCounterDetail       []*EventAttackDefenderCounterDetail `protobuf:"bytes,9,rep,name=eventAttackDefenderCounterDetail,proto3" json:"eventAttackDefenderCounterDetail,omitempty"`
	DamageDealt                            uint64                              `protobuf:"varint,10,opt,name=damageDealt,proto3" json:"damageDealt,omitempty"`
	DamageReduction                        uint64                              `protobuf:"varint,11,opt,name=damageReduction,proto3" json:"damageReduction,omitempty"`
	DamageReductionCause                   TechUnitDefenses                    `protobuf:"varint,12,opt,name=damageReductionCause,proto3,enum=structs.structs.TechUnitDefenses" json:"damageReductionCause,omitempty"`
	Damage                                 uint64                              `protobuf:"varint,13,opt,name=damage,proto3" json:"damage,omitempty"`
	TargetCountered                        bool                                `protobuf:"varint,14,opt,name=targetCountered,proto3" json:"targetCountered,omitempty"`
	TargetCounteredDamage                  uint64                              `protobuf:"varint,15,opt,name=targetCounteredDamage,proto3" json:"targetCounteredDamage,omitempty"`
	TargetCounterDestroyedAttacker         bool                                `protobuf:"varint,16,opt,name=targetCounterDestroyedAttacker,proto3" json:"targetCounterDestroyedAttacker,omitempty"`
	TargetCounterCause                     TechPassiveWeaponry                 `protobuf:"varint,17,opt,name=targetCounterCause,proto3,enum=structs.structs.TechPassiveWeaponry" json:"targetCounterCause,omitempty"`
	TargetDestroyed                        bool                                `protobuf:"varint,18,opt,name=targetDestroyed,proto3" json:"targetDestroyed,omitempty"`
	PostDestructionDamageToAttacker        bool                                `protobuf:"varint,19,opt,name=postDestructionDamageToAttacker,proto3" json:"postDestructionDamageToAttacker,omitempty"`
	PostDestructionDamage                  uint64                              `protobuf:"varint,20,opt,name=postDestructionDamage,proto3" json:"postDestructionDamage,omitempty"`
	PostDestructionDamageDestroyedAttacker bool                                `protobuf:"varint,21,opt,name=postDestructionDamageDestroyedAttacker,proto3" json:"postDestructionDamageDestroyedAttacker,omitempty"`
	PostDestructionDamageCause             TechPassiveWeaponry                 `protobuf:"varint,22,opt,name=postDestructionDamageCause,proto3,enum=structs.structs.TechPassiveWeaponry" json:"postDestructionDamageCause,omitempty"`
}

func (m *EventAttackShotDetail) Reset()         { *m = EventAttackShotDetail{} }
func (m *EventAttackShotDetail) String() string { return proto.CompactTextString(m) }
func (*EventAttackShotDetail) ProtoMessage()    {}
func (*EventAttackShotDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{35}
}
func (m *EventAttackShotDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttackShotDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttackShotDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttackShotDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttackShotDetail.Merge(m, src)
}
func (m *EventAttackShotDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventAttackShotDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttackShotDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttackShotDetail proto.InternalMessageInfo

func (m *EventAttackShotDetail) GetTargetStructId() string {
	if m != nil {
		return m.TargetStructId
	}
	return ""
}

func (m *EventAttackShotDetail) GetEvaded() bool {
	if m != nil {
		return m.Evaded
	}
	return false
}

func (m *EventAttackShotDetail) GetEvadedCause() TechUnitDefenses {
	if m != nil {
		return m.EvadedCause
	}
	return TechUnitDefenses_noUnitDefenses
}

func (m *EventAttackShotDetail) GetEvadedByPlanetaryDefenses() bool {
	if m != nil {
		return m.EvadedByPlanetaryDefenses
	}
	return false
}

func (m *EventAttackShotDetail) GetEvadedByPlanetaryDefensesCause() TechPlanetaryDefenses {
	if m != nil {
		return m.EvadedByPlanetaryDefensesCause
	}
	return TechPlanetaryDefenses_noPlanetaryDefense
}

func (m *EventAttackShotDetail) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

func (m *EventAttackShotDetail) GetBlockedByStructId() string {
	if m != nil {
		return m.BlockedByStructId
	}
	return ""
}

func (m *EventAttackShotDetail) GetBlockerDestroyed() bool {
	if m != nil {
		return m.BlockerDestroyed
	}
	return false
}

func (m *EventAttackShotDetail) GetEventAttackDefenderCounterDetail() []*EventAttackDefenderCounterDetail {
	if m != nil {
		return m.EventAttackDefenderCounterDetail
	}
	return nil
}

func (m *EventAttackShotDetail) GetDamageDealt() uint64 {
	if m != nil {
		return m.DamageDealt
	}
	return 0
}

func (m *EventAttackShotDetail) GetDamageReduction() uint64 {
	if m != nil {
		return m.DamageReduction
	}
	return 0
}

func (m *EventAttackShotDetail) GetDamageReductionCause() TechUnitDefenses {
	if m != nil {
		return m.DamageReductionCause
	}
	return TechUnitDefenses_noUnitDefenses
}

func (m *EventAttackShotDetail) GetDamage() uint64 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *EventAttackShotDetail) GetTargetCountered() bool {
	if m != nil {
		return m.TargetCountered
	}
	return false
}

func (m *EventAttackShotDetail) GetTargetCounteredDamage() uint64 {
	if m != nil {
		return m.TargetCounteredDamage
	}
	return 0
}

func (m *EventAttackShotDetail) GetTargetCounterDestroyedAttacker() bool {
	if m != nil {
		return m.TargetCounterDestroyedAttacker
	}
	return false
}

func (m *EventAttackShotDetail) GetTargetCounterCause() TechPassiveWeaponry {
	if m != nil {
		return m.TargetCounterCause
	}
	return TechPassiveWeaponry_noPassiveWeaponry
}

func (m *EventAttackShotDetail) GetTargetDestroyed() bool {
	if m != nil {
		return m.TargetDestroyed
	}
	return false
}

func (m *EventAttackShotDetail) GetPostDestructionDamageToAttacker() bool {
	if m != nil {
		return m.PostDestructionDamageToAttacker
	}
	return false
}

func (m *EventAttackShotDetail) GetPostDestructionDamage() uint64 {
	if m != nil {
		return m.PostDestructionDamage
	}
	return 0
}

func (m *EventAttackShotDetail) GetPostDestructionDamageDestroyedAttacker() bool {
	if m != nil {
		return m.PostDestructionDamageDestroyedAttacker
	}
	return false
}

func (m *EventAttackShotDetail) GetPostDestructionDamageCause() TechPassiveWeaponry {
	if m != nil {
		return m.PostDestructionDamageCause
	}
	return TechPassiveWeaponry_noPassiveWeaponry
}

type EventAttackDefenderCounterDetail struct {
	CounterByStructId        string `protobuf:"bytes,1,opt,name=counterByStructId,proto3" json:"counterByStructId,omitempty"`
	CounterDamage            uint64 `protobuf:"varint,2,opt,name=counterDamage,proto3" json:"counterDamage,omitempty"`
	CounterDestroyedAttacker bool   `protobuf:"varint,3,opt,name=counterDestroyedAttacker,proto3" json:"counterDestroyedAttacker,omitempty"`
}

func (m *EventAttackDefenderCounterDetail) Reset()         { *m = EventAttackDefenderCounterDetail{} }
func (m *EventAttackDefenderCounterDetail) String() string { return proto.CompactTextString(m) }
func (*EventAttackDefenderCounterDetail) ProtoMessage()    {}
func (*EventAttackDefenderCounterDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{36}
}
func (m *EventAttackDefenderCounterDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAttackDefenderCounterDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAttackDefenderCounterDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAttackDefenderCounterDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAttackDefenderCounterDetail.Merge(m, src)
}
func (m *EventAttackDefenderCounterDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventAttackDefenderCounterDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAttackDefenderCounterDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventAttackDefenderCounterDetail proto.InternalMessageInfo

func (m *EventAttackDefenderCounterDetail) GetCounterByStructId() string {
	if m != nil {
		return m.CounterByStructId
	}
	return ""
}

func (m *EventAttackDefenderCounterDetail) GetCounterDamage() uint64 {
	if m != nil {
		return m.CounterDamage
	}
	return 0
}

func (m *EventAttackDefenderCounterDetail) GetCounterDestroyedAttacker() bool {
	if m != nil {
		return m.CounterDestroyedAttacker
	}
	return false
}

type EventRaid struct {
	EventRaidDetail *EventRaidDetail `protobuf:"bytes,1,opt,name=eventRaidDetail,proto3" json:"eventRaidDetail,omitempty"`
}

func (m *EventRaid) Reset()         { *m = EventRaid{} }
func (m *EventRaid) String() string { return proto.CompactTextString(m) }
func (*EventRaid) ProtoMessage()    {}
func (*EventRaid) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{37}
}
func (m *EventRaid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRaid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRaid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRaid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRaid.Merge(m, src)
}
func (m *EventRaid) XXX_Size() int {
	return m.Size()
}
func (m *EventRaid) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRaid.DiscardUnknown(m)
}

var xxx_messageInfo_EventRaid proto.InternalMessageInfo

func (m *EventRaid) GetEventRaidDetail() *EventRaidDetail {
	if m != nil {
		return m.EventRaidDetail
	}
	return nil
}

type EventRaidDetail struct {
	FleetId  string     `protobuf:"bytes,1,opt,name=fleetId,proto3" json:"fleetId,omitempty"`
	PlanetId string     `protobuf:"bytes,2,opt,name=planetId,proto3" json:"planetId,omitempty"`
	Status   RaidStatus `protobuf:"varint,3,opt,name=status,proto3,enum=structs.structs.RaidStatus" json:"status,omitempty"`
}

func (m *EventRaidDetail) Reset()         { *m = EventRaidDetail{} }
func (m *EventRaidDetail) String() string { return proto.CompactTextString(m) }
func (*EventRaidDetail) ProtoMessage()    {}
func (*EventRaidDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd7c2ee201e0d8dd, []int{38}
}
func (m *EventRaidDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRaidDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRaidDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRaidDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRaidDetail.Merge(m, src)
}
func (m *EventRaidDetail) XXX_Size() int {
	return m.Size()
}
func (m *EventRaidDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRaidDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EventRaidDetail proto.InternalMessageInfo

func (m *EventRaidDetail) GetFleetId() string {
	if m != nil {
		return m.FleetId
	}
	return ""
}

func (m *EventRaidDetail) GetPlanetId() string {
	if m != nil {
		return m.PlanetId
	}
	return ""
}

func (m *EventRaidDetail) GetStatus() RaidStatus {
	if m != nil {
		return m.Status
	}
	return RaidStatus_initiated
}

func init() {
	proto.RegisterType((*EventAllocation)(nil), "structs.structs.EventAllocation")
	proto.RegisterType((*EventFleet)(nil), "structs.structs.EventFleet")
	proto.RegisterType((*EventGuild)(nil), "structs.structs.EventGuild")
	proto.RegisterType((*EventInfusion)(nil), "structs.structs.EventInfusion")
	proto.RegisterType((*EventPlanet)(nil), "structs.structs.EventPlanet")
	proto.RegisterType((*EventPlanetAttribute)(nil), "structs.structs.EventPlanetAttribute")
	proto.RegisterType((*EventPlayer)(nil), "structs.structs.EventPlayer")
	proto.RegisterType((*EventReactor)(nil), "structs.structs.EventReactor")
	proto.RegisterType((*EventStruct)(nil), "structs.structs.EventStruct")
	proto.RegisterType((*EventStructAttribute)(nil), "structs.structs.EventStructAttribute")
	proto.RegisterType((*EventStructDefender)(nil), "structs.structs.EventStructDefender")
	proto.RegisterType((*EventStructType)(nil), "structs.structs.EventStructType")
	proto.RegisterType((*EventSubstation)(nil), "structs.structs.EventSubstation")
	proto.RegisterType((*EventTime)(nil), "structs.structs.EventTime")
	proto.RegisterType((*EventTimeDetail)(nil), "structs.structs.EventTimeDetail")
	proto.RegisterType((*EventPermission)(nil), "structs.structs.EventPermission")
	proto.RegisterType((*EventGrid)(nil), "structs.structs.EventGrid")
	proto.RegisterType((*EventDelete)(nil), "structs.structs.EventDelete")
	proto.RegisterType((*EventAddressAssociation)(nil), "structs.structs.EventAddressAssociation")
	proto.RegisterType((*EventAddressActivity)(nil), "structs.structs.EventAddressActivity")
	proto.RegisterType((*EventGuildMembershipApplication)(nil), "structs.structs.EventGuildMembershipApplication")
	proto.RegisterType((*EventOreMine)(nil), "structs.structs.EventOreMine")
	proto.RegisterType((*EventOreMineDetail)(nil), "structs.structs.EventOreMineDetail")
	proto.RegisterType((*EventAlphaRefine)(nil), "structs.structs.EventAlphaRefine")
	proto.RegisterType((*EventAlphaRefineDetail)(nil), "structs.structs.EventAlphaRefineDetail")
	proto.RegisterType((*EventAlphaInfuse)(nil), "structs.structs.EventAlphaInfuse")
	proto.RegisterType((*EventAlphaInfuseDetail)(nil), "structs.structs.EventAlphaInfuseDetail")
	proto.RegisterType((*EventAlphaDefuse)(nil), "structs.structs.EventAlphaDefuse")
	proto.RegisterType((*EventAlphaDefuseDetail)(nil), "structs.structs.EventAlphaDefuseDetail")
	proto.RegisterType((*EventOreTheft)(nil), "structs.structs.EventOreTheft")
	proto.RegisterType((*EventOreTheftDetail)(nil), "structs.structs.EventOreTheftDetail")
	proto.RegisterType((*EventOreMigrate)(nil), "structs.structs.EventOreMigrate")
	proto.RegisterType((*EventOreMigrateDetail)(nil), "structs.structs.EventOreMigrateDetail")
	proto.RegisterType((*EventAttack)(nil), "structs.structs.EventAttack")
	proto.RegisterType((*EventAttackDetail)(nil), "structs.structs.EventAttackDetail")
	proto.RegisterType((*EventAttackShotDetail)(nil), "structs.structs.EventAttackShotDetail")
	proto.RegisterType((*EventAttackDefenderCounterDetail)(nil), "structs.structs.EventAttackDefenderCounterDetail")
	proto.RegisterType((*EventRaid)(nil), "structs.structs.EventRaid")
	proto.RegisterType((*EventRaidDetail)(nil), "structs.structs.EventRaidDetail")
}

func init() { proto.RegisterFile("structs/structs/events.proto", fileDescriptor_dd7c2ee201e0d8dd) }

var fileDescriptor_dd7c2ee201e0d8dd = []byte{
	// 1759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xef, 0x72, 0x14, 0x45,
	0x10, 0xcf, 0x11, 0xf2, 0xaf, 0x93, 0x5c, 0x92, 0xc9, 0x1f, 0x8e, 0x00, 0x97, 0x73, 0xa1, 0x62,
	0x54, 0x4c, 0x04, 0xc4, 0x0f, 0x68, 0x59, 0x95, 0xe4, 0x20, 0x41, 0x0b, 0x49, 0x4d, 0x02, 0x58,
	0x96, 0x25, 0xce, 0xed, 0x4e, 0x2e, 0x6b, 0xee, 0x76, 0xb7, 0x66, 0xe7, 0x82, 0x57, 0xa5, 0xaf,
	0x60, 0xf1, 0x06, 0x96, 0xaf, 0xe0, 0x53, 0xf0, 0x91, 0x8f, 0x7e, 0x42, 0x85, 0x17, 0xb1, 0x76,
	0x66, 0xf6, 0xef, 0xcc, 0x5e, 0x42, 0x95, 0xc5, 0xa7, 0xbb, 0xee, 0xfe, 0x75, 0xcf, 0xf4, 0x6f,
	0xba, 0x7b, 0x76, 0x17, 0x2e, 0x87, 0x9c, 0xf5, 0x6c, 0x1e, 0x6e, 0xc4, 0xbf, 0xf4, 0x84, 0x7a,
	0x3c, 0x5c, 0x0f, 0x98, 0xcf, 0x7d, 0x34, 0xa3, 0xb4, 0xeb, 0xea, 0x77, 0x79, 0xa1, 0xed, 0xb7,
	0x7d, 0x61, 0xdb, 0x88, 0xfe, 0x49, 0xd8, 0xf2, 0xe5, 0xb6, 0xef, 0xb7, 0x3b, 0x74, 0x83, 0x04,
	0xee, 0x06, 0xf1, 0x3c, 0x9f, 0x13, 0xee, 0xfa, 0x5e, 0x18, 0x5b, 0x8b, 0x4b, 0x04, 0x84, 0x91,
	0x6e, 0x6c, 0x5d, 0x51, 0xbe, 0x42, 0x6a, 0xf5, 0x0e, 0x37, 0xb8, 0xdb, 0xa5, 0x21, 0x27, 0xdd,
	0x40, 0x01, 0xae, 0x14, 0xdd, 0x89, 0xe3, 0x30, 0x1a, 0xc6, 0xfe, 0x0d, 0xcd, 0xdc, 0xe9, 0xf8,
	0xb6, 0xd8, 0x80, 0x42, 0x5c, 0x2a, 0x22, 0x0e, 0x3b, 0x94, 0x72, 0x65, 0x5c, 0x2e, 0x1a, 0xdb,
	0xcc, 0x75, 0xca, 0x1c, 0xdb, 0x3d, 0xb7, 0x13, 0x1b, 0xeb, 0x45, 0xa3, 0xeb, 0x1d, 0xf6, 0xc2,
	0x74, 0x55, 0x2d, 0xf0, 0x31, 0xed, 0x97, 0xee, 0x39, 0xa0, 0xac, 0xeb, 0x86, 0x19, 0x6f, 0x9d,
	0xb3, 0x0e, 0xe9, 0x53, 0x36, 0xc0, 0xea, 0x25, 0x29, 0x69, 0x84, 0x31, 0x4a, 0x6c, 0xee, 0x97,
	0x3a, 0xcb, 0xdf, 0xb2, 0xad, 0x85, 0xbd, 0x56, 0xc8, 0x33, 0x74, 0x5a, 0xdf, 0xc0, 0xcc, 0xdd,
	0xa8, 0x46, 0x36, 0x13, 0x9e, 0xd1, 0xe7, 0x00, 0x29, 0xeb, 0xb5, 0x4a, 0xa3, 0xb2, 0x36, 0x79,
	0xf3, 0xd2, 0x7a, 0xa1, 0x76, 0xd6, 0x53, 0x07, 0x9c, 0x81, 0x5b, 0x77, 0x00, 0x44, 0xbc, 0x7b,
	0xd1, 0xa9, 0xa0, 0xeb, 0x30, 0x22, 0x8e, 0x47, 0x45, 0x59, 0xd2, 0xa2, 0x08, 0x18, 0x96, 0xa0,
	0xc4, 0x77, 0x27, 0x3a, 0x98, 0xc8, 0x57, 0x9c, 0x50, 0xa9, 0xaf, 0x80, 0x61, 0x09, 0xb2, 0xee,
	0xc1, 0xb4, 0xf0, 0xbd, 0xaf, 0xce, 0x0d, 0xdd, 0x86, 0xf1, 0xf8, 0x0c, 0x55, 0x84, 0x8b, 0x5a,
	0x84, 0x18, 0x8c, 0x13, 0xa8, 0xf5, 0x25, 0x4c, 0x8a, 0x38, 0x7b, 0xe2, 0x0c, 0xd0, 0x06, 0x8c,
	0xca, 0xd3, 0x50, 0x31, 0x2e, 0x68, 0x31, 0x24, 0x10, 0x2b, 0x98, 0xc5, 0x61, 0x21, 0xe3, 0xbf,
	0xc9, 0x39, 0x73, 0x5b, 0x3d, 0x4e, 0xd1, 0xf7, 0xb0, 0x18, 0xe4, 0x55, 0x98, 0xda, 0x3e, 0x8b,
	0xb3, 0x5b, 0x2d, 0x89, 0x5b, 0x40, 0x63, 0x73, 0x90, 0xec, 0xae, 0xfb, 0x94, 0xa9, 0x5d, 0xf7,
	0x29, 0x1b, 0xb4, 0xeb, 0x3e, 0x65, 0x58, 0xc1, 0xac, 0x2d, 0x98, 0x12, 0xfe, 0x58, 0xd6, 0x16,
	0xba, 0x09, 0x63, 0xaa, 0xcc, 0x54, 0x84, 0x9a, 0x16, 0x41, 0x41, 0x71, 0x0c, 0xb4, 0x9a, 0x6a,
	0x0f, 0xfb, 0x02, 0x80, 0x6e, 0xc3, 0x84, 0x84, 0xf6, 0x18, 0x2d, 0xdd, 0x86, 0xc4, 0xe2, 0x14,
	0x99, 0xf0, 0x27, 0x2d, 0x39, 0xfe, 0xc2, 0xbc, 0xea, 0x14, 0xfe, 0xf6, 0x4d, 0x68, 0x6c, 0x0e,
	0x62, 0xfd, 0x00, 0xf3, 0x99, 0x55, 0x9b, 0xf4, 0x90, 0x7a, 0x0e, 0x65, 0x68, 0x07, 0xaa, 0x61,
	0x4e, 0xa3, 0x56, 0x5b, 0x29, 0x59, 0x2d, 0x86, 0xe1, 0x82, 0x5b, 0xd2, 0x65, 0x12, 0x76, 0xd0,
	0x0f, 0x68, 0xd4, 0x65, 0x61, 0x22, 0x95, 0x76, 0x59, 0xea, 0x80, 0x33, 0xf0, 0x34, 0x5e, 0xd2,
	0xce, 0x22, 0x5e, 0x22, 0x95, 0xc7, 0x4b, 0x20, 0x38, 0x03, 0xb7, 0x9e, 0xc0, 0x84, 0x88, 0x77,
	0xe0, 0x76, 0x29, 0xfa, 0x0a, 0x66, 0x68, 0x2c, 0x34, 0x29, 0x27, 0x6e, 0x47, 0x85, 0x6b, 0x68,
	0xe1, 0xee, 0xe6, 0x71, 0xb8, 0xe8, 0x68, 0x3d, 0x53, 0x1b, 0x4d, 0x55, 0xa8, 0x01, 0x93, 0xad,
	0x8e, 0x6f, 0x1f, 0xef, 0x52, 0xb7, 0x7d, 0x24, 0xfb, 0x6a, 0x18, 0x67, 0x55, 0x68, 0x0b, 0x26,
	0x84, 0x18, 0x39, 0xd5, 0xce, 0x89, 0xa5, 0x97, 0xd7, 0xe5, 0xc5, 0xb2, 0x1e, 0x5f, 0x2c, 0xeb,
	0x07, 0xf1, 0xc5, 0xb2, 0x35, 0xfe, 0xe2, 0xd5, 0xca, 0xd0, 0xf3, 0xbf, 0x57, 0x2a, 0x38, 0x75,
	0xb3, 0x7e, 0x54, 0x0b, 0xef, 0x25, 0xb3, 0x18, 0x3d, 0x80, 0xd9, 0x74, 0x32, 0xe7, 0xaa, 0xe7,
	0x3d, 0xbd, 0x3f, 0x0a, 0x40, 0xac, 0xb9, 0x5a, 0xbb, 0x8a, 0xb3, 0x1d, 0xe6, 0x3a, 0x11, 0xfb,
	0xd1, 0x55, 0x93, 0x8b, 0xaa, 0xb3, 0xbf, 0x93, 0x40, 0x70, 0x06, 0x6e, 0x7d, 0xa0, 0x3a, 0xa7,
	0x49, 0x3b, 0x94, 0x53, 0xb4, 0x0c, 0xe3, 0x7e, 0xeb, 0x27, 0x6a, 0xf3, 0xfb, 0x32, 0xd2, 0x04,
	0x4e, 0x64, 0xcb, 0x83, 0x0b, 0x72, 0x5c, 0xcb, 0x5b, 0x73, 0x33, 0x0c, 0x7d, 0xdb, 0x95, 0x05,
	0xb0, 0x0f, 0x88, 0x68, 0x5a, 0xb5, 0x95, 0xab, 0xfa, 0xf8, 0xd6, 0xa0, 0xd8, 0xe0, 0x6e, 0xb5,
	0x54, 0x3b, 0xc6, 0x70, 0x9b, 0xbb, 0x27, 0x2e, 0xef, 0x47, 0x35, 0x42, 0xf2, 0xaa, 0xd2, 0x1a,
	0x29, 0xb8, 0xe2, 0xa2, 0xa3, 0xf5, 0x5b, 0x05, 0x56, 0xd2, 0xb9, 0xff, 0x80, 0x76, 0x5b, 0x94,
	0x85, 0x47, 0x6e, 0xb0, 0x19, 0x04, 0x1d, 0x57, 0xdd, 0x49, 0xc7, 0xb0, 0xdc, 0x2e, 0xb5, 0xaa,
	0xa5, 0x3f, 0x32, 0xdf, 0x10, 0x46, 0x17, 0x3c, 0x20, 0x9c, 0x65, 0xab, 0x69, 0xf8, 0x90, 0xd1,
	0x07, 0xae, 0x47, 0x23, 0x66, 0x69, 0x46, 0xce, 0xf5, 0xc4, 0x55, 0x73, 0x4f, 0xe4, 0xa0, 0xd8,
	0xe0, 0x6e, 0x05, 0x80, 0x74, 0x64, 0x74, 0xf6, 0x72, 0x24, 0xa7, 0x67, 0x1f, 0xcb, 0x68, 0x15,
	0xaa, 0x01, 0x73, 0xbb, 0x84, 0xf5, 0x15, 0xa5, 0xa2, 0x37, 0x26, 0x70, 0x41, 0x8b, 0x96, 0x60,
	0x94, 0x74, 0xfd, 0x9e, 0xc7, 0x6b, 0xc3, 0x8d, 0xca, 0xda, 0x79, 0xac, 0x24, 0x2b, 0x84, 0x59,
	0x75, 0xd5, 0x07, 0x47, 0x04, 0xd3, 0xc3, 0x28, 0xb5, 0xa7, 0xb0, 0x44, 0x0b, 0xba, 0x5c, 0x7a,
	0xef, 0x9b, 0xd3, 0xd3, 0xe0, 0xb8, 0x24, 0x8c, 0xc5, 0x61, 0xc9, 0xec, 0xf1, 0xee, 0x52, 0x15,
	0xb7, 0x7c, 0x21, 0x55, 0xa9, 0x3b, 0x73, 0xaa, 0x59, 0x38, 0x2e, 0x09, 0x93, 0x4f, 0x35, 0x6b,
	0x79, 0x77, 0xa9, 0x36, 0xa9, 0x9e, 0xaa, 0xd4, 0x9d, 0x39, 0xd5, 0x2c, 0x1c, 0x97, 0x84, 0xb1,
	0xbe, 0xcd, 0xa6, 0x9a, 0xb5, 0x18, 0xd2, 0xa9, 0x9c, 0x92, 0xce, 0xb9, 0x5c, 0x3a, 0x6d, 0xf5,
	0x1c, 0xf7, 0x90, 0xd1, 0x83, 0x23, 0x7a, 0xc8, 0xd1, 0x63, 0x98, 0xa7, 0x59, 0x45, 0x2e, 0x91,
	0x6b, 0xa5, 0xdd, 0x97, 0xc1, 0x62, 0x53, 0x00, 0xeb, 0xdf, 0x8a, 0xba, 0xf3, 0xf3, 0x7a, 0x74,
	0x13, 0x16, 0x4e, 0x5c, 0x9b, 0xbb, 0xdd, 0x3d, 0x53, 0x1a, 0x46, 0x5b, 0x94, 0xb4, 0xd2, 0xc7,
	0xa7, 0xac, 0xce, 0x30, 0xaf, 0x45, 0x9f, 0xc0, 0x3c, 0x3f, 0x72, 0xe9, 0x61, 0x21, 0xf4, 0xb0,
	0x00, 0x9b, 0x4c, 0xe8, 0x1a, 0x4c, 0x4b, 0x75, 0x1c, 0xf8, 0xbc, 0xc0, 0xe6, 0x95, 0x19, 0x32,
	0x47, 0x72, 0x64, 0xfa, 0xea, 0x12, 0x14, 0x33, 0xa6, 0xcd, 0x88, 0x7c, 0x8e, 0xa2, 0x79, 0x55,
	0x8e, 0xd0, 0xd5, 0x01, 0xe3, 0x2c, 0x83, 0xc6, 0xe6, 0x20, 0xd6, 0x1f, 0x15, 0x58, 0x34, 0x3a,
	0xfc, 0x2f, 0x2d, 0x70, 0x1d, 0xe6, 0xfc, 0x8e, 0x63, 0x24, 0x4f, 0x37, 0x64, 0x48, 0x39, 0x9f,
	0x23, 0xe5, 0xa9, 0xba, 0x6d, 0x37, 0x39, 0x27, 0xf6, 0x31, 0xda, 0x83, 0x39, 0x9a, 0x8a, 0x39,
	0x32, 0xac, 0x92, 0x36, 0xc9, 0x20, 0xb1, 0xee, 0x6c, 0xfd, 0x3e, 0x0a, 0x73, 0x1a, 0x10, 0x7d,
	0x08, 0xb3, 0x44, 0xc8, 0x94, 0xc9, 0x87, 0xba, 0x84, 0x08, 0x4d, 0x8f, 0xee, 0xc2, 0xd4, 0x33,
	0x4a, 0x02, 0xdf, 0xdb, 0xef, 0x87, 0x9c, 0x76, 0x05, 0x1d, 0x55, 0xc3, 0x53, 0x0a, 0xa7, 0xf6,
	0xd1, 0x93, 0x0c, 0x10, 0xe7, 0xdc, 0xd0, 0x2e, 0x4c, 0x4b, 0x79, 0xdb, 0xf7, 0x38, 0xf3, 0x3b,
	0x82, 0xab, 0xaa, 0x21, 0xad, 0x34, 0x8e, 0x42, 0xe2, 0xbc, 0x23, 0xfa, 0x1a, 0xaa, 0x24, 0xba,
	0xae, 0xa9, 0x44, 0xb1, 0xbe, 0xe0, 0xb4, 0x6a, 0xb8, 0xfd, 0xa2, 0x50, 0x9b, 0x39, 0x28, 0x2e,
	0xb8, 0x26, 0x25, 0x28, 0xe9, 0xd9, 0x3f, 0xf2, 0xe3, 0x9e, 0x1e, 0x69, 0x0c, 0x97, 0x97, 0x60,
	0x11, 0x8d, 0xcd, 0x41, 0xd0, 0x67, 0xb0, 0xc4, 0xa8, 0xed, 0xbb, 0x9d, 0x26, 0xe9, 0x92, 0x36,
	0x3d, 0xf0, 0x37, 0x15, 0xbb, 0xb5, 0xd1, 0x46, 0x65, 0x6d, 0x1c, 0x97, 0x58, 0x91, 0x05, 0x53,
	0x59, 0x4b, 0x6d, 0x4c, 0x14, 0x4d, 0x4e, 0x87, 0x9a, 0x70, 0x25, 0x2b, 0x37, 0x69, 0xc8, 0x99,
	0xdf, 0xa7, 0x4e, 0xb2, 0xc4, 0xb8, 0x58, 0x62, 0x30, 0x08, 0x3d, 0x86, 0x55, 0xf9, 0x16, 0x47,
	0x58, 0x5f, 0xbc, 0x21, 0x84, 0x74, 0x9b, 0x78, 0x9e, 0xef, 0x69, 0x3b, 0x9e, 0x10, 0xe1, 0xce,
	0x88, 0x46, 0x5b, 0x70, 0x79, 0x10, 0xb2, 0x06, 0x22, 0xa3, 0x81, 0x18, 0xe4, 0xc0, 0xc7, 0x83,
	0xec, 0x7a, 0xc6, 0x93, 0x62, 0x8b, 0x6f, 0xe7, 0x64, 0xbd, 0x02, 0x35, 0x26, 0xb4, 0xd3, 0x5b,
	0x85, 0x2a, 0x27, 0xac, 0x4d, 0x79, 0xa1, 0x47, 0x0a, 0xda, 0xa8, 0xb9, 0xe9, 0x09, 0x71, 0xa8,
	0x9c, 0xb4, 0xe3, 0x58, 0x49, 0x68, 0x1b, 0x26, 0xe5, 0xbf, 0x6d, 0xd2, 0x0b, 0xa9, 0x2a, 0x78,
	0x73, 0xe3, 0x3c, 0xf2, 0x5c, 0xae, 0x76, 0x1b, 0xe2, 0xac, 0x17, 0xfa, 0x02, 0x2e, 0x4a, 0x71,
	0xab, 0xbf, 0x57, 0xc8, 0x2b, 0x14, 0x85, 0x3f, 0x8e, 0xcb, 0x01, 0xc8, 0x83, 0x7a, 0xa9, 0x51,
	0xee, 0x6a, 0x44, 0xec, 0x6a, 0xd5, 0xb8, 0x2b, 0xcd, 0x05, 0x9f, 0x12, 0x0d, 0xd5, 0x60, 0x4c,
	0xbc, 0xf6, 0x50, 0x47, 0x55, 0x78, 0x2c, 0x46, 0xf3, 0x52, 0xfd, 0xdd, 0xea, 0x27, 0x7c, 0x8e,
	0xc9, 0x79, 0xa9, 0x19, 0xa2, 0x01, 0x25, 0x95, 0x2c, 0x39, 0x30, 0x55, 0xcf, 0x9a, 0x1e, 0xfd,
	0x0a, 0x8d, 0xdc, 0xdc, 0x93, 0xaf, 0xb9, 0xdb, 0xd1, 0x7c, 0x8d, 0x60, 0xa2, 0x9b, 0x27, 0x44,
	0x37, 0xdf, 0x18, 0x3c, 0x43, 0x0d, 0x8e, 0xf8, 0xd4, 0xd0, 0xd1, 0x2b, 0xa4, 0xa3, 0x4a, 0x8b,
	0x74, 0xb8, 0x2a, 0xec, 0xac, 0x0a, 0xad, 0xc1, 0x8c, 0x14, 0x31, 0x75, 0x7a, 0xb6, 0x78, 0x49,
	0x98, 0x14, 0xa8, 0xa2, 0x1a, 0x3d, 0x82, 0x85, 0x82, 0x4a, 0x1e, 0xd2, 0xd4, 0x59, 0x4b, 0xc7,
	0xe8, 0x1e, 0x15, 0xa8, 0xd4, 0xd7, 0xa6, 0xe5, 0xed, 0x23, 0xa5, 0x68, 0x63, 0xb2, 0x94, 0x55,
	0x46, 0xd4, 0xa9, 0x55, 0x05, 0xc9, 0x45, 0x35, 0xfa, 0x14, 0x16, 0x0b, 0x2a, 0xd5, 0xc7, 0x33,
	0x22, 0xa0, 0xd9, 0x88, 0xee, 0x41, 0x3d, 0x67, 0xd0, 0x3b, 0x76, 0x56, 0x2c, 0x77, 0x0a, 0x0a,
	0x1d, 0x00, 0xca, 0x21, 0x24, 0x29, 0x73, 0x82, 0x94, 0x6b, 0xe6, 0xca, 0x25, 0x61, 0x98, 0x1d,
	0xfb, 0x06, 0xff, 0x34, 0xfb, 0xb4, 0xc4, 0x50, 0x36, 0xfb, 0xb4, 0xc2, 0x76, 0x61, 0x25, 0xf0,
	0x43, 0xa9, 0x90, 0xbc, 0x6a, 0xd3, 0x71, 0x5e, 0x78, 0x9e, 0x06, 0x8b, 0x78, 0x34, 0x42, 0x6a,
	0x0b, 0x92, 0x47, 0xa3, 0x51, 0x0c, 0x69, 0x93, 0x41, 0xe7, 0x73, 0x51, 0x0d, 0xe9, 0x33, 0xa1,
	0x91, 0x03, 0xcb, 0x46, 0xa4, 0xe4, 0x77, 0xe9, 0x2d, 0xf8, 0x1d, 0x10, 0xc7, 0xfa, 0xb3, 0x02,
	0x8d, 0xd3, 0xfa, 0x2c, 0x1a, 0x0f, 0xb6, 0x54, 0x64, 0xc6, 0x83, 0x1c, 0xb7, 0xba, 0x21, 0x7a,
	0x12, 0x55, 0x4a, 0x45, 0x9f, 0x7c, 0x6e, 0xcf, 0x2b, 0xd1, 0x1d, 0xa8, 0xd9, 0x65, 0x85, 0x37,
	0x2c, 0x88, 0x2a, 0xb5, 0x27, 0x1f, 0xa1, 0x30, 0x71, 0x9d, 0xe4, 0x23, 0x54, 0x24, 0x9c, 0xe5,
	0x23, 0x54, 0x8a, 0xc3, 0x45, 0x47, 0xeb, 0x17, 0xf5, 0x18, 0x9c, 0xaa, 0xa2, 0xa1, 0x29, 0xbe,
	0x39, 0x27, 0x19, 0xc7, 0xa2, 0x7a, 0x50, 0xf5, 0x84, 0xe9, 0x5c, 0xf2, 0xa0, 0x2a, 0x64, 0x74,
	0x0b, 0x46, 0x43, 0x4e, 0x78, 0x2f, 0x54, 0x17, 0x8b, 0xfe, 0x85, 0x87, 0x11, 0xd7, 0xd9, 0x17,
	0x10, 0xac, 0xa0, 0x5b, 0x37, 0x5e, 0xbc, 0xae, 0x57, 0x5e, 0xbe, 0xae, 0x57, 0xfe, 0x79, 0x5d,
	0xaf, 0x3c, 0x7f, 0x53, 0x1f, 0x7a, 0xf9, 0xa6, 0x3e, 0xf4, 0xd7, 0x9b, 0xfa, 0xd0, 0x77, 0x17,
	0xe2, 0xaf, 0xf2, 0x3f, 0x27, 0xdf, 0xe7, 0x79, 0x3f, 0xa0, 0x61, 0x6b, 0x54, 0x7c, 0xe5, 0xba,
	0xf5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0xff, 0x3d, 0x97, 0xcf, 0x19, 0x00, 0x00,
}

func (m *EventAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Allocation != nil {
		{
			size, err := m.Allocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFleet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFleet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFleet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fleet != nil {
		{
			size, err := m.Fleet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGuild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGuild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGuild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Guild != nil {
		{
			size, err := m.Guild.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventInfusion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInfusion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInfusion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Infusion != nil {
		{
			size, err := m.Infusion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPlanet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPlanet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPlanet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Planet != nil {
		{
			size, err := m.Planet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPlanetAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPlanetAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPlanetAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetAttributeRecord != nil {
		{
			size, err := m.PlanetAttributeRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		{
			size, err := m.Player.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventReactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventReactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reactor != nil {
		{
			size, err := m.Reactor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Structure != nil {
		{
			size, err := m.Structure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStructAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStructAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStructAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructAttributeRecord != nil {
		{
			size, err := m.StructAttributeRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStructDefender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStructDefender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStructDefender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructDefender != nil {
		{
			size, err := m.StructDefender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStructType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStructType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStructType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructType != nil {
		{
			size, err := m.StructType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSubstation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSubstation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSubstation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Substation != nil {
		{
			size, err := m.Substation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventTimeDetail != nil {
		{
			size, err := m.EventTimeDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventTimeDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTimeDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventTimeDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n15, err15 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintEvents(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x12
	if m.BlockHeight != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PermissionRecord != nil {
		{
			size, err := m.PermissionRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGrid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGrid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGrid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GridRecord != nil {
		{
			size, err := m.GridRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObjectId) > 0 {
		i -= len(m.ObjectId)
		copy(dAtA[i:], m.ObjectId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ObjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddressAssociation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddressAssociation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddressAssociation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressAssociation != nil {
		{
			size, err := m.AddressAssociation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAddressActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddressActivity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddressActivity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressActivity != nil {
		{
			size, err := m.AddressActivity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGuildMembershipApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGuildMembershipApplication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGuildMembershipApplication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GuildMembershipApplication != nil {
		{
			size, err := m.GuildMembershipApplication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOreMine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOreMine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOreMine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventOreMineDetail != nil {
		{
			size, err := m.EventOreMineDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOreMineDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOreMineDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOreMineDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAlphaRefine) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlphaRefine) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlphaRefine) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventAlphaRefineDetail != nil {
		{
			size, err := m.EventAlphaRefineDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAlphaRefineDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlphaRefineDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlphaRefineDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAlphaInfuse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlphaInfuse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlphaInfuse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventAlphaInfuseDetail != nil {
		{
			size, err := m.EventAlphaInfuseDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAlphaInfuseDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlphaInfuseDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlphaInfuseDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAlphaDefuse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlphaDefuse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlphaDefuse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventAlphaDefuseDetail != nil {
		{
			size, err := m.EventAlphaDefuseDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAlphaDefuseDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAlphaDefuseDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAlphaDefuseDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOreTheft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOreTheft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOreTheft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventOreTheftDetail != nil {
		{
			size, err := m.EventOreTheftDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOreTheftDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOreTheftDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOreTheftDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ThiefPlayerId) > 0 {
		i -= len(m.ThiefPlayerId)
		copy(dAtA[i:], m.ThiefPlayerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ThiefPlayerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ThiefPrimaryAddress) > 0 {
		i -= len(m.ThiefPrimaryAddress)
		copy(dAtA[i:], m.ThiefPrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ThiefPrimaryAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VictimPlayerId) > 0 {
		i -= len(m.VictimPlayerId)
		copy(dAtA[i:], m.VictimPlayerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VictimPlayerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VictimPrimaryAddress) > 0 {
		i -= len(m.VictimPrimaryAddress)
		copy(dAtA[i:], m.VictimPrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VictimPrimaryAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOreMigrate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOreMigrate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOreMigrate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventOreMigrateDetail != nil {
		{
			size, err := m.EventOreMigrateDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOreMigrateDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOreMigrateDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOreMigrateDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OldPrimaryAddress) > 0 {
		i -= len(m.OldPrimaryAddress)
		copy(dAtA[i:], m.OldPrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldPrimaryAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlayerId) > 0 {
		i -= len(m.PlayerId)
		copy(dAtA[i:], m.PlayerId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PlayerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventAttackDetail != nil {
		{
			size, err := m.EventAttackDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttackDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttackDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttackDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanetaryDefenseCannonDamageDestroyedAttacker {
		i--
		if m.PlanetaryDefenseCannonDamageDestroyedAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.PlanetaryDefenseCannonDamage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PlanetaryDefenseCannonDamage))
		i--
		dAtA[i] = 0x50
	}
	if m.PlanetaryDefenseCannonDamageToAttacker {
		i--
		if m.PlanetaryDefenseCannonDamageToAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.RecoilDamageDestroyedAttacker {
		i--
		if m.RecoilDamageDestroyedAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.RecoilDamage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RecoilDamage))
		i--
		dAtA[i] = 0x38
	}
	if m.RecoilDamageToAttacker {
		i--
		if m.RecoilDamageToAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.EventAttackShotDetail) > 0 {
		for iNdEx := len(m.EventAttackShotDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventAttackShotDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ActiveWeaponry != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ActiveWeaponry))
		i--
		dAtA[i] = 0x20
	}
	if m.WeaponControl != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.WeaponControl))
		i--
		dAtA[i] = 0x18
	}
	if m.WeaponSystem != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.WeaponSystem))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttackerStructId) > 0 {
		i -= len(m.AttackerStructId)
		copy(dAtA[i:], m.AttackerStructId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AttackerStructId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttackShotDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttackShotDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttackShotDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PostDestructionDamageCause != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PostDestructionDamageCause))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.PostDestructionDamageDestroyedAttacker {
		i--
		if m.PostDestructionDamageDestroyedAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.PostDestructionDamage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PostDestructionDamage))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.PostDestructionDamageToAttacker {
		i--
		if m.PostDestructionDamageToAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.TargetDestroyed {
		i--
		if m.TargetDestroyed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.TargetCounterCause != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TargetCounterCause))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TargetCounterDestroyedAttacker {
		i--
		if m.TargetCounterDestroyedAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.TargetCounteredDamage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TargetCounteredDamage))
		i--
		dAtA[i] = 0x78
	}
	if m.TargetCountered {
		i--
		if m.TargetCountered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.Damage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Damage))
		i--
		dAtA[i] = 0x68
	}
	if m.DamageReductionCause != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DamageReductionCause))
		i--
		dAtA[i] = 0x60
	}
	if m.DamageReduction != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DamageReduction))
		i--
		dAtA[i] = 0x58
	}
	if m.DamageDealt != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DamageDealt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.EventAttackDefenderCounterDetail) > 0 {
		for iNdEx := len(m.EventAttackDefenderCounterDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventAttackDefenderCounterDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.BlockerDestroyed {
		i--
		if m.BlockerDestroyed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlockedByStructId) > 0 {
		i -= len(m.BlockedByStructId)
		copy(dAtA[i:], m.BlockedByStructId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BlockedByStructId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Blocked {
		i--
		if m.Blocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.EvadedByPlanetaryDefensesCause != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EvadedByPlanetaryDefensesCause))
		i--
		dAtA[i] = 0x28
	}
	if m.EvadedByPlanetaryDefenses {
		i--
		if m.EvadedByPlanetaryDefenses {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.EvadedCause != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EvadedCause))
		i--
		dAtA[i] = 0x18
	}
	if m.Evaded {
		i--
		if m.Evaded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TargetStructId) > 0 {
		i -= len(m.TargetStructId)
		copy(dAtA[i:], m.TargetStructId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TargetStructId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAttackDefenderCounterDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAttackDefenderCounterDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAttackDefenderCounterDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CounterDestroyedAttacker {
		i--
		if m.CounterDestroyedAttacker {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.CounterDamage != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CounterDamage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CounterByStructId) > 0 {
		i -= len(m.CounterByStructId)
		copy(dAtA[i:], m.CounterByStructId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CounterByStructId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRaid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRaid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRaid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventRaidDetail != nil {
		{
			size, err := m.EventRaidDetail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventRaidDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRaidDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRaidDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlanetId) > 0 {
		i -= len(m.PlanetId)
		copy(dAtA[i:], m.PlanetId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PlanetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FleetId) > 0 {
		i -= len(m.FleetId)
		copy(dAtA[i:], m.FleetId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FleetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allocation != nil {
		l = m.Allocation.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFleet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fleet != nil {
		l = m.Fleet.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGuild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventInfusion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Infusion != nil {
		l = m.Infusion.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPlanet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Planet != nil {
		l = m.Planet.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPlanetAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanetAttributeRecord != nil {
		l = m.PlanetAttributeRecord.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventReactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reactor != nil {
		l = m.Reactor.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Structure != nil {
		l = m.Structure.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventStructAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StructAttributeRecord != nil {
		l = m.StructAttributeRecord.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventStructDefender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StructDefender != nil {
		l = m.StructDefender.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventStructType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StructType != nil {
		l = m.StructType.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSubstation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Substation != nil {
		l = m.Substation.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventTimeDetail != nil {
		l = m.EventTimeDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventTimeDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEvents(uint64(m.BlockHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermissionRecord != nil {
		l = m.PermissionRecord.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGrid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GridRecord != nil {
		l = m.GridRecord.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAddressAssociation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressAssociation != nil {
		l = m.AddressAssociation.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAddressActivity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressActivity != nil {
		l = m.AddressActivity.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGuildMembershipApplication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GuildMembershipApplication != nil {
		l = m.GuildMembershipApplication.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOreMine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventOreMineDetail != nil {
		l = m.EventOreMineDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOreMineDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	return n
}

func (m *EventAlphaRefine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventAlphaRefineDetail != nil {
		l = m.EventAlphaRefineDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAlphaRefineDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	return n
}

func (m *EventAlphaInfuse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventAlphaInfuseDetail != nil {
		l = m.EventAlphaInfuseDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAlphaInfuseDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	return n
}

func (m *EventAlphaDefuse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventAlphaDefuseDetail != nil {
		l = m.EventAlphaDefuseDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAlphaDefuseDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	return n
}

func (m *EventOreTheft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventOreTheftDetail != nil {
		l = m.EventOreTheftDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOreTheftDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VictimPrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.VictimPlayerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ThiefPrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ThiefPlayerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	return n
}

func (m *EventOreMigrate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventOreMigrateDetail != nil {
		l = m.EventOreMigrateDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOreMigrateDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlayerId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldPrimaryAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvents(uint64(m.Amount))
	}
	return n
}

func (m *EventAttack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventAttackDetail != nil {
		l = m.EventAttackDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAttackDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttackerStructId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.WeaponSystem != 0 {
		n += 1 + sovEvents(uint64(m.WeaponSystem))
	}
	if m.WeaponControl != 0 {
		n += 1 + sovEvents(uint64(m.WeaponControl))
	}
	if m.ActiveWeaponry != 0 {
		n += 1 + sovEvents(uint64(m.ActiveWeaponry))
	}
	if len(m.EventAttackShotDetail) > 0 {
		for _, e := range m.EventAttackShotDetail {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.RecoilDamageToAttacker {
		n += 2
	}
	if m.RecoilDamage != 0 {
		n += 1 + sovEvents(uint64(m.RecoilDamage))
	}
	if m.RecoilDamageDestroyedAttacker {
		n += 2
	}
	if m.PlanetaryDefenseCannonDamageToAttacker {
		n += 2
	}
	if m.PlanetaryDefenseCannonDamage != 0 {
		n += 1 + sovEvents(uint64(m.PlanetaryDefenseCannonDamage))
	}
	if m.PlanetaryDefenseCannonDamageDestroyedAttacker {
		n += 2
	}
	return n
}

func (m *EventAttackShotDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetStructId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Evaded {
		n += 2
	}
	if m.EvadedCause != 0 {
		n += 1 + sovEvents(uint64(m.EvadedCause))
	}
	if m.EvadedByPlanetaryDefenses {
		n += 2
	}
	if m.EvadedByPlanetaryDefensesCause != 0 {
		n += 1 + sovEvents(uint64(m.EvadedByPlanetaryDefensesCause))
	}
	if m.Blocked {
		n += 2
	}
	l = len(m.BlockedByStructId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.BlockerDestroyed {
		n += 2
	}
	if len(m.EventAttackDefenderCounterDetail) > 0 {
		for _, e := range m.EventAttackDefenderCounterDetail {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.DamageDealt != 0 {
		n += 1 + sovEvents(uint64(m.DamageDealt))
	}
	if m.DamageReduction != 0 {
		n += 1 + sovEvents(uint64(m.DamageReduction))
	}
	if m.DamageReductionCause != 0 {
		n += 1 + sovEvents(uint64(m.DamageReductionCause))
	}
	if m.Damage != 0 {
		n += 1 + sovEvents(uint64(m.Damage))
	}
	if m.TargetCountered {
		n += 2
	}
	if m.TargetCounteredDamage != 0 {
		n += 1 + sovEvents(uint64(m.TargetCounteredDamage))
	}
	if m.TargetCounterDestroyedAttacker {
		n += 3
	}
	if m.TargetCounterCause != 0 {
		n += 2 + sovEvents(uint64(m.TargetCounterCause))
	}
	if m.TargetDestroyed {
		n += 3
	}
	if m.PostDestructionDamageToAttacker {
		n += 3
	}
	if m.PostDestructionDamage != 0 {
		n += 2 + sovEvents(uint64(m.PostDestructionDamage))
	}
	if m.PostDestructionDamageDestroyedAttacker {
		n += 3
	}
	if m.PostDestructionDamageCause != 0 {
		n += 2 + sovEvents(uint64(m.PostDestructionDamageCause))
	}
	return n
}

func (m *EventAttackDefenderCounterDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CounterByStructId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CounterDamage != 0 {
		n += 1 + sovEvents(uint64(m.CounterDamage))
	}
	if m.CounterDestroyedAttacker {
		n += 2
	}
	return n
}

func (m *EventRaid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventRaidDetail != nil {
		l = m.EventRaidDetail.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRaidDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FleetId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PlanetId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEvents(uint64(m.Status))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Allocation == nil {
				m.Allocation = &Allocation{}
			}
			if err := m.Allocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFleet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFleet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFleet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fleet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fleet == nil {
				m.Fleet = &Fleet{}
			}
			if err := m.Fleet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGuild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGuild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGuild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &Guild{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventInfusion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInfusion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInfusion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infusion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infusion == nil {
				m.Infusion = &Infusion{}
			}
			if err := m.Infusion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPlanet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPlanet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPlanet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Planet == nil {
				m.Planet = &Planet{}
			}
			if err := m.Planet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPlanetAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPlanetAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPlanetAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetAttributeRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanetAttributeRecord == nil {
				m.PlanetAttributeRecord = &PlanetAttributeRecord{}
			}
			if err := m.PlanetAttributeRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &Player{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventReactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reactor == nil {
				m.Reactor = &Reactor{}
			}
			if err := m.Reactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Structure == nil {
				m.Structure = &Struct{}
			}
			if err := m.Structure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStructAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStructAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStructAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructAttributeRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StructAttributeRecord == nil {
				m.StructAttributeRecord = &StructAttributeRecord{}
			}
			if err := m.StructAttributeRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStructDefender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStructDefender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStructDefender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructDefender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StructDefender == nil {
				m.StructDefender = &StructDefender{}
			}
			if err := m.StructDefender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStructType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStructType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStructType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StructType == nil {
				m.StructType = &StructType{}
			}
			if err := m.StructType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSubstation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSubstation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSubstation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Substation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Substation == nil {
				m.Substation = &Substation{}
			}
			if err := m.Substation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTimeDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventTimeDetail == nil {
				m.EventTimeDetail = &EventTimeDetail{}
			}
			if err := m.EventTimeDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTimeDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTimeDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTimeDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PermissionRecord == nil {
				m.PermissionRecord = &PermissionRecord{}
			}
			if err := m.PermissionRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGrid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGrid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGrid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GridRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GridRecord == nil {
				m.GridRecord = &GridRecord{}
			}
			if err := m.GridRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddressAssociation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddressAssociation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddressAssociation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressAssociation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressAssociation == nil {
				m.AddressAssociation = &AddressAssociation{}
			}
			if err := m.AddressAssociation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddressActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddressActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddressActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressActivity == nil {
				m.AddressActivity = &AddressActivity{}
			}
			if err := m.AddressActivity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGuildMembershipApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGuildMembershipApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGuildMembershipApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMembershipApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuildMembershipApplication == nil {
				m.GuildMembershipApplication = &GuildMembershipApplication{}
			}
			if err := m.GuildMembershipApplication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOreMine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOreMine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOreMine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventOreMineDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventOreMineDetail == nil {
				m.EventOreMineDetail = &EventOreMineDetail{}
			}
			if err := m.EventOreMineDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOreMineDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOreMineDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOreMineDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlphaRefine) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlphaRefine: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlphaRefine: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAlphaRefineDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventAlphaRefineDetail == nil {
				m.EventAlphaRefineDetail = &EventAlphaRefineDetail{}
			}
			if err := m.EventAlphaRefineDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlphaRefineDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlphaRefineDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlphaRefineDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlphaInfuse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlphaInfuse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlphaInfuse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAlphaInfuseDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventAlphaInfuseDetail == nil {
				m.EventAlphaInfuseDetail = &EventAlphaInfuseDetail{}
			}
			if err := m.EventAlphaInfuseDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlphaInfuseDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlphaInfuseDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlphaInfuseDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlphaDefuse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlphaDefuse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlphaDefuse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAlphaDefuseDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventAlphaDefuseDetail == nil {
				m.EventAlphaDefuseDetail = &EventAlphaDefuseDetail{}
			}
			if err := m.EventAlphaDefuseDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAlphaDefuseDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAlphaDefuseDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAlphaDefuseDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOreTheft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOreTheft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOreTheft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventOreTheftDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventOreTheftDetail == nil {
				m.EventOreTheftDetail = &EventOreTheftDetail{}
			}
			if err := m.EventOreTheftDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOreTheftDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOreTheftDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOreTheftDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictimPrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VictimPrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VictimPlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VictimPlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThiefPrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThiefPrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThiefPlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThiefPlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOreMigrate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOreMigrate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOreMigrate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventOreMigrateDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventOreMigrateDetail == nil {
				m.EventOreMigrateDetail = &EventOreMigrateDetail{}
			}
			if err := m.EventOreMigrateDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOreMigrateDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOreMigrateDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOreMigrateDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAttackDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventAttackDetail == nil {
				m.EventAttackDetail = &EventAttackDetail{}
			}
			if err := m.EventAttackDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttackDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttackDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttackDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerStructId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerStructId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponSystem", wireType)
			}
			m.WeaponSystem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeaponSystem |= TechWeaponSystem(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponControl", wireType)
			}
			m.WeaponControl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeaponControl |= TechWeaponControl(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveWeaponry", wireType)
			}
			m.ActiveWeaponry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveWeaponry |= TechActiveWeaponry(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAttackShotDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventAttackShotDetail = append(m.EventAttackShotDetail, &EventAttackShotDetail{})
			if err := m.EventAttackShotDetail[len(m.EventAttackShotDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoilDamageToAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecoilDamageToAttacker = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoilDamage", wireType)
			}
			m.RecoilDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoilDamage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoilDamageDestroyedAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecoilDamageDestroyedAttacker = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetaryDefenseCannonDamageToAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlanetaryDefenseCannonDamageToAttacker = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetaryDefenseCannonDamage", wireType)
			}
			m.PlanetaryDefenseCannonDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetaryDefenseCannonDamage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetaryDefenseCannonDamageDestroyedAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PlanetaryDefenseCannonDamageDestroyedAttacker = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttackShotDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttackShotDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttackShotDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStructId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetStructId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evaded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Evaded = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvadedCause", wireType)
			}
			m.EvadedCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvadedCause |= TechUnitDefenses(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvadedByPlanetaryDefenses", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EvadedByPlanetaryDefenses = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvadedByPlanetaryDefensesCause", wireType)
			}
			m.EvadedByPlanetaryDefensesCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EvadedByPlanetaryDefensesCause |= TechPlanetaryDefenses(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blocked = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedByStructId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedByStructId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockerDestroyed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BlockerDestroyed = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventAttackDefenderCounterDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventAttackDefenderCounterDetail = append(m.EventAttackDefenderCounterDetail, &EventAttackDefenderCounterDetail{})
			if err := m.EventAttackDefenderCounterDetail[len(m.EventAttackDefenderCounterDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageDealt", wireType)
			}
			m.DamageDealt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageDealt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageReduction", wireType)
			}
			m.DamageReduction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageReduction |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageReductionCause", wireType)
			}
			m.DamageReductionCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DamageReductionCause |= TechUnitDefenses(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			m.Damage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Damage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCountered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetCountered = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCounteredDamage", wireType)
			}
			m.TargetCounteredDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCounteredDamage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCounterDestroyedAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetCounterDestroyedAttacker = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCounterCause", wireType)
			}
			m.TargetCounterCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetCounterCause |= TechPassiveWeaponry(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDestroyed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetDestroyed = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostDestructionDamageToAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostDestructionDamageToAttacker = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostDestructionDamage", wireType)
			}
			m.PostDestructionDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostDestructionDamage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostDestructionDamageDestroyedAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostDestructionDamageDestroyedAttacker = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostDestructionDamageCause", wireType)
			}
			m.PostDestructionDamageCause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PostDestructionDamageCause |= TechPassiveWeaponry(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAttackDefenderCounterDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAttackDefenderCounterDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAttackDefenderCounterDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterByStructId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterByStructId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterDamage", wireType)
			}
			m.CounterDamage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CounterDamage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterDestroyedAttacker", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CounterDestroyedAttacker = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRaid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRaid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRaid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRaidDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventRaidDetail == nil {
				m.EventRaidDetail = &EventRaidDetail{}
			}
			if err := m.EventRaidDetail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRaidDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRaidDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRaidDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FleetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FleetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RaidStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
