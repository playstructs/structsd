// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/fleet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Fleet struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                string      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	LocationType         ObjectType  `protobuf:"varint,3,opt,name=locationType,proto3,enum=structs.structs.ObjectType" json:"locationType,omitempty"`
	LocationId           string      `protobuf:"bytes,4,opt,name=locationId,proto3" json:"locationId,omitempty"`
	Status               FleetStatus `protobuf:"varint,5,opt,name=status,proto3,enum=structs.structs.FleetStatus" json:"status,omitempty"`
	LocationListForward  string      `protobuf:"bytes,6,opt,name=locationListForward,proto3" json:"locationListForward,omitempty"`
	LocationListBackward string      `protobuf:"bytes,7,opt,name=locationListBackward,proto3" json:"locationListBackward,omitempty"`
	Space                []string    `protobuf:"bytes,8,rep,name=space,proto3" json:"space,omitempty"`
	Air                  []string    `protobuf:"bytes,9,rep,name=air,proto3" json:"air,omitempty"`
	Land                 []string    `protobuf:"bytes,10,rep,name=land,proto3" json:"land,omitempty"`
	Water                []string    `protobuf:"bytes,11,rep,name=water,proto3" json:"water,omitempty"`
	SpaceSlots           uint64      `protobuf:"varint,12,opt,name=spaceSlots,proto3" json:"spaceSlots,omitempty"`
	AirSlots             uint64      `protobuf:"varint,13,opt,name=airSlots,proto3" json:"airSlots,omitempty"`
	LandSlots            uint64      `protobuf:"varint,14,opt,name=landSlots,proto3" json:"landSlots,omitempty"`
	WaterSlots           uint64      `protobuf:"varint,15,opt,name=waterSlots,proto3" json:"waterSlots,omitempty"`
}

func (m *Fleet) Reset()         { *m = Fleet{} }
func (m *Fleet) String() string { return proto.CompactTextString(m) }
func (*Fleet) ProtoMessage()    {}
func (*Fleet) Descriptor() ([]byte, []int) {
	return fileDescriptor_61dd153853b86e53, []int{0}
}
func (m *Fleet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fleet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fleet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fleet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fleet.Merge(m, src)
}
func (m *Fleet) XXX_Size() int {
	return m.Size()
}
func (m *Fleet) XXX_DiscardUnknown() {
	xxx_messageInfo_Fleet.DiscardUnknown(m)
}

var xxx_messageInfo_Fleet proto.InternalMessageInfo

func (m *Fleet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Fleet) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Fleet) GetLocationType() ObjectType {
	if m != nil {
		return m.LocationType
	}
	return ObjectType_guild
}

func (m *Fleet) GetLocationId() string {
	if m != nil {
		return m.LocationId
	}
	return ""
}

func (m *Fleet) GetStatus() FleetStatus {
	if m != nil {
		return m.Status
	}
	return FleetStatus_onStation
}

func (m *Fleet) GetLocationListForward() string {
	if m != nil {
		return m.LocationListForward
	}
	return ""
}

func (m *Fleet) GetLocationListBackward() string {
	if m != nil {
		return m.LocationListBackward
	}
	return ""
}

func (m *Fleet) GetSpace() []string {
	if m != nil {
		return m.Space
	}
	return nil
}

func (m *Fleet) GetAir() []string {
	if m != nil {
		return m.Air
	}
	return nil
}

func (m *Fleet) GetLand() []string {
	if m != nil {
		return m.Land
	}
	return nil
}

func (m *Fleet) GetWater() []string {
	if m != nil {
		return m.Water
	}
	return nil
}

func (m *Fleet) GetSpaceSlots() uint64 {
	if m != nil {
		return m.SpaceSlots
	}
	return 0
}

func (m *Fleet) GetAirSlots() uint64 {
	if m != nil {
		return m.AirSlots
	}
	return 0
}

func (m *Fleet) GetLandSlots() uint64 {
	if m != nil {
		return m.LandSlots
	}
	return 0
}

func (m *Fleet) GetWaterSlots() uint64 {
	if m != nil {
		return m.WaterSlots
	}
	return 0
}

type FleetAttributeRecord struct {
	AttributeId string `protobuf:"bytes,1,opt,name=attributeId,proto3" json:"attributeId,omitempty"`
	Value       uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *FleetAttributeRecord) Reset()         { *m = FleetAttributeRecord{} }
func (m *FleetAttributeRecord) String() string { return proto.CompactTextString(m) }
func (*FleetAttributeRecord) ProtoMessage()    {}
func (*FleetAttributeRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_61dd153853b86e53, []int{1}
}
func (m *FleetAttributeRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FleetAttributeRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FleetAttributeRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FleetAttributeRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FleetAttributeRecord.Merge(m, src)
}
func (m *FleetAttributeRecord) XXX_Size() int {
	return m.Size()
}
func (m *FleetAttributeRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_FleetAttributeRecord.DiscardUnknown(m)
}

var xxx_messageInfo_FleetAttributeRecord proto.InternalMessageInfo

func (m *FleetAttributeRecord) GetAttributeId() string {
	if m != nil {
		return m.AttributeId
	}
	return ""
}

func (m *FleetAttributeRecord) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Fleet)(nil), "structs.structs.Fleet")
	proto.RegisterType((*FleetAttributeRecord)(nil), "structs.structs.FleetAttributeRecord")
}

func init() { proto.RegisterFile("structs/structs/fleet.proto", fileDescriptor_61dd153853b86e53) }

var fileDescriptor_61dd153853b86e53 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x26, 0x2d, 0xd7, 0x77, 0x47, 0x0f, 0x4c, 0x25, 0xac, 0xdc, 0x29, 0x8a, 0x6e,
	0xea, 0x94, 0x83, 0x83, 0x1d, 0xd1, 0xa1, 0x52, 0x25, 0xc4, 0x90, 0x32, 0xb1, 0xb9, 0x89, 0x91,
	0x4c, 0x43, 0x1c, 0xd9, 0x0e, 0xa5, 0xdf, 0x82, 0x8f, 0xc5, 0xd8, 0x91, 0x11, 0xb5, 0xdf, 0x81,
	0x19, 0xf9, 0xb9, 0x69, 0x43, 0xaf, 0x4b, 0xec, 0xff, 0xef, 0xff, 0xde, 0x3f, 0xb1, 0xf3, 0xe0,
	0x46, 0x1b, 0x55, 0x67, 0x46, 0xdf, 0x37, 0xeb, 0x97, 0x82, 0x73, 0x93, 0x54, 0x4a, 0x1a, 0x49,
	0xae, 0xf7, 0x30, 0xd9, 0xaf, 0x61, 0x78, 0x5a, 0xbd, 0xe4, 0x6b, 0xed, 0x8a, 0xc3, 0xe7, 0xec,
	0x9b, 0x28, 0xe5, 0x3d, 0x3e, 0x1d, 0xba, 0xfb, 0xeb, 0x43, 0x6f, 0x6a, 0xf3, 0xc8, 0x10, 0xba,
	0x22, 0xa7, 0x5e, 0xec, 0x8d, 0x07, 0x69, 0x57, 0xe4, 0x64, 0x04, 0x3d, 0xb9, 0x2a, 0xb9, 0xa2,
	0x5d, 0x44, 0x4e, 0x90, 0x77, 0x70, 0x55, 0xc8, 0x8c, 0x19, 0x21, 0xcb, 0x4f, 0xeb, 0x8a, 0x53,
	0x3f, 0xf6, 0xc6, 0xc3, 0x87, 0x9b, 0xe4, 0xe4, 0x33, 0x12, 0xb9, 0xf8, 0xca, 0x33, 0x63, 0x4b,
	0xd2, 0xff, 0x1a, 0x48, 0x04, 0xd0, 0xe8, 0x59, 0x4e, 0x03, 0xcc, 0x6e, 0x11, 0xf2, 0x16, 0xfa,
	0xda, 0x30, 0x53, 0x6b, 0xda, 0xc3, 0xe8, 0xdb, 0x47, 0xd1, 0x78, 0xfc, 0x39, 0xd6, 0xa4, 0xfb,
	0x5a, 0xf2, 0x0a, 0x5e, 0x34, 0x19, 0x1f, 0x84, 0x36, 0x53, 0xa9, 0x56, 0x4c, 0xe5, 0xb4, 0x8f,
	0xf1, 0xe7, 0x2c, 0xf2, 0x00, 0xa3, 0x36, 0x9e, 0xb0, 0x6c, 0x89, 0x2d, 0x4f, 0xb0, 0xe5, 0xac,
	0x67, 0xaf, 0x44, 0x57, 0x2c, 0xe3, 0xf4, 0x22, 0xf6, 0xed, 0x95, 0xa0, 0x20, 0xcf, 0xc0, 0x67,
	0x42, 0xd1, 0x01, 0x32, 0xbb, 0x25, 0x04, 0x82, 0x82, 0x95, 0x39, 0x05, 0x44, 0xb8, 0xb7, 0xbd,
	0x2b, 0x66, 0xb8, 0xa2, 0x97, 0xae, 0x17, 0x85, 0xbd, 0x0d, 0x0c, 0x99, 0x17, 0xd2, 0x68, 0x7a,
	0x15, 0x7b, 0xe3, 0x20, 0x6d, 0x11, 0x12, 0xc2, 0x05, 0x13, 0xca, 0xb9, 0x4f, 0xd1, 0x3d, 0x68,
	0x72, 0x0b, 0x03, 0x9b, 0xec, 0xcc, 0x21, 0x9a, 0x47, 0x60, 0x93, 0xf1, 0x15, 0xce, 0xbe, 0x76,
	0xc9, 0x47, 0x72, 0xf7, 0x11, 0x46, 0xf8, 0xdf, 0xdf, 0x1b, 0xa3, 0xc4, 0xa2, 0x36, 0x3c, 0xe5,
	0x99, 0x54, 0x39, 0x89, 0xe1, 0x92, 0x35, 0x68, 0xd6, 0xcc, 0x43, 0x1b, 0xd9, 0x93, 0x7c, 0x67,
	0x45, 0xcd, 0x71, 0x30, 0x82, 0xd4, 0x89, 0xc9, 0xeb, 0x5f, 0xdb, 0xc8, 0xdb, 0x6c, 0x23, 0xef,
	0xcf, 0x36, 0xf2, 0x7e, 0xee, 0xa2, 0xce, 0x66, 0x17, 0x75, 0x7e, 0xef, 0xa2, 0xce, 0xe7, 0x97,
	0xcd, 0x24, 0xfe, 0x38, 0xcc, 0xa4, 0x59, 0x57, 0x5c, 0x2f, 0xfa, 0x38, 0x82, 0x6f, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x45, 0xf8, 0x01, 0x27, 0xe1, 0x02, 0x00, 0x00,
}

func (m *Fleet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fleet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fleet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WaterSlots != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.WaterSlots))
		i--
		dAtA[i] = 0x78
	}
	if m.LandSlots != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.LandSlots))
		i--
		dAtA[i] = 0x70
	}
	if m.AirSlots != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.AirSlots))
		i--
		dAtA[i] = 0x68
	}
	if m.SpaceSlots != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.SpaceSlots))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Water) > 0 {
		for iNdEx := len(m.Water) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Water[iNdEx])
			copy(dAtA[i:], m.Water[iNdEx])
			i = encodeVarintFleet(dAtA, i, uint64(len(m.Water[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Land) > 0 {
		for iNdEx := len(m.Land) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Land[iNdEx])
			copy(dAtA[i:], m.Land[iNdEx])
			i = encodeVarintFleet(dAtA, i, uint64(len(m.Land[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Air) > 0 {
		for iNdEx := len(m.Air) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Air[iNdEx])
			copy(dAtA[i:], m.Air[iNdEx])
			i = encodeVarintFleet(dAtA, i, uint64(len(m.Air[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Space) > 0 {
		for iNdEx := len(m.Space) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Space[iNdEx])
			copy(dAtA[i:], m.Space[iNdEx])
			i = encodeVarintFleet(dAtA, i, uint64(len(m.Space[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LocationListBackward) > 0 {
		i -= len(m.LocationListBackward)
		copy(dAtA[i:], m.LocationListBackward)
		i = encodeVarintFleet(dAtA, i, uint64(len(m.LocationListBackward)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LocationListForward) > 0 {
		i -= len(m.LocationListForward)
		copy(dAtA[i:], m.LocationListForward)
		i = encodeVarintFleet(dAtA, i, uint64(len(m.LocationListForward)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.LocationId) > 0 {
		i -= len(m.LocationId)
		copy(dAtA[i:], m.LocationId)
		i = encodeVarintFleet(dAtA, i, uint64(len(m.LocationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.LocationType != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.LocationType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFleet(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FleetAttributeRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FleetAttributeRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FleetAttributeRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintFleet(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AttributeId) > 0 {
		i -= len(m.AttributeId)
		copy(dAtA[i:], m.AttributeId)
		i = encodeVarintFleet(dAtA, i, uint64(len(m.AttributeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFleet(dAtA []byte, offset int, v uint64) int {
	offset -= sovFleet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Fleet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.LocationType != 0 {
		n += 1 + sovFleet(uint64(m.LocationType))
	}
	l = len(m.LocationId)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFleet(uint64(m.Status))
	}
	l = len(m.LocationListForward)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	l = len(m.LocationListBackward)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if len(m.Space) > 0 {
		for _, s := range m.Space {
			l = len(s)
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	if len(m.Air) > 0 {
		for _, s := range m.Air {
			l = len(s)
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	if len(m.Land) > 0 {
		for _, s := range m.Land {
			l = len(s)
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	if len(m.Water) > 0 {
		for _, s := range m.Water {
			l = len(s)
			n += 1 + l + sovFleet(uint64(l))
		}
	}
	if m.SpaceSlots != 0 {
		n += 1 + sovFleet(uint64(m.SpaceSlots))
	}
	if m.AirSlots != 0 {
		n += 1 + sovFleet(uint64(m.AirSlots))
	}
	if m.LandSlots != 0 {
		n += 1 + sovFleet(uint64(m.LandSlots))
	}
	if m.WaterSlots != 0 {
		n += 1 + sovFleet(uint64(m.WaterSlots))
	}
	return n
}

func (m *FleetAttributeRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AttributeId)
	if l > 0 {
		n += 1 + l + sovFleet(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovFleet(uint64(m.Value))
	}
	return n
}

func sovFleet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFleet(x uint64) (n int) {
	return sovFleet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fleet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fleet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fleet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationType", wireType)
			}
			m.LocationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LocationType |= ObjectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FleetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationListForward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationListForward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationListBackward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationListBackward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Space = append(m.Space, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Air", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Air = append(m.Air, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Land", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Land = append(m.Land, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Water", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Water = append(m.Water, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceSlots", wireType)
			}
			m.SpaceSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceSlots |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirSlots", wireType)
			}
			m.AirSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirSlots |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LandSlots", wireType)
			}
			m.LandSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LandSlots |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaterSlots", wireType)
			}
			m.WaterSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaterSlots |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FleetAttributeRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FleetAttributeRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FleetAttributeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFleet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFleet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttributeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFleet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFleet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFleet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFleet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFleet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFleet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFleet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFleet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFleet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFleet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFleet = fmt.Errorf("proto: unexpected end of group")
)
