// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/allocation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Allocation struct {
	Id               uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceType       ObjectType                             `protobuf:"varint,2,opt,name=sourceType,proto3,enum=structs.structs.ObjectType" json:"sourceType,omitempty"`
	SourceId         uint64                                 `protobuf:"varint,3,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	DestinationId    uint64                                 `protobuf:"varint,4,opt,name=destinationId,proto3" json:"destinationId,omitempty"`
	Power            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=power,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"power"`
	TransmissionLoss github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=transmissionLoss,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"transmissionLoss"`
}

func (m *Allocation) Reset()         { *m = Allocation{} }
func (m *Allocation) String() string { return proto.CompactTextString(m) }
func (*Allocation) ProtoMessage()    {}
func (*Allocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b374468bf8d3c09, []int{0}
}
func (m *Allocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Allocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Allocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Allocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Allocation.Merge(m, src)
}
func (m *Allocation) XXX_Size() int {
	return m.Size()
}
func (m *Allocation) XXX_DiscardUnknown() {
	xxx_messageInfo_Allocation.DiscardUnknown(m)
}

var xxx_messageInfo_Allocation proto.InternalMessageInfo

func (m *Allocation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Allocation) GetSourceType() ObjectType {
	if m != nil {
		return m.SourceType
	}
	return ObjectType_faction
}

func (m *Allocation) GetSourceId() uint64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *Allocation) GetDestinationId() uint64 {
	if m != nil {
		return m.DestinationId
	}
	return 0
}

func init() {
	proto.RegisterType((*Allocation)(nil), "structs.structs.Allocation")
}

func init() { proto.RegisterFile("structs/structs/allocation.proto", fileDescriptor_5b374468bf8d3c09) }

var fileDescriptor_5b374468bf8d3c09 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x51, 0x41, 0x4f, 0xc2, 0x30,
	0x18, 0x5d, 0x27, 0x10, 0x6d, 0x22, 0x9a, 0xc6, 0xc4, 0x39, 0x93, 0xb1, 0x18, 0x63, 0xb8, 0x30,
	0xa2, 0x1e, 0xf5, 0x22, 0xb7, 0x25, 0x9e, 0x16, 0x4f, 0x5e, 0x0c, 0xac, 0x0d, 0x54, 0xa0, 0xdf,
	0xb2, 0xaf, 0x44, 0xf9, 0x17, 0xfe, 0x18, 0x7f, 0x04, 0x47, 0xe2, 0x49, 0x3d, 0x10, 0x03, 0x7f,
	0xc4, 0xd0, 0x15, 0xa2, 0x78, 0xf5, 0xf4, 0xf6, 0xf6, 0x5e, 0xde, 0x6b, 0xfb, 0x68, 0x88, 0x3a,
	0x1f, 0xa5, 0x1a, 0x9b, 0x2b, 0x6c, 0x0f, 0x06, 0x90, 0xb6, 0xb5, 0x04, 0x15, 0x65, 0x39, 0x68,
	0x60, 0x7b, 0x56, 0x89, 0x2c, 0xfa, 0x07, 0x5d, 0xe8, 0x82, 0xd1, 0x9a, 0xcb, 0xaf, 0xc2, 0xe6,
	0x1f, 0xa5, 0x80, 0x43, 0xc0, 0x87, 0x42, 0x28, 0x88, 0x95, 0xfc, 0xcd, 0x8e, 0xbe, 0x18, 0x5b,
	0xed, 0xe4, 0xc3, 0xa5, 0xf4, 0x66, 0x5d, 0xc9, 0xaa, 0xd4, 0x95, 0xdc, 0x23, 0x21, 0xa9, 0x97,
	0x12, 0x57, 0x72, 0x76, 0x45, 0x29, 0xc2, 0x28, 0x4f, 0xc5, 0xdd, 0x38, 0x13, 0x9e, 0x1b, 0x92,
	0x7a, 0xf5, 0xe2, 0x38, 0xda, 0x38, 0x51, 0x04, 0x9d, 0x47, 0x91, 0xea, 0xa5, 0x25, 0xf9, 0x61,
	0x67, 0x3e, 0xdd, 0x2e, 0x58, 0xcc, 0xbd, 0x2d, 0x13, 0xb9, 0xe6, 0xec, 0x94, 0xee, 0x72, 0x81,
	0x5a, 0x2a, 0xd3, 0x1b, 0x73, 0xaf, 0x64, 0x0c, 0xbf, 0x7f, 0xb2, 0x84, 0x96, 0x33, 0x78, 0x12,
	0xb9, 0x57, 0x0e, 0x49, 0x7d, 0xa7, 0x75, 0x3d, 0x99, 0xd5, 0x9c, 0xcf, 0x59, 0xed, 0xac, 0x2b,
	0x75, 0x6f, 0xd4, 0x89, 0x52, 0x18, 0xda, 0x9b, 0x5a, 0x68, 0x20, 0xef, 0x37, 0xf5, 0x38, 0x13,
	0x18, 0xc5, 0x4a, 0xbf, 0xbd, 0x36, 0xa8, 0x7d, 0x88, 0x58, 0xe9, 0xa4, 0x88, 0x62, 0x3d, 0xba,
	0xaf, 0xf3, 0xb6, 0xc2, 0xa1, 0x44, 0x94, 0xa0, 0x6e, 0x01, 0xd1, 0xab, 0xfc, 0x43, 0xfc, 0x9f,
	0xd4, 0xd6, 0xf9, 0x64, 0x1e, 0x90, 0xe9, 0x3c, 0x20, 0x5f, 0xf3, 0x80, 0xbc, 0x2c, 0x02, 0x67,
	0xba, 0x08, 0x9c, 0xf7, 0x45, 0xe0, 0xdc, 0x1f, 0xae, 0x96, 0x78, 0x5e, 0x6f, 0x62, 0x62, 0x3b,
	0x15, 0xb3, 0xca, 0xe5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x1b, 0x4d, 0xb5, 0x17, 0x02,
	0x00, 0x00,
}

func (m *Allocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Allocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Allocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TransmissionLoss.Size()
		i -= size
		if _, err := m.TransmissionLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Power.Size()
		i -= size
		if _, err := m.Power.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAllocation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.DestinationId != 0 {
		i = encodeVarintAllocation(dAtA, i, uint64(m.DestinationId))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceId != 0 {
		i = encodeVarintAllocation(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceType != 0 {
		i = encodeVarintAllocation(dAtA, i, uint64(m.SourceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAllocation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAllocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Allocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAllocation(uint64(m.Id))
	}
	if m.SourceType != 0 {
		n += 1 + sovAllocation(uint64(m.SourceType))
	}
	if m.SourceId != 0 {
		n += 1 + sovAllocation(uint64(m.SourceId))
	}
	if m.DestinationId != 0 {
		n += 1 + sovAllocation(uint64(m.DestinationId))
	}
	l = m.Power.Size()
	n += 1 + l + sovAllocation(uint64(l))
	l = m.TransmissionLoss.Size()
	n += 1 + l + sovAllocation(uint64(l))
	return n
}

func sovAllocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllocation(x uint64) (n int) {
	return sovAllocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Allocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Allocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Allocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceType |= ObjectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationId", wireType)
			}
			m.DestinationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransmissionLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAllocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAllocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransmissionLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAllocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllocation = fmt.Errorf("proto: unexpected end of group")
)
