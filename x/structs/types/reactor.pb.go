// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/reactor.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Reactor_Status int32

const (
	Reactor_ONLINE         Reactor_Status = 0
	Reactor_OFFLINE        Reactor_Status = 7
	Reactor_DECOMMISSIONED Reactor_Status = 24
	Reactor_OVERLOAD       Reactor_Status = 32
)

var Reactor_Status_name = map[int32]string{
	0:  "ONLINE",
	7:  "OFFLINE",
	24: "DECOMMISSIONED",
	32: "OVERLOAD",
}

var Reactor_Status_value = map[string]int32{
	"ONLINE":         0,
	"OFFLINE":        7,
	"DECOMMISSIONED": 24,
	"OVERLOAD":       32,
}

func (x Reactor_Status) String() string {
	return proto.EnumName(Reactor_Status_name, int32(x))
}

func (Reactor_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4de5f586530fedc8, []int{0, 0}
}

type Reactor struct {
	Id             uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Validator      string         `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Power          uint64         `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	Load           uint64         `protobuf:"varint,4,opt,name=load,proto3" json:"load,omitempty"`
	PreviousStatus Reactor_Status `protobuf:"varint,5,opt,name=previous_status,json=previousStatus,proto3,enum=structs.structs.Reactor_Status" json:"previous_status,omitempty"`
	Status         Reactor_Status `protobuf:"varint,6,opt,name=status,proto3,enum=structs.structs.Reactor_Status" json:"status,omitempty"`
}

func (m *Reactor) Reset()         { *m = Reactor{} }
func (m *Reactor) String() string { return proto.CompactTextString(m) }
func (*Reactor) ProtoMessage()    {}
func (*Reactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de5f586530fedc8, []int{0}
}
func (m *Reactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reactor.Merge(m, src)
}
func (m *Reactor) XXX_Size() int {
	return m.Size()
}
func (m *Reactor) XXX_DiscardUnknown() {
	xxx_messageInfo_Reactor.DiscardUnknown(m)
}

var xxx_messageInfo_Reactor proto.InternalMessageInfo

func (m *Reactor) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Reactor) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Reactor) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Reactor) GetLoad() uint64 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *Reactor) GetPreviousStatus() Reactor_Status {
	if m != nil {
		return m.PreviousStatus
	}
	return Reactor_ONLINE
}

func (m *Reactor) GetStatus() Reactor_Status {
	if m != nil {
		return m.Status
	}
	return Reactor_ONLINE
}

type ReactorSubstations struct {
	SubstationId []uint64 `protobuf:"varint,1,rep,packed,name=substation_id,json=substationId,proto3" json:"substation_id,omitempty"`
}

func (m *ReactorSubstations) Reset()         { *m = ReactorSubstations{} }
func (m *ReactorSubstations) String() string { return proto.CompactTextString(m) }
func (*ReactorSubstations) ProtoMessage()    {}
func (*ReactorSubstations) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de5f586530fedc8, []int{1}
}
func (m *ReactorSubstations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReactorSubstations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReactorSubstations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReactorSubstations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReactorSubstations.Merge(m, src)
}
func (m *ReactorSubstations) XXX_Size() int {
	return m.Size()
}
func (m *ReactorSubstations) XXX_DiscardUnknown() {
	xxx_messageInfo_ReactorSubstations.DiscardUnknown(m)
}

var xxx_messageInfo_ReactorSubstations proto.InternalMessageInfo

func (m *ReactorSubstations) GetSubstationId() []uint64 {
	if m != nil {
		return m.SubstationId
	}
	return nil
}

func init() {
	proto.RegisterEnum("structs.structs.Reactor_Status", Reactor_Status_name, Reactor_Status_value)
	proto.RegisterType((*Reactor)(nil), "structs.structs.Reactor")
	proto.RegisterType((*ReactorSubstations)(nil), "structs.structs.ReactorSubstations")
}

func init() { proto.RegisterFile("structs/structs/reactor.proto", fileDescriptor_4de5f586530fedc8) }

var fileDescriptor_4de5f586530fedc8 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0x41, 0x4f, 0xf2, 0x40,
	0x14, 0x6c, 0x4b, 0x29, 0x1f, 0xef, 0xc3, 0x42, 0x5e, 0x48, 0x6c, 0x8c, 0xd6, 0x06, 0x2f, 0x3d,
	0x95, 0xa8, 0x07, 0xe3, 0x51, 0xa1, 0xc4, 0x26, 0x40, 0x93, 0x36, 0xf1, 0xe0, 0x85, 0x14, 0xda,
	0x90, 0x26, 0xc4, 0x6d, 0xba, 0x5b, 0xd4, 0x7f, 0xe1, 0xdf, 0xf0, 0x9f, 0x78, 0xe4, 0xe8, 0xd1,
	0xc0, 0x1f, 0x31, 0x6c, 0x17, 0x48, 0x3c, 0x79, 0x7a, 0x6f, 0x66, 0x67, 0x26, 0x2f, 0x3b, 0x70,
	0x46, 0x59, 0x5e, 0xcc, 0x18, 0xed, 0xee, 0x66, 0x9e, 0x44, 0x33, 0x46, 0x72, 0x27, 0xcb, 0x09,
	0x23, 0xd8, 0x14, 0xb4, 0x23, 0xe6, 0x49, 0x7b, 0x4e, 0xe6, 0x84, 0xbf, 0x75, 0xb7, 0x5b, 0x29,
	0xeb, 0x7c, 0x28, 0x50, 0x0b, 0x4a, 0x23, 0xea, 0xa0, 0xa4, 0xb1, 0x21, 0x5b, 0xb2, 0xad, 0x06,
	0x4a, 0x1a, 0xe3, 0x29, 0xd4, 0x97, 0xd1, 0x22, 0x8d, 0x23, 0x46, 0x72, 0x43, 0xb1, 0x64, 0xbb,
	0x1e, 0x1c, 0x08, 0x6c, 0x43, 0x35, 0x23, 0x2f, 0x49, 0x6e, 0x54, 0xb8, 0xa1, 0x04, 0x88, 0xa0,
	0x2e, 0x48, 0x14, 0x1b, 0x2a, 0x27, 0xf9, 0x8e, 0x0f, 0xd0, 0xcc, 0xf2, 0x64, 0x99, 0x92, 0x82,
	0x4e, 0x28, 0x8b, 0x58, 0x41, 0x8d, 0xaa, 0x25, 0xdb, 0xfa, 0xd5, 0xb9, 0xf3, 0xeb, 0x48, 0x47,
	0x9c, 0xe2, 0x84, 0x5c, 0x16, 0xe8, 0x3b, 0x5f, 0x89, 0xf1, 0x06, 0x34, 0x11, 0xa0, 0xfd, 0x2d,
	0x40, 0xc8, 0x3b, 0x3d, 0xd0, 0x44, 0x04, 0x80, 0xe6, 0x8f, 0x87, 0xde, 0xd8, 0x6d, 0x49, 0xf8,
	0x1f, 0x6a, 0xfe, 0x60, 0xc0, 0x41, 0x0d, 0x11, 0xf4, 0xbe, 0xdb, 0xf3, 0x47, 0x23, 0x2f, 0x0c,
	0x3d, 0x7f, 0xec, 0xf6, 0x5b, 0x06, 0x36, 0xe0, 0x9f, 0xff, 0xe8, 0x06, 0x43, 0xff, 0xae, 0xdf,
	0xb2, 0x3a, 0xb7, 0x80, 0x22, 0x3e, 0x2c, 0xa6, 0xdb, 0xe0, 0x94, 0x3c, 0x53, 0xbc, 0x80, 0x23,
	0xba, 0x87, 0x13, 0xfe, 0x81, 0x15, 0x5b, 0x0d, 0x1a, 0x07, 0xd2, 0x8b, 0xef, 0x2f, 0x3f, 0xd7,
	0xa6, 0xbc, 0x5a, 0x9b, 0xf2, 0xf7, 0xda, 0x94, 0xdf, 0x37, 0xa6, 0xb4, 0xda, 0x98, 0xd2, 0xd7,
	0xc6, 0x94, 0x9e, 0x8e, 0x77, 0xf5, 0xbd, 0xee, 0x8b, 0x64, 0x6f, 0x59, 0x42, 0xa7, 0x1a, 0x2f,
	0xe8, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x34, 0x85, 0x3d, 0xd5, 0xe8, 0x01, 0x00, 0x00,
}

func (m *Reactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.PreviousStatus != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.PreviousStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.Load != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Load))
		i--
		dAtA[i] = 0x20
	}
	if m.Power != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintReactor(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReactorSubstations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReactorSubstations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReactorSubstations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubstationId) > 0 {
		dAtA2 := make([]byte, len(m.SubstationId)*10)
		var j1 int
		for _, num := range m.SubstationId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintReactor(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReactor(dAtA []byte, offset int, v uint64) int {
	offset -= sovReactor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReactor(uint64(m.Id))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovReactor(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovReactor(uint64(m.Power))
	}
	if m.Load != 0 {
		n += 1 + sovReactor(uint64(m.Load))
	}
	if m.PreviousStatus != 0 {
		n += 1 + sovReactor(uint64(m.PreviousStatus))
	}
	if m.Status != 0 {
		n += 1 + sovReactor(uint64(m.Status))
	}
	return n
}

func (m *ReactorSubstations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubstationId) > 0 {
		l = 0
		for _, e := range m.SubstationId {
			l += sovReactor(uint64(e))
		}
		n += 1 + sovReactor(uint64(l)) + l
	}
	return n
}

func sovReactor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReactor(x uint64) (n int) {
	return sovReactor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
			}
			m.PreviousStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStatus |= Reactor_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Reactor_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReactor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReactor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReactorSubstations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReactorSubstations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReactorSubstations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReactor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SubstationId = append(m.SubstationId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReactor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReactor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReactor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SubstationId) == 0 {
					m.SubstationId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReactor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SubstationId = append(m.SubstationId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstationId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReactor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReactor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReactor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReactor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReactor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReactor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReactor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReactor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReactor = fmt.Errorf("proto: unexpected end of group")
)
