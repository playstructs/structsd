// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/reactor.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Reactor struct {
	Id                                      uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Validator                               string                                 `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Energy                                  uint64                                 `protobuf:"varint,3,opt,name=energy,proto3" json:"energy,omitempty"`
	Load                                    uint64                                 `protobuf:"varint,4,opt,name=load,proto3" json:"load,omitempty"`
	Activated                               bool                                   `protobuf:"varint,5,opt,name=activated,proto3" json:"activated,omitempty"`
	GuildId                                 uint64                                 `protobuf:"varint,6,opt,name=guildId,proto3" json:"guildId,omitempty"`
	AutomatedAllocations                    bool                                   `protobuf:"varint,7,opt,name=automatedAllocations,proto3" json:"automatedAllocations,omitempty"`
	AllowManualAllocations                  bool                                   `protobuf:"varint,8,opt,name=allowManualAllocations,proto3" json:"allowManualAllocations,omitempty"`
	AllowExternalAllocations                bool                                   `protobuf:"varint,9,opt,name=allowExternalAllocations,proto3" json:"allowExternalAllocations,omitempty"`
	AllowUncappedAllocations                bool                                   `protobuf:"varint,10,opt,name=allowUncappedAllocations,proto3" json:"allowUncappedAllocations,omitempty"`
	DelegateMinimumBeforeAllowedAllocations github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=delegateMinimumBeforeAllowedAllocations,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegateMinimumBeforeAllowedAllocations"`
	DelegateTaxOnAllocations                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=delegateTaxOnAllocations,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegateTaxOnAllocations"`
	RawAddress                              []byte                                 `protobuf:"bytes,13,opt,name=rawAddress,proto3" json:"rawAddress,omitempty"`
	ServiceSubstationId                     uint64                                 `protobuf:"varint,14,opt,name=serviceSubstationId,proto3" json:"serviceSubstationId,omitempty"`
}

func (m *Reactor) Reset()         { *m = Reactor{} }
func (m *Reactor) String() string { return proto.CompactTextString(m) }
func (*Reactor) ProtoMessage()    {}
func (*Reactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de5f586530fedc8, []int{0}
}
func (m *Reactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reactor.Merge(m, src)
}
func (m *Reactor) XXX_Size() int {
	return m.Size()
}
func (m *Reactor) XXX_DiscardUnknown() {
	xxx_messageInfo_Reactor.DiscardUnknown(m)
}

var xxx_messageInfo_Reactor proto.InternalMessageInfo

func (m *Reactor) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Reactor) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Reactor) GetEnergy() uint64 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *Reactor) GetLoad() uint64 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *Reactor) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *Reactor) GetGuildId() uint64 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *Reactor) GetAutomatedAllocations() bool {
	if m != nil {
		return m.AutomatedAllocations
	}
	return false
}

func (m *Reactor) GetAllowManualAllocations() bool {
	if m != nil {
		return m.AllowManualAllocations
	}
	return false
}

func (m *Reactor) GetAllowExternalAllocations() bool {
	if m != nil {
		return m.AllowExternalAllocations
	}
	return false
}

func (m *Reactor) GetAllowUncappedAllocations() bool {
	if m != nil {
		return m.AllowUncappedAllocations
	}
	return false
}

func (m *Reactor) GetRawAddress() []byte {
	if m != nil {
		return m.RawAddress
	}
	return nil
}

func (m *Reactor) GetServiceSubstationId() uint64 {
	if m != nil {
		return m.ServiceSubstationId
	}
	return 0
}

func init() {
	proto.RegisterType((*Reactor)(nil), "structs.structs.Reactor")
}

func init() { proto.RegisterFile("structs/structs/reactor.proto", fileDescriptor_4de5f586530fedc8) }

var fileDescriptor_4de5f586530fedc8 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x3f, 0x6f, 0x13, 0x31,
	0x14, 0x8f, 0x43, 0x48, 0x9a, 0x47, 0x29, 0x92, 0x89, 0x8a, 0xa9, 0xe0, 0x12, 0x31, 0x40, 0x96,
	0x24, 0xfc, 0x91, 0x3a, 0x54, 0x2c, 0x8d, 0xca, 0xd0, 0xa1, 0x42, 0xba, 0xc2, 0xc2, 0x82, 0x1c,
	0xdb, 0x1c, 0x16, 0xbe, 0x73, 0x64, 0xfb, 0x92, 0x74, 0xe7, 0x03, 0x30, 0x31, 0xf3, 0x21, 0xfa,
	0x21, 0x3a, 0x56, 0x9d, 0x10, 0x43, 0x85, 0x92, 0x85, 0x8f, 0x81, 0xe2, 0xbb, 0x34, 0x17, 0x29,
	0x91, 0x18, 0x98, 0xde, 0xbd, 0xdf, 0xbf, 0x7b, 0x92, 0xdf, 0x83, 0xc7, 0xd6, 0x99, 0x94, 0x39,
	0xdb, 0x5b, 0x54, 0x23, 0x28, 0x73, 0xda, 0x74, 0x87, 0x46, 0x3b, 0x8d, 0xef, 0xe5, 0x70, 0x37,
	0xaf, 0x7b, 0x0f, 0x99, 0xb6, 0xb1, 0xb6, 0x1f, 0x3d, 0xdd, 0xcb, 0x9a, 0x4c, 0xbb, 0xd7, 0x88,
	0x74, 0xa4, 0x33, 0x7c, 0xfe, 0x95, 0xa1, 0x4f, 0xbe, 0x56, 0xa1, 0x16, 0x66, 0x99, 0x78, 0x07,
	0xca, 0x92, 0x13, 0xd4, 0x42, 0xed, 0x4a, 0x58, 0x96, 0x1c, 0xef, 0x43, 0x7d, 0x44, 0x95, 0xe4,
	0xd4, 0x69, 0x43, 0xca, 0x2d, 0xd4, 0xae, 0xf7, 0xc9, 0xd5, 0x79, 0xa7, 0x91, 0xc7, 0x1e, 0x72,
	0x6e, 0x84, 0xb5, 0xa7, 0xce, 0xc8, 0x24, 0x0a, 0x97, 0x52, 0xbc, 0x0b, 0x55, 0x91, 0x08, 0x13,
	0x9d, 0x91, 0x5b, 0x3e, 0x2b, 0xef, 0x30, 0x86, 0x8a, 0xd2, 0x94, 0x93, 0x8a, 0x47, 0xfd, 0x37,
	0x7e, 0x04, 0x75, 0xca, 0x9c, 0x1c, 0x51, 0x27, 0x38, 0xb9, 0xdd, 0x42, 0xed, 0xad, 0x70, 0x09,
	0x60, 0x02, 0xb5, 0x28, 0x95, 0x8a, 0x1f, 0x73, 0x52, 0xf5, 0xa6, 0x45, 0x8b, 0x5f, 0x42, 0x83,
	0xa6, 0x4e, 0xc7, 0x73, 0xd9, 0xa1, 0x52, 0x9a, 0x51, 0x27, 0x75, 0x62, 0x49, 0xcd, 0x47, 0xac,
	0xe5, 0xf0, 0x3e, 0xec, 0x52, 0xa5, 0xf4, 0xf8, 0x84, 0x26, 0x29, 0x55, 0x45, 0xd7, 0x96, 0x77,
	0x6d, 0x60, 0xf1, 0x01, 0x10, 0xcf, 0xbc, 0x99, 0x38, 0x61, 0x92, 0x55, 0x67, 0xdd, 0x3b, 0x37,
	0xf2, 0x37, 0xde, 0xf7, 0x09, 0xa3, 0xc3, 0xe1, 0xea, 0xac, 0x50, 0xf0, 0xae, 0xe1, 0xf1, 0x77,
	0x04, 0xcf, 0xb8, 0x50, 0x22, 0xa2, 0x4e, 0x9c, 0xc8, 0x44, 0xc6, 0x69, 0xdc, 0x17, 0x9f, 0xb4,
	0x11, 0x73, 0xd1, 0x78, 0x35, 0xeb, 0x8e, 0x7f, 0x9e, 0xd7, 0x17, 0xd7, 0xcd, 0xd2, 0xaf, 0xeb,
	0xe6, 0xd3, 0x48, 0xba, 0xcf, 0xe9, 0xa0, 0xcb, 0x74, 0x9c, 0x2f, 0x41, 0x5e, 0x3a, 0x96, 0x7f,
	0xe9, 0xb9, 0xb3, 0xa1, 0xb0, 0xdd, 0x23, 0xc1, 0xae, 0xce, 0x3b, 0x90, 0x3f, 0xe6, 0x91, 0x60,
	0xe1, 0xbf, 0xfe, 0x0c, 0x4f, 0x80, 0x2c, 0xa4, 0xef, 0xe8, 0xe4, 0x6d, 0x52, 0x1c, 0x64, 0xfb,
	0x3f, 0x0c, 0xb2, 0x31, 0x1d, 0x07, 0x00, 0x86, 0x8e, 0xf3, 0xcd, 0x23, 0x77, 0x5b, 0xa8, 0xbd,
	0x1d, 0x16, 0x10, 0xfc, 0x1c, 0xee, 0x5b, 0x61, 0x46, 0x92, 0x89, 0xd3, 0x74, 0x60, 0x9d, 0x77,
	0x1d, 0x73, 0xb2, 0xe3, 0x97, 0x67, 0x1d, 0x75, 0x50, 0xf9, 0xf3, 0xa3, 0x89, 0xfa, 0x2f, 0x2e,
	0xa6, 0x01, 0xba, 0x9c, 0x06, 0xe8, 0xf7, 0x34, 0x40, 0xdf, 0x66, 0x41, 0xe9, 0x72, 0x16, 0x94,
	0x7e, 0xce, 0x82, 0xd2, 0x87, 0x07, 0x8b, 0xcb, 0x9b, 0xdc, 0xdc, 0xa0, 0x1f, 0x7b, 0x50, 0xf5,
	0x07, 0xf4, 0xea, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xad, 0x77, 0xe0, 0xa3, 0x03, 0x00,
	0x00,
}

func (this *Reactor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Reactor)
	if !ok {
		that2, ok := that.(Reactor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Validator != that1.Validator {
		return false
	}
	if this.Energy != that1.Energy {
		return false
	}
	if this.Load != that1.Load {
		return false
	}
	if this.Activated != that1.Activated {
		return false
	}
	if this.GuildId != that1.GuildId {
		return false
	}
	if this.AutomatedAllocations != that1.AutomatedAllocations {
		return false
	}
	if this.AllowManualAllocations != that1.AllowManualAllocations {
		return false
	}
	if this.AllowExternalAllocations != that1.AllowExternalAllocations {
		return false
	}
	if this.AllowUncappedAllocations != that1.AllowUncappedAllocations {
		return false
	}
	if !this.DelegateMinimumBeforeAllowedAllocations.Equal(that1.DelegateMinimumBeforeAllowedAllocations) {
		return false
	}
	if !this.DelegateTaxOnAllocations.Equal(that1.DelegateTaxOnAllocations) {
		return false
	}
	if !bytes.Equal(this.RawAddress, that1.RawAddress) {
		return false
	}
	if this.ServiceSubstationId != that1.ServiceSubstationId {
		return false
	}
	return true
}
func (m *Reactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceSubstationId != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.ServiceSubstationId))
		i--
		dAtA[i] = 0x70
	}
	if len(m.RawAddress) > 0 {
		i -= len(m.RawAddress)
		copy(dAtA[i:], m.RawAddress)
		i = encodeVarintReactor(dAtA, i, uint64(len(m.RawAddress)))
		i--
		dAtA[i] = 0x6a
	}
	{
		size := m.DelegateTaxOnAllocations.Size()
		i -= size
		if _, err := m.DelegateTaxOnAllocations.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReactor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.DelegateMinimumBeforeAllowedAllocations.Size()
		i -= size
		if _, err := m.DelegateMinimumBeforeAllowedAllocations.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReactor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.AllowUncappedAllocations {
		i--
		if m.AllowUncappedAllocations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.AllowExternalAllocations {
		i--
		if m.AllowExternalAllocations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.AllowManualAllocations {
		i--
		if m.AllowManualAllocations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.AutomatedAllocations {
		i--
		if m.AutomatedAllocations {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.GuildId != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.GuildId))
		i--
		dAtA[i] = 0x30
	}
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Load != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Load))
		i--
		dAtA[i] = 0x20
	}
	if m.Energy != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Energy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintReactor(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReactor(dAtA []byte, offset int, v uint64) int {
	offset -= sovReactor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReactor(uint64(m.Id))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovReactor(uint64(l))
	}
	if m.Energy != 0 {
		n += 1 + sovReactor(uint64(m.Energy))
	}
	if m.Load != 0 {
		n += 1 + sovReactor(uint64(m.Load))
	}
	if m.Activated {
		n += 2
	}
	if m.GuildId != 0 {
		n += 1 + sovReactor(uint64(m.GuildId))
	}
	if m.AutomatedAllocations {
		n += 2
	}
	if m.AllowManualAllocations {
		n += 2
	}
	if m.AllowExternalAllocations {
		n += 2
	}
	if m.AllowUncappedAllocations {
		n += 2
	}
	l = m.DelegateMinimumBeforeAllowedAllocations.Size()
	n += 1 + l + sovReactor(uint64(l))
	l = m.DelegateTaxOnAllocations.Size()
	n += 1 + l + sovReactor(uint64(l))
	l = len(m.RawAddress)
	if l > 0 {
		n += 1 + l + sovReactor(uint64(l))
	}
	if m.ServiceSubstationId != 0 {
		n += 1 + sovReactor(uint64(m.ServiceSubstationId))
	}
	return n
}

func sovReactor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReactor(x uint64) (n int) {
	return sovReactor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomatedAllocations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutomatedAllocations = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowManualAllocations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowManualAllocations = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowExternalAllocations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowExternalAllocations = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowUncappedAllocations", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowUncappedAllocations = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateMinimumBeforeAllowedAllocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateMinimumBeforeAllowedAllocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateTaxOnAllocations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateTaxOnAllocations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthReactor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthReactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawAddress = append(m.RawAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RawAddress == nil {
				m.RawAddress = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSubstationId", wireType)
			}
			m.ServiceSubstationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceSubstationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReactor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReactor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReactor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReactor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReactor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReactor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReactor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReactor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReactor = fmt.Errorf("proto: unexpected end of group")
)
