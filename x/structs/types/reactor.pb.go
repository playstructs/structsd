// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/reactor.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Reactor struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	Energy    uint64 `protobuf:"varint,3,opt,name=energy,proto3" json:"energy,omitempty"`
	Load      uint64 `protobuf:"varint,4,opt,name=load,proto3" json:"load,omitempty"`
	Activated bool   `protobuf:"varint,5,opt,name=activated,proto3" json:"activated,omitempty"`
}

func (m *Reactor) Reset()         { *m = Reactor{} }
func (m *Reactor) String() string { return proto.CompactTextString(m) }
func (*Reactor) ProtoMessage()    {}
func (*Reactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4de5f586530fedc8, []int{0}
}
func (m *Reactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reactor.Merge(m, src)
}
func (m *Reactor) XXX_Size() int {
	return m.Size()
}
func (m *Reactor) XXX_DiscardUnknown() {
	xxx_messageInfo_Reactor.DiscardUnknown(m)
}

var xxx_messageInfo_Reactor proto.InternalMessageInfo

func (m *Reactor) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Reactor) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Reactor) GetEnergy() uint64 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *Reactor) GetLoad() uint64 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *Reactor) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func init() {
	proto.RegisterType((*Reactor)(nil), "structs.structs.Reactor")
}

func init() { proto.RegisterFile("structs/structs/reactor.proto", fileDescriptor_4de5f586530fedc8) }

var fileDescriptor_4de5f586530fedc8 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0x29, 0xd6, 0x87, 0xd1, 0x45, 0xa9, 0x89, 0xc9, 0x25, 0xf9, 0x45, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0xfc, 0x50, 0x61, 0x3d, 0x28, 0x2d, 0x25, 0x99, 0x9c, 0x5f, 0x9c, 0x9b,
	0x5f, 0x1c, 0x0f, 0x96, 0xd6, 0x87, 0x70, 0x20, 0x6a, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0x21,
	0xe2, 0x20, 0x16, 0x44, 0x54, 0x69, 0x36, 0x23, 0x17, 0x7b, 0x10, 0xc4, 0x4c, 0x21, 0x3e, 0x2e,
	0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x33, 0x2e,
	0xce, 0xb2, 0xc4, 0x9c, 0xcc, 0x94, 0xc4, 0x92, 0xfc, 0x22, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x4e,
	0x27, 0x89, 0x4b, 0x5b, 0x74, 0x45, 0xa0, 0xc6, 0x3a, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x07,
	0x97, 0x14, 0x65, 0xe6, 0xa5, 0x07, 0x21, 0x94, 0x0a, 0x89, 0x71, 0xb1, 0xa5, 0xe6, 0xa5, 0x16,
	0xa5, 0x57, 0x4a, 0x30, 0x83, 0xcd, 0x82, 0xf2, 0x84, 0x84, 0xb8, 0x58, 0x72, 0xf2, 0x13, 0x53,
	0x24, 0x58, 0xc0, 0xa2, 0x60, 0xb6, 0x90, 0x0c, 0x17, 0x67, 0x62, 0x72, 0x49, 0x66, 0x59, 0x62,
	0x49, 0x6a, 0x8a, 0x04, 0xab, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x42, 0xc0, 0xc9, 0xf0, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xc4, 0x61, 0x01, 0x52, 0x01, 0x0f, 0x9a, 0x92,
	0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xbf, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa7,
	0xfa, 0x40, 0xe9, 0x3a, 0x01, 0x00, 0x00,
}

func (m *Reactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Load != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Load))
		i--
		dAtA[i] = 0x20
	}
	if m.Energy != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Energy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintReactor(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReactor(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReactor(dAtA []byte, offset int, v uint64) int {
	offset -= sovReactor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReactor(uint64(m.Id))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovReactor(uint64(l))
	}
	if m.Energy != 0 {
		n += 1 + sovReactor(uint64(m.Energy))
	}
	if m.Load != 0 {
		n += 1 + sovReactor(uint64(m.Load))
	}
	if m.Activated {
		n += 2
	}
	return n
}

func sovReactor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReactor(x uint64) (n int) {
	return sovReactor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReactor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReactor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReactor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReactor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReactor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReactor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReactor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReactor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReactor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReactor = fmt.Errorf("proto: unexpected end of group")
)
