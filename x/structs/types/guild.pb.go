// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/guild.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Guild struct {
	Id                   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Endpoint             string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Creator              string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner                uint64 `protobuf:"varint,4,opt,name=owner,proto3" json:"owner,omitempty"`
	GuildJoinType        uint64 `protobuf:"varint,5,opt,name=guildJoinType,proto3" json:"guildJoinType,omitempty"`
	InfusionJoinMinimum  uint64 `protobuf:"varint,6,opt,name=infusionJoinMinimum,proto3" json:"infusionJoinMinimum,omitempty"`
	OpenSquadCreation    bool   `protobuf:"varint,7,opt,name=openSquadCreation,proto3" json:"openSquadCreation,omitempty"`
	SquadJoinTypeMinimum uint64 `protobuf:"varint,8,opt,name=squadJoinTypeMinimum,proto3" json:"squadJoinTypeMinimum,omitempty"`
	PrimaryReactorId     uint64 `protobuf:"varint,9,opt,name=primaryReactorId,proto3" json:"primaryReactorId,omitempty"`
	EntrySubstationId    uint64 `protobuf:"varint,10,opt,name=entrySubstationId,proto3" json:"entrySubstationId,omitempty"`
}

func (m *Guild) Reset()         { *m = Guild{} }
func (m *Guild) String() string { return proto.CompactTextString(m) }
func (*Guild) ProtoMessage()    {}
func (*Guild) Descriptor() ([]byte, []int) {
	return fileDescriptor_d57f2d07301e2fa1, []int{0}
}
func (m *Guild) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guild.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guild.Merge(m, src)
}
func (m *Guild) XXX_Size() int {
	return m.Size()
}
func (m *Guild) XXX_DiscardUnknown() {
	xxx_messageInfo_Guild.DiscardUnknown(m)
}

var xxx_messageInfo_Guild proto.InternalMessageInfo

func (m *Guild) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Guild) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Guild) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Guild) GetOwner() uint64 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *Guild) GetGuildJoinType() uint64 {
	if m != nil {
		return m.GuildJoinType
	}
	return 0
}

func (m *Guild) GetInfusionJoinMinimum() uint64 {
	if m != nil {
		return m.InfusionJoinMinimum
	}
	return 0
}

func (m *Guild) GetOpenSquadCreation() bool {
	if m != nil {
		return m.OpenSquadCreation
	}
	return false
}

func (m *Guild) GetSquadJoinTypeMinimum() uint64 {
	if m != nil {
		return m.SquadJoinTypeMinimum
	}
	return 0
}

func (m *Guild) GetPrimaryReactorId() uint64 {
	if m != nil {
		return m.PrimaryReactorId
	}
	return 0
}

func (m *Guild) GetEntrySubstationId() uint64 {
	if m != nil {
		return m.EntrySubstationId
	}
	return 0
}

func init() {
	proto.RegisterType((*Guild)(nil), "structs.Guild")
}

func init() { proto.RegisterFile("structs/structs/guild.proto", fileDescriptor_d57f2d07301e2fa1) }

var fileDescriptor_d57f2d07301e2fa1 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcb, 0x4a, 0xf4, 0x30,
	0x1c, 0xc5, 0x27, 0xfd, 0xe6, 0xfa, 0x87, 0x4f, 0x34, 0x0e, 0x18, 0x14, 0x42, 0x11, 0x17, 0x45,
	0xc4, 0xeb, 0x1b, 0xe8, 0x42, 0x46, 0x70, 0xd3, 0x71, 0xe5, 0xae, 0xd3, 0x44, 0x09, 0xd8, 0x24,
	0xe6, 0x82, 0xf6, 0x2d, 0x7c, 0x2c, 0x97, 0xb3, 0x74, 0x29, 0xed, 0x43, 0xb8, 0x95, 0x46, 0x3b,
	0x20, 0x9d, 0x55, 0x38, 0xe7, 0x77, 0xc8, 0xf9, 0xc3, 0x81, 0x3d, 0xeb, 0x8c, 0xcf, 0x9d, 0x3d,
	0x69, 0xdf, 0x47, 0x2f, 0x9e, 0xd8, 0xb1, 0x36, 0xca, 0x29, 0x3c, 0xfa, 0x35, 0xf7, 0xbf, 0x22,
	0x18, 0x5c, 0x37, 0x00, 0x6f, 0x40, 0x24, 0x18, 0x41, 0x31, 0x4a, 0xfa, 0x69, 0x24, 0x18, 0xde,
	0x85, 0x31, 0x97, 0x4c, 0x2b, 0x21, 0x1d, 0x89, 0x62, 0x94, 0x4c, 0xd2, 0x95, 0xc6, 0x04, 0x46,
	0xb9, 0xe1, 0x99, 0x53, 0x86, 0xfc, 0x0b, 0xa8, 0x95, 0x78, 0x0a, 0x03, 0xf5, 0x22, 0xb9, 0x21,
	0xfd, 0xf0, 0xd1, 0x8f, 0xc0, 0x07, 0xf0, 0x3f, 0xb4, 0xdf, 0x28, 0x21, 0xef, 0x4a, 0xcd, 0xc9,
	0x20, 0xd0, 0xbf, 0x26, 0x3e, 0x85, 0x6d, 0x21, 0x1f, 0xbc, 0x15, 0x4a, 0x36, 0xde, 0xad, 0x90,
	0xa2, 0xf0, 0x05, 0x19, 0x86, 0xec, 0x3a, 0x84, 0x8f, 0x60, 0x4b, 0x69, 0x2e, 0xe7, 0xcf, 0x3e,
	0x63, 0x57, 0xcd, 0x05, 0x42, 0x49, 0x32, 0x8a, 0x51, 0x32, 0x4e, 0xbb, 0x00, 0x9f, 0xc3, 0xd4,
	0x36, 0x46, 0x5b, 0xd8, 0x16, 0x8c, 0x43, 0xc1, 0x5a, 0x86, 0x0f, 0x61, 0x53, 0x1b, 0x51, 0x64,
	0xa6, 0x4c, 0x79, 0x96, 0x3b, 0x65, 0x66, 0x8c, 0x4c, 0x42, 0xbe, 0xe3, 0x37, 0xd7, 0x70, 0xe9,
	0x4c, 0x39, 0xf7, 0x0b, 0xeb, 0x42, 0xe5, 0x8c, 0x11, 0x08, 0xe1, 0x2e, 0xb8, 0x3c, 0x7b, 0xaf,
	0x28, 0x5a, 0x56, 0x14, 0x7d, 0x56, 0x14, 0xbd, 0xd5, 0xb4, 0xb7, 0xac, 0x69, 0xef, 0xa3, 0xa6,
	0xbd, 0xfb, 0x9d, 0x76, 0xb1, 0xd7, 0xd5, 0x76, 0xae, 0xd4, 0xdc, 0x2e, 0x86, 0x61, 0xbc, 0x8b,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xe3, 0xdf, 0x35, 0xdb, 0x01, 0x00, 0x00,
}

func (m *Guild) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guild) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guild) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EntrySubstationId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.EntrySubstationId))
		i--
		dAtA[i] = 0x50
	}
	if m.PrimaryReactorId != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.PrimaryReactorId))
		i--
		dAtA[i] = 0x48
	}
	if m.SquadJoinTypeMinimum != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.SquadJoinTypeMinimum))
		i--
		dAtA[i] = 0x40
	}
	if m.OpenSquadCreation {
		i--
		if m.OpenSquadCreation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.InfusionJoinMinimum != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.InfusionJoinMinimum))
		i--
		dAtA[i] = 0x30
	}
	if m.GuildJoinType != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildJoinType))
		i--
		dAtA[i] = 0x28
	}
	if m.Owner != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Owner))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuild(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Guild) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Owner != 0 {
		n += 1 + sovGuild(uint64(m.Owner))
	}
	if m.GuildJoinType != 0 {
		n += 1 + sovGuild(uint64(m.GuildJoinType))
	}
	if m.InfusionJoinMinimum != 0 {
		n += 1 + sovGuild(uint64(m.InfusionJoinMinimum))
	}
	if m.OpenSquadCreation {
		n += 2
	}
	if m.SquadJoinTypeMinimum != 0 {
		n += 1 + sovGuild(uint64(m.SquadJoinTypeMinimum))
	}
	if m.PrimaryReactorId != 0 {
		n += 1 + sovGuild(uint64(m.PrimaryReactorId))
	}
	if m.EntrySubstationId != 0 {
		n += 1 + sovGuild(uint64(m.EntrySubstationId))
	}
	return n
}

func sovGuild(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Guild) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guild: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guild: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuild
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildJoinType", wireType)
			}
			m.GuildJoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildJoinType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfusionJoinMinimum", wireType)
			}
			m.InfusionJoinMinimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InfusionJoinMinimum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSquadCreation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenSquadCreation = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SquadJoinTypeMinimum", wireType)
			}
			m.SquadJoinTypeMinimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SquadJoinTypeMinimum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryReactorId", wireType)
			}
			m.PrimaryReactorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrimaryReactorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrySubstationId", wireType)
			}
			m.EntrySubstationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntrySubstationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuild
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuild
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuild        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuild = fmt.Errorf("proto: unexpected end of group")
)
