// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/substation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Substation struct {
	Id       uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Power    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=power,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"power"`
	Load     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=load,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"load"`
	Depth    uint64                                 `protobuf:"varint,4,opt,name=depth,proto3" json:"depth,omitempty"`
	Parent   uint64                                 `protobuf:"varint,5,opt,name=parent,proto3" json:"parent,omitempty"`
	Children []uint64                               `protobuf:"varint,6,rep,packed,name=children,proto3" json:"children,omitempty"`
	Path     []uint64                               `protobuf:"varint,7,rep,packed,name=path,proto3" json:"path,omitempty"`
	Sources  []uint64                               `protobuf:"varint,8,rep,packed,name=sources,proto3" json:"sources,omitempty"`
}

func (m *Substation) Reset()         { *m = Substation{} }
func (m *Substation) String() string { return proto.CompactTextString(m) }
func (*Substation) ProtoMessage()    {}
func (*Substation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfac9318fba59fb, []int{0}
}
func (m *Substation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Substation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Substation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Substation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Substation.Merge(m, src)
}
func (m *Substation) XXX_Size() int {
	return m.Size()
}
func (m *Substation) XXX_DiscardUnknown() {
	xxx_messageInfo_Substation.DiscardUnknown(m)
}

var xxx_messageInfo_Substation proto.InternalMessageInfo

func (m *Substation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Substation) GetDepth() uint64 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *Substation) GetParent() uint64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *Substation) GetChildren() []uint64 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Substation) GetPath() []uint64 {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Substation) GetSources() []uint64 {
	if m != nil {
		return m.Sources
	}
	return nil
}

func init() {
	proto.RegisterType((*Substation)(nil), "structs.structs.Substation")
}

func init() { proto.RegisterFile("structs/structs/substation.proto", fileDescriptor_1dfac9318fba59fb) }

var fileDescriptor_1dfac9318fba59fb = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x93, 0x34, 0xfd, 0xf3, 0xdd, 0xe1, 0x43, 0xb2, 0x2a, 0x30, 0x1d, 0xd2, 0x88, 0x01,
	0x75, 0x69, 0x2a, 0xc4, 0xca, 0xd4, 0xad, 0x1b, 0x0a, 0x1b, 0x0b, 0x4a, 0x63, 0xab, 0x89, 0x68,
	0x63, 0xcb, 0xbe, 0x11, 0xf0, 0x16, 0x3c, 0x0c, 0x13, 0x4f, 0xd0, 0xb1, 0x62, 0x42, 0x0c, 0x15,
	0x6a, 0x5e, 0x04, 0x61, 0xbb, 0x79, 0x02, 0xa6, 0x73, 0xcf, 0xef, 0x5a, 0xc7, 0xd7, 0xbe, 0x10,
	0x6b, 0x54, 0x75, 0x8e, 0x7a, 0xd6, 0x6a, 0xbd, 0xd4, 0x98, 0x61, 0x29, 0xaa, 0x44, 0x2a, 0x81,
	0x82, 0x9c, 0xb8, 0x4e, 0xe2, 0x74, 0x74, 0x9e, 0x0b, 0xbd, 0x11, 0xfa, 0xc1, 0xb4, 0x67, 0xd6,
	0xd8, 0xb3, 0xa3, 0xe1, 0x4a, 0xac, 0x84, 0xe5, 0xbf, 0x95, 0xa5, 0x17, 0xef, 0x01, 0xc0, 0x5d,
	0x1b, 0x4b, 0xfe, 0x43, 0x50, 0x32, 0xea, 0xc7, 0xfe, 0x24, 0x4c, 0x83, 0x92, 0x91, 0x14, 0xba,
	0x52, 0x3c, 0x71, 0x45, 0x83, 0xd8, 0x9f, 0xfc, 0x9b, 0xdf, 0x6c, 0xf7, 0x63, 0xef, 0x6b, 0x3f,
	0xbe, 0x5c, 0x95, 0x58, 0xd4, 0xcb, 0x24, 0x17, 0x1b, 0x77, 0x89, 0x93, 0xa9, 0x66, 0x8f, 0x33,
	0x7c, 0x91, 0x5c, 0x27, 0x8b, 0x0a, 0x3f, 0xde, 0xa6, 0xe0, 0x66, 0x58, 0x54, 0x98, 0xda, 0x28,
	0x72, 0x0b, 0xe1, 0x5a, 0x64, 0x8c, 0x76, 0xfe, 0x20, 0xd2, 0x24, 0x91, 0x21, 0x74, 0x19, 0x97,
	0x58, 0xd0, 0xd0, 0x0c, 0x6e, 0x0d, 0x39, 0x85, 0x9e, 0xcc, 0x14, 0xaf, 0x90, 0x76, 0x0d, 0x76,
	0x8e, 0x8c, 0x60, 0x90, 0x17, 0xe5, 0x9a, 0x29, 0x5e, 0xd1, 0x5e, 0xdc, 0x99, 0x84, 0x69, 0xeb,
	0x09, 0x81, 0x50, 0x66, 0x58, 0xd0, 0xbe, 0xe1, 0xa6, 0x26, 0x14, 0xfa, 0x5a, 0xd4, 0x2a, 0xe7,
	0x9a, 0x0e, 0x0c, 0x3e, 0xda, 0xf9, 0xd5, 0xf6, 0x10, 0xf9, 0xbb, 0x43, 0xe4, 0x7f, 0x1f, 0x22,
	0xff, 0xb5, 0x89, 0xbc, 0x5d, 0x13, 0x79, 0x9f, 0x4d, 0xe4, 0xdd, 0x9f, 0x1d, 0x57, 0xf6, 0xdc,
	0x2e, 0xcf, 0x3c, 0x61, 0xd9, 0x33, 0xdf, 0x7e, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xe1,
	0x3f, 0xa8, 0xdc, 0x01, 0x00, 0x00,
}

func (m *Substation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Substation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Substation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sources) > 0 {
		dAtA2 := make([]byte, len(m.Sources)*10)
		var j1 int
		for _, num := range m.Sources {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSubstation(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Path) > 0 {
		dAtA4 := make([]byte, len(m.Path)*10)
		var j3 int
		for _, num := range m.Path {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSubstation(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Children) > 0 {
		dAtA6 := make([]byte, len(m.Children)*10)
		var j5 int
		for _, num := range m.Children {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintSubstation(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x32
	}
	if m.Parent != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Parent))
		i--
		dAtA[i] = 0x28
	}
	if m.Depth != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Depth))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Load.Size()
		i -= size
		if _, err := m.Load.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubstation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Power.Size()
		i -= size
		if _, err := m.Power.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSubstation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubstation(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubstation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Substation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSubstation(uint64(m.Id))
	}
	l = m.Power.Size()
	n += 1 + l + sovSubstation(uint64(l))
	l = m.Load.Size()
	n += 1 + l + sovSubstation(uint64(l))
	if m.Depth != 0 {
		n += 1 + sovSubstation(uint64(m.Depth))
	}
	if m.Parent != 0 {
		n += 1 + sovSubstation(uint64(m.Parent))
	}
	if len(m.Children) > 0 {
		l = 0
		for _, e := range m.Children {
			l += sovSubstation(uint64(e))
		}
		n += 1 + sovSubstation(uint64(l)) + l
	}
	if len(m.Path) > 0 {
		l = 0
		for _, e := range m.Path {
			l += sovSubstation(uint64(e))
		}
		n += 1 + sovSubstation(uint64(l)) + l
	}
	if len(m.Sources) > 0 {
		l = 0
		for _, e := range m.Sources {
			l += sovSubstation(uint64(e))
		}
		n += 1 + sovSubstation(uint64(l)) + l
	}
	return n
}

func sovSubstation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubstation(x uint64) (n int) {
	return sovSubstation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Substation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubstation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Substation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Substation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubstation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubstation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubstation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubstation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Load.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			m.Depth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Depth |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubstation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Children = append(m.Children, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubstation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSubstation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSubstation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Children) == 0 {
					m.Children = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubstation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Children = append(m.Children, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubstation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Path = append(m.Path, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubstation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSubstation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSubstation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Path) == 0 {
					m.Path = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubstation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Path = append(m.Path, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubstation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sources = append(m.Sources, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubstation
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSubstation
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSubstation
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sources) == 0 {
					m.Sources = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubstation
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sources = append(m.Sources, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubstation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubstation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubstation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubstation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubstation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubstation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubstation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubstation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubstation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubstation = fmt.Errorf("proto: unexpected end of group")
)
