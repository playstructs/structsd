// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/substation.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Substation_Status int32

const (
	Substation_ONLINE         Substation_Status = 0
	Substation_OFFLINE        Substation_Status = 7
	Substation_DECOMMISSIONED Substation_Status = 24
	Substation_OVERLOAD       Substation_Status = 32
)

var Substation_Status_name = map[int32]string{
	0:  "ONLINE",
	7:  "OFFLINE",
	24: "DECOMMISSIONED",
	32: "OVERLOAD",
}

var Substation_Status_value = map[string]int32{
	"ONLINE":         0,
	"OFFLINE":        7,
	"DECOMMISSIONED": 24,
	"OVERLOAD":       32,
}

func (x Substation_Status) String() string {
	return proto.EnumName(Substation_Status_name, int32(x))
}

func (Substation_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1dfac9318fba59fb, []int{0, 0}
}

type Substation struct {
	Id     uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Power  uint64            `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	Load   uint64            `protobuf:"varint,3,opt,name=load,proto3" json:"load,omitempty"`
	Status Substation_Status `protobuf:"varint,5,opt,name=status,proto3,enum=structs.structs.Substation_Status" json:"status,omitempty"`
}

func (m *Substation) Reset()         { *m = Substation{} }
func (m *Substation) String() string { return proto.CompactTextString(m) }
func (*Substation) ProtoMessage()    {}
func (*Substation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfac9318fba59fb, []int{0}
}
func (m *Substation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Substation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Substation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Substation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Substation.Merge(m, src)
}
func (m *Substation) XXX_Size() int {
	return m.Size()
}
func (m *Substation) XXX_DiscardUnknown() {
	xxx_messageInfo_Substation.DiscardUnknown(m)
}

var xxx_messageInfo_Substation proto.InternalMessageInfo

func (m *Substation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Substation) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Substation) GetLoad() uint64 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *Substation) GetStatus() Substation_Status {
	if m != nil {
		return m.Status
	}
	return Substation_ONLINE
}

func init() {
	proto.RegisterEnum("structs.structs.Substation_Status", Substation_Status_name, Substation_Status_value)
	proto.RegisterType((*Substation)(nil), "structs.structs.Substation")
}

func init() { proto.RegisterFile("structs/structs/substation.proto", fileDescriptor_1dfac9318fba59fb) }

var fileDescriptor_1dfac9318fba59fb = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x28, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0x29, 0xd6, 0x87, 0xd3, 0xa5, 0x49, 0xc5, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xfc, 0x50, 0x19, 0x3d, 0x28, 0x2d, 0x25, 0x92, 0x9e, 0x9f,
	0x9e, 0x0f, 0x96, 0xd3, 0x07, 0xb1, 0x20, 0xca, 0xa4, 0x30, 0x0c, 0x4a, 0xcc, 0xc9, 0xc9, 0x4f,
	0x46, 0x32, 0x48, 0xe9, 0x38, 0x23, 0x17, 0x57, 0x30, 0xdc, 0x74, 0x21, 0x3e, 0x2e, 0xa6, 0xcc,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x11, 0x2e, 0xd6, 0x82,
	0xfc, 0xf2, 0xd4, 0x22, 0x09, 0x26, 0xb0, 0x10, 0x84, 0x23, 0x24, 0xc4, 0xc5, 0x92, 0x93, 0x9f,
	0x98, 0x22, 0xc1, 0x0c, 0x16, 0x04, 0xb3, 0x85, 0xac, 0xb8, 0xd8, 0x40, 0x86, 0x94, 0x16, 0x4b,
	0xb0, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x29, 0xe9, 0xa1, 0x39, 0x51, 0x0f, 0x61, 0x8d, 0x5e, 0x30,
	0x58, 0x65, 0x10, 0x54, 0x87, 0x92, 0x33, 0x17, 0x1b, 0x44, 0x44, 0x88, 0x8b, 0x8b, 0xcd, 0xdf,
	0xcf, 0xc7, 0xd3, 0xcf, 0x55, 0x80, 0x41, 0x88, 0x9b, 0x8b, 0xdd, 0xdf, 0xcd, 0x0d, 0xcc, 0x61,
	0x17, 0x12, 0xe2, 0xe2, 0x73, 0x71, 0x75, 0xf6, 0xf7, 0xf5, 0xf5, 0x0c, 0x0e, 0xf6, 0xf4, 0xf7,
	0x73, 0x75, 0x11, 0x90, 0x10, 0xe2, 0xe1, 0xe2, 0xf0, 0x0f, 0x73, 0x0d, 0xf2, 0xf1, 0x77, 0x74,
	0x11, 0x50, 0x70, 0x32, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x71,
	0x98, 0xef, 0x2b, 0xe0, 0xe1, 0x50, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x03, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0xed, 0x4f, 0x13, 0x70, 0x01, 0x00, 0x00,
}

func (m *Substation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Substation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Substation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Load != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Load))
		i--
		dAtA[i] = 0x18
	}
	if m.Power != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSubstation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubstation(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubstation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Substation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSubstation(uint64(m.Id))
	}
	if m.Power != 0 {
		n += 1 + sovSubstation(uint64(m.Power))
	}
	if m.Load != 0 {
		n += 1 + sovSubstation(uint64(m.Load))
	}
	if m.Status != 0 {
		n += 1 + sovSubstation(uint64(m.Status))
	}
	return n
}

func sovSubstation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubstation(x uint64) (n int) {
	return sovSubstation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Substation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubstation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Substation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Substation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Substation_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubstation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubstation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubstation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubstation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubstation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubstation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubstation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubstation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubstation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubstation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubstation = fmt.Errorf("proto: unexpected end of group")
)
