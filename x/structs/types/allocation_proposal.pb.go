// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/allocation_proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllocationProposal struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceType    ObjectType `protobuf:"varint,2,opt,name=sourceType,proto3,enum=structs.structs.ObjectType" json:"sourceType,omitempty"`
	SourceId      uint64     `protobuf:"varint,3,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	DestinationId uint64     `protobuf:"varint,4,opt,name=destinationId,proto3" json:"destinationId,omitempty"`
	Power         uint64     `protobuf:"varint,5,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *AllocationProposal) Reset()         { *m = AllocationProposal{} }
func (m *AllocationProposal) String() string { return proto.CompactTextString(m) }
func (*AllocationProposal) ProtoMessage()    {}
func (*AllocationProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_0be2b36a11e3f842, []int{0}
}
func (m *AllocationProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocationProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocationProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocationProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationProposal.Merge(m, src)
}
func (m *AllocationProposal) XXX_Size() int {
	return m.Size()
}
func (m *AllocationProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationProposal proto.InternalMessageInfo

func (m *AllocationProposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AllocationProposal) GetSourceType() ObjectType {
	if m != nil {
		return m.SourceType
	}
	return ObjectType_faction
}

func (m *AllocationProposal) GetSourceId() uint64 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *AllocationProposal) GetDestinationId() uint64 {
	if m != nil {
		return m.DestinationId
	}
	return 0
}

func (m *AllocationProposal) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func init() {
	proto.RegisterType((*AllocationProposal)(nil), "structs.structs.AllocationProposal")
}

func init() {
	proto.RegisterFile("structs/structs/allocation_proposal.proto", fileDescriptor_0be2b36a11e3f842)
}

var fileDescriptor_0be2b36a11e3f842 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x2e, 0x29, 0x2a,
	0x4d, 0x2e, 0x29, 0xd6, 0x87, 0xd1, 0x89, 0x39, 0x39, 0xf9, 0xc9, 0x89, 0x25, 0x99, 0xf9, 0x79,
	0xf1, 0x05, 0x45, 0xf9, 0x05, 0xf9, 0xc5, 0x89, 0x39, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xfc, 0x50, 0x25, 0x7a, 0x50, 0x5a, 0x4a, 0x24, 0x3d, 0x3f, 0x3d, 0x1f, 0x2c, 0xa7, 0x0f, 0x62,
	0x41, 0x94, 0x49, 0x49, 0x26, 0xe7, 0x17, 0xe7, 0xe6, 0x17, 0xc7, 0x43, 0x24, 0x20, 0x1c, 0xa8,
	0x94, 0x14, 0xba, 0x65, 0xd9, 0xa9, 0x95, 0x50, 0x39, 0xa5, 0x9d, 0x8c, 0x5c, 0x42, 0x8e, 0x70,
	0xbb, 0x03, 0xa0, 0x56, 0x0b, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0,
	0x04, 0x31, 0x65, 0xa6, 0x08, 0x59, 0x73, 0x71, 0x15, 0xe7, 0x97, 0x16, 0x25, 0xa7, 0x86, 0x54,
	0x16, 0xa4, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x19, 0x49, 0xeb, 0xa1, 0xb9, 0x4c, 0x2f, 0x3f,
	0x29, 0x2b, 0x35, 0xb9, 0x04, 0xa4, 0x24, 0x08, 0x49, 0xb9, 0x90, 0x14, 0x17, 0x07, 0x84, 0xe7,
	0x99, 0x22, 0xc1, 0x0c, 0x36, 0x12, 0xce, 0x17, 0x52, 0xe1, 0xe2, 0x4d, 0x49, 0x2d, 0x2e, 0xc9,
	0xcc, 0x03, 0xdb, 0xef, 0x99, 0x22, 0xc1, 0x02, 0x56, 0x80, 0x2a, 0x28, 0x24, 0xc2, 0xc5, 0x5a,
	0x90, 0x5f, 0x9e, 0x5a, 0x24, 0xc1, 0x0a, 0x96, 0x85, 0x70, 0x9c, 0x0c, 0x4f, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96,
	0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x1c, 0xe6, 0xd3, 0x0a, 0xb8, 0x9f, 0x4b, 0x2a, 0x0b,
	0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xbe, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xdb, 0xeb,
	0xc0, 0x80, 0x01, 0x00, 0x00,
}

func (m *AllocationProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocationProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocationProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintAllocationProposal(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x28
	}
	if m.DestinationId != 0 {
		i = encodeVarintAllocationProposal(dAtA, i, uint64(m.DestinationId))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceId != 0 {
		i = encodeVarintAllocationProposal(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceType != 0 {
		i = encodeVarintAllocationProposal(dAtA, i, uint64(m.SourceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAllocationProposal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAllocationProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovAllocationProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllocationProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAllocationProposal(uint64(m.Id))
	}
	if m.SourceType != 0 {
		n += 1 + sovAllocationProposal(uint64(m.SourceType))
	}
	if m.SourceId != 0 {
		n += 1 + sovAllocationProposal(uint64(m.SourceId))
	}
	if m.DestinationId != 0 {
		n += 1 + sovAllocationProposal(uint64(m.DestinationId))
	}
	if m.Power != 0 {
		n += 1 + sovAllocationProposal(uint64(m.Power))
	}
	return n
}

func sovAllocationProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAllocationProposal(x uint64) (n int) {
	return sovAllocationProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocationProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAllocationProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocationProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocationProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceType", wireType)
			}
			m.SourceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceType |= ObjectType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationId", wireType)
			}
			m.DestinationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAllocationProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAllocationProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAllocationProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAllocationProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAllocationProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAllocationProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAllocationProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAllocationProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAllocationProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAllocationProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAllocationProposal = fmt.Errorf("proto: unexpected end of group")
)
