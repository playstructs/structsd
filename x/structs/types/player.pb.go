// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: structs/structs/player.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Player struct {
	Id             uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId        uint64     `protobuf:"varint,2,opt,name=guildId,proto3" json:"guildId,omitempty"`
	SubstationId   uint64     `protobuf:"varint,3,opt,name=substationId,proto3" json:"substationId,omitempty"`
	Creator        string     `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	PrimaryAddress string     `protobuf:"bytes,5,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	PlanetId       uint64     `protobuf:"varint,6,opt,name=planetId,proto3" json:"planetId,omitempty"`
	Load           uint64     `protobuf:"varint,7,opt,name=load,proto3" json:"load,omitempty"`
	Storage        types.Coin `protobuf:"bytes,8,opt,name=storage,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"storage"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca9c11ebc41e4761, []int{0}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetGuildId() uint64 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *Player) GetSubstationId() uint64 {
	if m != nil {
		return m.SubstationId
	}
	return 0
}

func (m *Player) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Player) GetPrimaryAddress() string {
	if m != nil {
		return m.PrimaryAddress
	}
	return ""
}

func (m *Player) GetPlanetId() uint64 {
	if m != nil {
		return m.PlanetId
	}
	return 0
}

func (m *Player) GetLoad() uint64 {
	if m != nil {
		return m.Load
	}
	return 0
}

func (m *Player) GetStorage() types.Coin {
	if m != nil {
		return m.Storage
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Player)(nil), "structs.Player")
}

func init() { proto.RegisterFile("structs/structs/player.proto", fileDescriptor_ca9c11ebc41e4761) }

var fileDescriptor_ca9c11ebc41e4761 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0xc6, 0x93, 0xdc, 0xde, 0xa6, 0xd7, 0xf7, 0xaa, 0x83, 0x55, 0xe9, 0xba, 0x15, 0x72, 0xab,
	0x4e, 0x59, 0x9a, 0x50, 0x78, 0x01, 0x28, 0x53, 0x37, 0x14, 0x36, 0x16, 0xe4, 0xc4, 0x56, 0xb0,
	0x48, 0xe3, 0xc8, 0x76, 0x10, 0x7d, 0x0b, 0x9e, 0x83, 0x99, 0x87, 0x28, 0x5b, 0xc5, 0xc4, 0x04,
	0xa8, 0x7d, 0x11, 0x14, 0xc7, 0xa9, 0x04, 0x93, 0xcf, 0xf7, 0xfb, 0xce, 0x1f, 0xeb, 0x1c, 0x70,
	0xa4, 0xb4, 0xac, 0x52, 0xad, 0xa2, 0xf6, 0x2d, 0x73, 0xb2, 0x66, 0x32, 0x2c, 0xa5, 0xd0, 0x02,
	0xfa, 0x96, 0x8e, 0x70, 0x2a, 0xd4, 0x4a, 0xa8, 0x28, 0x21, 0x8a, 0x45, 0xf7, 0xf3, 0x84, 0x69,
	0x32, 0x8f, 0x52, 0xc1, 0x8b, 0x26, 0x71, 0x34, 0x6c, 0xfc, 0x1b, 0xa3, 0xa2, 0x46, 0x58, 0x6b,
	0x90, 0x89, 0x4c, 0x34, 0xbc, 0x8e, 0x1a, 0x3a, 0x7d, 0xf1, 0x40, 0xf7, 0xd2, 0x8c, 0x82, 0x7d,
	0xe0, 0x71, 0x8a, 0xdc, 0x89, 0x1b, 0x74, 0x62, 0x8f, 0x53, 0x88, 0x80, 0x9f, 0x55, 0x3c, 0xa7,
	0x4b, 0x8a, 0x3c, 0x03, 0x5b, 0x09, 0xa7, 0xe0, 0x9f, 0xaa, 0x12, 0xa5, 0x89, 0xe6, 0xa2, 0x58,
	0x52, 0xf4, 0xcb, 0xd8, 0xdf, 0x58, 0x5d, 0x9d, 0x4a, 0x46, 0xb4, 0x90, 0xa8, 0x33, 0x71, 0x83,
	0x3f, 0x71, 0x2b, 0xe1, 0x19, 0xe8, 0x97, 0x92, 0xaf, 0x88, 0x5c, 0x9f, 0x53, 0x2a, 0x99, 0x52,
	0xe8, 0x77, 0x9d, 0xb0, 0x40, 0xaf, 0xcf, 0xb3, 0x81, 0xfd, 0xb2, 0x75, 0xae, 0xb4, 0xe4, 0x45,
	0x16, 0xff, 0xc8, 0x87, 0x23, 0xd0, 0x2b, 0x73, 0x52, 0x30, 0xbd, 0xa4, 0xa8, 0x6b, 0x66, 0x1f,
	0x34, 0x84, 0xa0, 0x93, 0x0b, 0x42, 0x91, 0x6f, 0xb8, 0x89, 0x21, 0x03, 0xbe, 0xd2, 0x42, 0x92,
	0x8c, 0xa1, 0xde, 0xc4, 0x0d, 0xfe, 0x9e, 0x0c, 0x43, 0x3b, 0xa7, 0xde, 0x63, 0x68, 0xf7, 0x18,
	0x5e, 0x08, 0x5e, 0x2c, 0x8e, 0x37, 0xef, 0x63, 0xe7, 0xe9, 0x63, 0x1c, 0x64, 0x5c, 0xdf, 0x56,
	0x49, 0x98, 0x8a, 0x95, 0xdd, 0xa3, 0x7d, 0x66, 0x8a, 0xde, 0x45, 0x7a, 0x5d, 0x32, 0x65, 0x0a,
	0x54, 0xdc, 0xf6, 0x5e, 0xcc, 0x37, 0x3b, 0xec, 0x6e, 0x77, 0xd8, 0xfd, 0xdc, 0x61, 0xf7, 0x71,
	0x8f, 0x9d, 0xed, 0x1e, 0x3b, 0x6f, 0x7b, 0xec, 0x5c, 0xff, 0x6f, 0xaf, 0xfa, 0x70, 0xb8, 0xaf,
	0xe9, 0x90, 0x74, 0xcd, 0x15, 0x4e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xda, 0xbc, 0x90,
	0xff, 0x01, 0x00, 0x00,
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Player) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Storage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPlayer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Load != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Load))
		i--
		dAtA[i] = 0x38
	}
	if m.PlanetId != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.PlanetId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PrimaryAddress) > 0 {
		i -= len(m.PrimaryAddress)
		copy(dAtA[i:], m.PrimaryAddress)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.PrimaryAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPlayer(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.SubstationId != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.SubstationId))
		i--
		dAtA[i] = 0x18
	}
	if m.GuildId != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.GuildId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPlayer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPlayer(uint64(m.Id))
	}
	if m.GuildId != 0 {
		n += 1 + sovPlayer(uint64(m.GuildId))
	}
	if m.SubstationId != 0 {
		n += 1 + sovPlayer(uint64(m.SubstationId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	l = len(m.PrimaryAddress)
	if l > 0 {
		n += 1 + l + sovPlayer(uint64(l))
	}
	if m.PlanetId != 0 {
		n += 1 + sovPlayer(uint64(m.PlanetId))
	}
	if m.Load != 0 {
		n += 1 + sovPlayer(uint64(m.Load))
	}
	l = m.Storage.Size()
	n += 1 + l + sovPlayer(uint64(l))
	return n
}

func sovPlayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayer(x uint64) (n int) {
	return sovPlayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubstationId", wireType)
			}
			m.SubstationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubstationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanetId", wireType)
			}
			m.PlanetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			m.Load = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Load |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Storage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayer = fmt.Errorf("proto: unexpected end of group")
)
