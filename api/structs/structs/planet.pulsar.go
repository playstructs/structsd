// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package structs

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Planet_7_list)(nil)

type _Planet_7_list struct {
	list *[]string
}

func (x *_Planet_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Planet_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Planet_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Planet_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Planet_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Planet at list field Space as it is not of Message kind"))
}

func (x *_Planet_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Planet_7_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Planet_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Planet_8_list)(nil)

type _Planet_8_list struct {
	list *[]string
}

func (x *_Planet_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Planet_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Planet_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Planet_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Planet_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Planet at list field Sky as it is not of Message kind"))
}

func (x *_Planet_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Planet_8_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Planet_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Planet_9_list)(nil)

type _Planet_9_list struct {
	list *[]string
}

func (x *_Planet_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Planet_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Planet_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Planet_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Planet_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Planet at list field Land as it is not of Message kind"))
}

func (x *_Planet_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Planet_9_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Planet_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Planet_10_list)(nil)

type _Planet_10_list struct {
	list *[]string
}

func (x *_Planet_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Planet_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Planet_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Planet_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Planet_10_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Planet at list field Water as it is not of Message kind"))
}

func (x *_Planet_10_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Planet_10_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Planet_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Planet              protoreflect.MessageDescriptor
	fd_Planet_id           protoreflect.FieldDescriptor
	fd_Planet_maxOre       protoreflect.FieldDescriptor
	fd_Planet_OreRemaining protoreflect.FieldDescriptor
	fd_Planet_OreStored    protoreflect.FieldDescriptor
	fd_Planet_creator      protoreflect.FieldDescriptor
	fd_Planet_owner        protoreflect.FieldDescriptor
	fd_Planet_space        protoreflect.FieldDescriptor
	fd_Planet_sky          protoreflect.FieldDescriptor
	fd_Planet_land         protoreflect.FieldDescriptor
	fd_Planet_water        protoreflect.FieldDescriptor
	fd_Planet_spaceSlots   protoreflect.FieldDescriptor
	fd_Planet_skySlots     protoreflect.FieldDescriptor
	fd_Planet_landSlots    protoreflect.FieldDescriptor
	fd_Planet_waterSlots   protoreflect.FieldDescriptor
	fd_Planet_status       protoreflect.FieldDescriptor
)

func init() {
	file_structs_structs_planet_proto_init()
	md_Planet = File_structs_structs_planet_proto.Messages().ByName("Planet")
	fd_Planet_id = md_Planet.Fields().ByName("id")
	fd_Planet_maxOre = md_Planet.Fields().ByName("maxOre")
	fd_Planet_OreRemaining = md_Planet.Fields().ByName("OreRemaining")
	fd_Planet_OreStored = md_Planet.Fields().ByName("OreStored")
	fd_Planet_creator = md_Planet.Fields().ByName("creator")
	fd_Planet_owner = md_Planet.Fields().ByName("owner")
	fd_Planet_space = md_Planet.Fields().ByName("space")
	fd_Planet_sky = md_Planet.Fields().ByName("sky")
	fd_Planet_land = md_Planet.Fields().ByName("land")
	fd_Planet_water = md_Planet.Fields().ByName("water")
	fd_Planet_spaceSlots = md_Planet.Fields().ByName("spaceSlots")
	fd_Planet_skySlots = md_Planet.Fields().ByName("skySlots")
	fd_Planet_landSlots = md_Planet.Fields().ByName("landSlots")
	fd_Planet_waterSlots = md_Planet.Fields().ByName("waterSlots")
	fd_Planet_status = md_Planet.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_Planet)(nil)

type fastReflection_Planet Planet

func (x *Planet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Planet)(x)
}

func (x *Planet) slowProtoReflect() protoreflect.Message {
	mi := &file_structs_structs_planet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Planet_messageType fastReflection_Planet_messageType
var _ protoreflect.MessageType = fastReflection_Planet_messageType{}

type fastReflection_Planet_messageType struct{}

func (x fastReflection_Planet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Planet)(nil)
}
func (x fastReflection_Planet_messageType) New() protoreflect.Message {
	return new(fastReflection_Planet)
}
func (x fastReflection_Planet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Planet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Planet) Descriptor() protoreflect.MessageDescriptor {
	return md_Planet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Planet) Type() protoreflect.MessageType {
	return _fastReflection_Planet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Planet) New() protoreflect.Message {
	return new(fastReflection_Planet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Planet) Interface() protoreflect.ProtoMessage {
	return (*Planet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Planet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_Planet_id, value) {
			return
		}
	}
	if x.MaxOre != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxOre)
		if !f(fd_Planet_maxOre, value) {
			return
		}
	}
	if x.OreRemaining != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OreRemaining)
		if !f(fd_Planet_OreRemaining, value) {
			return
		}
	}
	if x.OreStored != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OreStored)
		if !f(fd_Planet_OreStored, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Planet_creator, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_Planet_owner, value) {
			return
		}
	}
	if len(x.Space) != 0 {
		value := protoreflect.ValueOfList(&_Planet_7_list{list: &x.Space})
		if !f(fd_Planet_space, value) {
			return
		}
	}
	if len(x.Sky) != 0 {
		value := protoreflect.ValueOfList(&_Planet_8_list{list: &x.Sky})
		if !f(fd_Planet_sky, value) {
			return
		}
	}
	if len(x.Land) != 0 {
		value := protoreflect.ValueOfList(&_Planet_9_list{list: &x.Land})
		if !f(fd_Planet_land, value) {
			return
		}
	}
	if len(x.Water) != 0 {
		value := protoreflect.ValueOfList(&_Planet_10_list{list: &x.Water})
		if !f(fd_Planet_water, value) {
			return
		}
	}
	if x.SpaceSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SpaceSlots)
		if !f(fd_Planet_spaceSlots, value) {
			return
		}
	}
	if x.SkySlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SkySlots)
		if !f(fd_Planet_skySlots, value) {
			return
		}
	}
	if x.LandSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LandSlots)
		if !f(fd_Planet_landSlots, value) {
			return
		}
	}
	if x.WaterSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.WaterSlots)
		if !f(fd_Planet_waterSlots, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Planet_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Planet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "structs.structs.Planet.id":
		return x.Id != ""
	case "structs.structs.Planet.maxOre":
		return x.MaxOre != uint64(0)
	case "structs.structs.Planet.OreRemaining":
		return x.OreRemaining != uint64(0)
	case "structs.structs.Planet.OreStored":
		return x.OreStored != uint64(0)
	case "structs.structs.Planet.creator":
		return x.Creator != ""
	case "structs.structs.Planet.owner":
		return x.Owner != ""
	case "structs.structs.Planet.space":
		return len(x.Space) != 0
	case "structs.structs.Planet.sky":
		return len(x.Sky) != 0
	case "structs.structs.Planet.land":
		return len(x.Land) != 0
	case "structs.structs.Planet.water":
		return len(x.Water) != 0
	case "structs.structs.Planet.spaceSlots":
		return x.SpaceSlots != uint64(0)
	case "structs.structs.Planet.skySlots":
		return x.SkySlots != uint64(0)
	case "structs.structs.Planet.landSlots":
		return x.LandSlots != uint64(0)
	case "structs.structs.Planet.waterSlots":
		return x.WaterSlots != uint64(0)
	case "structs.structs.Planet.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Planet"))
		}
		panic(fmt.Errorf("message structs.structs.Planet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Planet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "structs.structs.Planet.id":
		x.Id = ""
	case "structs.structs.Planet.maxOre":
		x.MaxOre = uint64(0)
	case "structs.structs.Planet.OreRemaining":
		x.OreRemaining = uint64(0)
	case "structs.structs.Planet.OreStored":
		x.OreStored = uint64(0)
	case "structs.structs.Planet.creator":
		x.Creator = ""
	case "structs.structs.Planet.owner":
		x.Owner = ""
	case "structs.structs.Planet.space":
		x.Space = nil
	case "structs.structs.Planet.sky":
		x.Sky = nil
	case "structs.structs.Planet.land":
		x.Land = nil
	case "structs.structs.Planet.water":
		x.Water = nil
	case "structs.structs.Planet.spaceSlots":
		x.SpaceSlots = uint64(0)
	case "structs.structs.Planet.skySlots":
		x.SkySlots = uint64(0)
	case "structs.structs.Planet.landSlots":
		x.LandSlots = uint64(0)
	case "structs.structs.Planet.waterSlots":
		x.WaterSlots = uint64(0)
	case "structs.structs.Planet.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Planet"))
		}
		panic(fmt.Errorf("message structs.structs.Planet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Planet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "structs.structs.Planet.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "structs.structs.Planet.maxOre":
		value := x.MaxOre
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.OreRemaining":
		value := x.OreRemaining
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.OreStored":
		value := x.OreStored
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "structs.structs.Planet.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "structs.structs.Planet.space":
		if len(x.Space) == 0 {
			return protoreflect.ValueOfList(&_Planet_7_list{})
		}
		listValue := &_Planet_7_list{list: &x.Space}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Planet.sky":
		if len(x.Sky) == 0 {
			return protoreflect.ValueOfList(&_Planet_8_list{})
		}
		listValue := &_Planet_8_list{list: &x.Sky}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Planet.land":
		if len(x.Land) == 0 {
			return protoreflect.ValueOfList(&_Planet_9_list{})
		}
		listValue := &_Planet_9_list{list: &x.Land}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Planet.water":
		if len(x.Water) == 0 {
			return protoreflect.ValueOfList(&_Planet_10_list{})
		}
		listValue := &_Planet_10_list{list: &x.Water}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Planet.spaceSlots":
		value := x.SpaceSlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.skySlots":
		value := x.SkySlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.landSlots":
		value := x.LandSlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.waterSlots":
		value := x.WaterSlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Planet.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Planet"))
		}
		panic(fmt.Errorf("message structs.structs.Planet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Planet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "structs.structs.Planet.id":
		x.Id = value.Interface().(string)
	case "structs.structs.Planet.maxOre":
		x.MaxOre = value.Uint()
	case "structs.structs.Planet.OreRemaining":
		x.OreRemaining = value.Uint()
	case "structs.structs.Planet.OreStored":
		x.OreStored = value.Uint()
	case "structs.structs.Planet.creator":
		x.Creator = value.Interface().(string)
	case "structs.structs.Planet.owner":
		x.Owner = value.Interface().(string)
	case "structs.structs.Planet.space":
		lv := value.List()
		clv := lv.(*_Planet_7_list)
		x.Space = *clv.list
	case "structs.structs.Planet.sky":
		lv := value.List()
		clv := lv.(*_Planet_8_list)
		x.Sky = *clv.list
	case "structs.structs.Planet.land":
		lv := value.List()
		clv := lv.(*_Planet_9_list)
		x.Land = *clv.list
	case "structs.structs.Planet.water":
		lv := value.List()
		clv := lv.(*_Planet_10_list)
		x.Water = *clv.list
	case "structs.structs.Planet.spaceSlots":
		x.SpaceSlots = value.Uint()
	case "structs.structs.Planet.skySlots":
		x.SkySlots = value.Uint()
	case "structs.structs.Planet.landSlots":
		x.LandSlots = value.Uint()
	case "structs.structs.Planet.waterSlots":
		x.WaterSlots = value.Uint()
	case "structs.structs.Planet.status":
		x.Status = (PlanetStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Planet"))
		}
		panic(fmt.Errorf("message structs.structs.Planet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Planet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.Planet.space":
		if x.Space == nil {
			x.Space = []string{}
		}
		value := &_Planet_7_list{list: &x.Space}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Planet.sky":
		if x.Sky == nil {
			x.Sky = []string{}
		}
		value := &_Planet_8_list{list: &x.Sky}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Planet.land":
		if x.Land == nil {
			x.Land = []string{}
		}
		value := &_Planet_9_list{list: &x.Land}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Planet.water":
		if x.Water == nil {
			x.Water = []string{}
		}
		value := &_Planet_10_list{list: &x.Water}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Planet.id":
		panic(fmt.Errorf("field id of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.maxOre":
		panic(fmt.Errorf("field maxOre of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.OreRemaining":
		panic(fmt.Errorf("field OreRemaining of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.OreStored":
		panic(fmt.Errorf("field OreStored of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.creator":
		panic(fmt.Errorf("field creator of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.owner":
		panic(fmt.Errorf("field owner of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.spaceSlots":
		panic(fmt.Errorf("field spaceSlots of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.skySlots":
		panic(fmt.Errorf("field skySlots of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.landSlots":
		panic(fmt.Errorf("field landSlots of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.waterSlots":
		panic(fmt.Errorf("field waterSlots of message structs.structs.Planet is not mutable"))
	case "structs.structs.Planet.status":
		panic(fmt.Errorf("field status of message structs.structs.Planet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Planet"))
		}
		panic(fmt.Errorf("message structs.structs.Planet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Planet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.Planet.id":
		return protoreflect.ValueOfString("")
	case "structs.structs.Planet.maxOre":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.OreRemaining":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.OreStored":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.creator":
		return protoreflect.ValueOfString("")
	case "structs.structs.Planet.owner":
		return protoreflect.ValueOfString("")
	case "structs.structs.Planet.space":
		list := []string{}
		return protoreflect.ValueOfList(&_Planet_7_list{list: &list})
	case "structs.structs.Planet.sky":
		list := []string{}
		return protoreflect.ValueOfList(&_Planet_8_list{list: &list})
	case "structs.structs.Planet.land":
		list := []string{}
		return protoreflect.ValueOfList(&_Planet_9_list{list: &list})
	case "structs.structs.Planet.water":
		list := []string{}
		return protoreflect.ValueOfList(&_Planet_10_list{list: &list})
	case "structs.structs.Planet.spaceSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.skySlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.landSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.waterSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Planet.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Planet"))
		}
		panic(fmt.Errorf("message structs.structs.Planet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Planet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in structs.structs.Planet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Planet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Planet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Planet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Planet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Planet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxOre != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxOre))
		}
		if x.OreRemaining != 0 {
			n += 1 + runtime.Sov(uint64(x.OreRemaining))
		}
		if x.OreStored != 0 {
			n += 1 + runtime.Sov(uint64(x.OreStored))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Space) > 0 {
			for _, s := range x.Space {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Sky) > 0 {
			for _, s := range x.Sky {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Land) > 0 {
			for _, s := range x.Land {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Water) > 0 {
			for _, s := range x.Water {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.SpaceSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.SpaceSlots))
		}
		if x.SkySlots != 0 {
			n += 1 + runtime.Sov(uint64(x.SkySlots))
		}
		if x.LandSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.LandSlots))
		}
		if x.WaterSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.WaterSlots))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Planet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x78
		}
		if x.WaterSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WaterSlots))
			i--
			dAtA[i] = 0x70
		}
		if x.LandSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LandSlots))
			i--
			dAtA[i] = 0x68
		}
		if x.SkySlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SkySlots))
			i--
			dAtA[i] = 0x60
		}
		if x.SpaceSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SpaceSlots))
			i--
			dAtA[i] = 0x58
		}
		if len(x.Water) > 0 {
			for iNdEx := len(x.Water) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Water[iNdEx])
				copy(dAtA[i:], x.Water[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Water[iNdEx])))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.Land) > 0 {
			for iNdEx := len(x.Land) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Land[iNdEx])
				copy(dAtA[i:], x.Land[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Land[iNdEx])))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.Sky) > 0 {
			for iNdEx := len(x.Sky) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Sky[iNdEx])
				copy(dAtA[i:], x.Sky[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sky[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.Space) > 0 {
			for iNdEx := len(x.Space) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Space[iNdEx])
				copy(dAtA[i:], x.Space[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Space[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x2a
		}
		if x.OreStored != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OreStored))
			i--
			dAtA[i] = 0x20
		}
		if x.OreRemaining != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OreRemaining))
			i--
			dAtA[i] = 0x18
		}
		if x.MaxOre != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxOre))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Planet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Planet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Planet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxOre", wireType)
				}
				x.MaxOre = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxOre |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OreRemaining", wireType)
				}
				x.OreRemaining = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OreRemaining |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OreStored", wireType)
				}
				x.OreStored = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OreStored |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Space = append(x.Space, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sky", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sky = append(x.Sky, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Land", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Land = append(x.Land, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Water", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Water = append(x.Water, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SpaceSlots", wireType)
				}
				x.SpaceSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SpaceSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SkySlots", wireType)
				}
				x.SkySlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SkySlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LandSlots", wireType)
				}
				x.LandSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LandSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WaterSlots", wireType)
				}
				x.WaterSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WaterSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= PlanetStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PlanetAttributeRecord             protoreflect.MessageDescriptor
	fd_PlanetAttributeRecord_attributeId protoreflect.FieldDescriptor
	fd_PlanetAttributeRecord_value       protoreflect.FieldDescriptor
)

func init() {
	file_structs_structs_planet_proto_init()
	md_PlanetAttributeRecord = File_structs_structs_planet_proto.Messages().ByName("PlanetAttributeRecord")
	fd_PlanetAttributeRecord_attributeId = md_PlanetAttributeRecord.Fields().ByName("attributeId")
	fd_PlanetAttributeRecord_value = md_PlanetAttributeRecord.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_PlanetAttributeRecord)(nil)

type fastReflection_PlanetAttributeRecord PlanetAttributeRecord

func (x *PlanetAttributeRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PlanetAttributeRecord)(x)
}

func (x *PlanetAttributeRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_structs_structs_planet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PlanetAttributeRecord_messageType fastReflection_PlanetAttributeRecord_messageType
var _ protoreflect.MessageType = fastReflection_PlanetAttributeRecord_messageType{}

type fastReflection_PlanetAttributeRecord_messageType struct{}

func (x fastReflection_PlanetAttributeRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PlanetAttributeRecord)(nil)
}
func (x fastReflection_PlanetAttributeRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_PlanetAttributeRecord)
}
func (x fastReflection_PlanetAttributeRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PlanetAttributeRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PlanetAttributeRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_PlanetAttributeRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PlanetAttributeRecord) Type() protoreflect.MessageType {
	return _fastReflection_PlanetAttributeRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PlanetAttributeRecord) New() protoreflect.Message {
	return new(fastReflection_PlanetAttributeRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PlanetAttributeRecord) Interface() protoreflect.ProtoMessage {
	return (*PlanetAttributeRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PlanetAttributeRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AttributeId != "" {
		value := protoreflect.ValueOfString(x.AttributeId)
		if !f(fd_PlanetAttributeRecord_attributeId, value) {
			return
		}
	}
	if x.Value != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Value)
		if !f(fd_PlanetAttributeRecord_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PlanetAttributeRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "structs.structs.PlanetAttributeRecord.attributeId":
		return x.AttributeId != ""
	case "structs.structs.PlanetAttributeRecord.value":
		return x.Value != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.PlanetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.PlanetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanetAttributeRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "structs.structs.PlanetAttributeRecord.attributeId":
		x.AttributeId = ""
	case "structs.structs.PlanetAttributeRecord.value":
		x.Value = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.PlanetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.PlanetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PlanetAttributeRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "structs.structs.PlanetAttributeRecord.attributeId":
		value := x.AttributeId
		return protoreflect.ValueOfString(value)
	case "structs.structs.PlanetAttributeRecord.value":
		value := x.Value
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.PlanetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.PlanetAttributeRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanetAttributeRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "structs.structs.PlanetAttributeRecord.attributeId":
		x.AttributeId = value.Interface().(string)
	case "structs.structs.PlanetAttributeRecord.value":
		x.Value = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.PlanetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.PlanetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanetAttributeRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.PlanetAttributeRecord.attributeId":
		panic(fmt.Errorf("field attributeId of message structs.structs.PlanetAttributeRecord is not mutable"))
	case "structs.structs.PlanetAttributeRecord.value":
		panic(fmt.Errorf("field value of message structs.structs.PlanetAttributeRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.PlanetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.PlanetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PlanetAttributeRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.PlanetAttributeRecord.attributeId":
		return protoreflect.ValueOfString("")
	case "structs.structs.PlanetAttributeRecord.value":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.PlanetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.PlanetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PlanetAttributeRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in structs.structs.PlanetAttributeRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PlanetAttributeRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanetAttributeRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PlanetAttributeRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PlanetAttributeRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PlanetAttributeRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AttributeId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Value != 0 {
			n += 1 + runtime.Sov(uint64(x.Value))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PlanetAttributeRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Value != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Value))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AttributeId) > 0 {
			i -= len(x.AttributeId)
			copy(dAtA[i:], x.AttributeId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AttributeId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PlanetAttributeRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PlanetAttributeRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PlanetAttributeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AttributeId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AttributeId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				x.Value = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Value |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: structs/structs/planet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Planet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxOre       uint64       `protobuf:"varint,2,opt,name=maxOre,proto3" json:"maxOre,omitempty"`
	OreRemaining uint64       `protobuf:"varint,3,opt,name=OreRemaining,proto3" json:"OreRemaining,omitempty"`
	OreStored    uint64       `protobuf:"varint,4,opt,name=OreStored,proto3" json:"OreStored,omitempty"`
	Creator      string       `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner        string       `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Space        []string     `protobuf:"bytes,7,rep,name=space,proto3" json:"space,omitempty"`
	Sky          []string     `protobuf:"bytes,8,rep,name=sky,proto3" json:"sky,omitempty"`
	Land         []string     `protobuf:"bytes,9,rep,name=land,proto3" json:"land,omitempty"`
	Water        []string     `protobuf:"bytes,10,rep,name=water,proto3" json:"water,omitempty"`
	SpaceSlots   uint64       `protobuf:"varint,11,opt,name=spaceSlots,proto3" json:"spaceSlots,omitempty"`
	SkySlots     uint64       `protobuf:"varint,12,opt,name=skySlots,proto3" json:"skySlots,omitempty"`
	LandSlots    uint64       `protobuf:"varint,13,opt,name=landSlots,proto3" json:"landSlots,omitempty"`
	WaterSlots   uint64       `protobuf:"varint,14,opt,name=waterSlots,proto3" json:"waterSlots,omitempty"`
	Status       PlanetStatus `protobuf:"varint,15,opt,name=status,proto3,enum=structs.structs.PlanetStatus" json:"status,omitempty"`
}

func (x *Planet) Reset() {
	*x = Planet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_structs_planet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planet) ProtoMessage() {}

// Deprecated: Use Planet.ProtoReflect.Descriptor instead.
func (*Planet) Descriptor() ([]byte, []int) {
	return file_structs_structs_planet_proto_rawDescGZIP(), []int{0}
}

func (x *Planet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Planet) GetMaxOre() uint64 {
	if x != nil {
		return x.MaxOre
	}
	return 0
}

func (x *Planet) GetOreRemaining() uint64 {
	if x != nil {
		return x.OreRemaining
	}
	return 0
}

func (x *Planet) GetOreStored() uint64 {
	if x != nil {
		return x.OreStored
	}
	return 0
}

func (x *Planet) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Planet) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Planet) GetSpace() []string {
	if x != nil {
		return x.Space
	}
	return nil
}

func (x *Planet) GetSky() []string {
	if x != nil {
		return x.Sky
	}
	return nil
}

func (x *Planet) GetLand() []string {
	if x != nil {
		return x.Land
	}
	return nil
}

func (x *Planet) GetWater() []string {
	if x != nil {
		return x.Water
	}
	return nil
}

func (x *Planet) GetSpaceSlots() uint64 {
	if x != nil {
		return x.SpaceSlots
	}
	return 0
}

func (x *Planet) GetSkySlots() uint64 {
	if x != nil {
		return x.SkySlots
	}
	return 0
}

func (x *Planet) GetLandSlots() uint64 {
	if x != nil {
		return x.LandSlots
	}
	return 0
}

func (x *Planet) GetWaterSlots() uint64 {
	if x != nil {
		return x.WaterSlots
	}
	return 0
}

func (x *Planet) GetStatus() PlanetStatus {
	if x != nil {
		return x.Status
	}
	return PlanetStatus_active
}

type PlanetAttributeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId string `protobuf:"bytes,1,opt,name=attributeId,proto3" json:"attributeId,omitempty"`
	Value       uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PlanetAttributeRecord) Reset() {
	*x = PlanetAttributeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_structs_planet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanetAttributeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanetAttributeRecord) ProtoMessage() {}

// Deprecated: Use PlanetAttributeRecord.ProtoReflect.Descriptor instead.
func (*PlanetAttributeRecord) Descriptor() ([]byte, []int) {
	return file_structs_structs_planet_proto_rawDescGZIP(), []int{1}
}

func (x *PlanetAttributeRecord) GetAttributeId() string {
	if x != nil {
		return x.AttributeId
	}
	return ""
}

func (x *PlanetAttributeRecord) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_structs_structs_planet_proto protoreflect.FileDescriptor

var file_structs_structs_planet_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x1a,
	0x1a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69,
	0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac,
	0x03, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x4f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4f, 0x72,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4f, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x4f, 0x72, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x79,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6b, 0x79, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6b, 0x79, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x05,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xa1,
	0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x42, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xca,
	0x02, 0x0f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0xe2, 0x02, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x10, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x3a, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_structs_structs_planet_proto_rawDescOnce sync.Once
	file_structs_structs_planet_proto_rawDescData = file_structs_structs_planet_proto_rawDesc
)

func file_structs_structs_planet_proto_rawDescGZIP() []byte {
	file_structs_structs_planet_proto_rawDescOnce.Do(func() {
		file_structs_structs_planet_proto_rawDescData = protoimpl.X.CompressGZIP(file_structs_structs_planet_proto_rawDescData)
	})
	return file_structs_structs_planet_proto_rawDescData
}

var file_structs_structs_planet_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_structs_structs_planet_proto_goTypes = []interface{}{
	(*Planet)(nil),                // 0: structs.structs.Planet
	(*PlanetAttributeRecord)(nil), // 1: structs.structs.PlanetAttributeRecord
	(PlanetStatus)(0),             // 2: structs.structs.planetStatus
}
var file_structs_structs_planet_proto_depIdxs = []int32{
	2, // 0: structs.structs.Planet.status:type_name -> structs.structs.planetStatus
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_structs_structs_planet_proto_init() }
func file_structs_structs_planet_proto_init() {
	if File_structs_structs_planet_proto != nil {
		return
	}
	file_structs_structs_keys_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_structs_structs_planet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Planet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structs_structs_planet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanetAttributeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structs_structs_planet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structs_structs_planet_proto_goTypes,
		DependencyIndexes: file_structs_structs_planet_proto_depIdxs,
		MessageInfos:      file_structs_structs_planet_proto_msgTypes,
	}.Build()
	File_structs_structs_planet_proto = out.File
	file_structs_structs_planet_proto_rawDesc = nil
	file_structs_structs_planet_proto_goTypes = nil
	file_structs_structs_planet_proto_depIdxs = nil
}
