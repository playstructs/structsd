// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package structs

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Struct                           protoreflect.MessageDescriptor
	fd_Struct_id                        protoreflect.FieldDescriptor
	fd_Struct_creator                   protoreflect.FieldDescriptor
	fd_Struct_owner                     protoreflect.FieldDescriptor
	fd_Struct_status                    protoreflect.FieldDescriptor
	fd_Struct_maxHealth                 protoreflect.FieldDescriptor
	fd_Struct_health                    protoreflect.FieldDescriptor
	fd_Struct_category                  protoreflect.FieldDescriptor
	fd_Struct_type                      protoreflect.FieldDescriptor
	fd_Struct_ambit                     protoreflect.FieldDescriptor
	fd_Struct_planetId                  protoreflect.FieldDescriptor
	fd_Struct_slot                      protoreflect.FieldDescriptor
	fd_Struct_miningSystem              protoreflect.FieldDescriptor
	fd_Struct_refiningSystem            protoreflect.FieldDescriptor
	fd_Struct_powerSystem               protoreflect.FieldDescriptor
	fd_Struct_buildStartBlock           protoreflect.FieldDescriptor
	fd_Struct_passiveDraw               protoreflect.FieldDescriptor
	fd_Struct_activeMiningSystemDraw    protoreflect.FieldDescriptor
	fd_Struct_activeMiningSystemBlock   protoreflect.FieldDescriptor
	fd_Struct_activeRefiningSystemDraw  protoreflect.FieldDescriptor
	fd_Struct_activeRefiningSystemBlock protoreflect.FieldDescriptor
	fd_Struct_miningSystemStatus        protoreflect.FieldDescriptor
	fd_Struct_refiningSystemStatus      protoreflect.FieldDescriptor
	fd_Struct_powerSystemFuel           protoreflect.FieldDescriptor
	fd_Struct_powerSystemCapacity       protoreflect.FieldDescriptor
	fd_Struct_powerSystemLoad           protoreflect.FieldDescriptor
)

func init() {
	file_structs_structs_struct_proto_init()
	md_Struct = File_structs_structs_struct_proto.Messages().ByName("Struct")
	fd_Struct_id = md_Struct.Fields().ByName("id")
	fd_Struct_creator = md_Struct.Fields().ByName("creator")
	fd_Struct_owner = md_Struct.Fields().ByName("owner")
	fd_Struct_status = md_Struct.Fields().ByName("status")
	fd_Struct_maxHealth = md_Struct.Fields().ByName("maxHealth")
	fd_Struct_health = md_Struct.Fields().ByName("health")
	fd_Struct_category = md_Struct.Fields().ByName("category")
	fd_Struct_type = md_Struct.Fields().ByName("type")
	fd_Struct_ambit = md_Struct.Fields().ByName("ambit")
	fd_Struct_planetId = md_Struct.Fields().ByName("planetId")
	fd_Struct_slot = md_Struct.Fields().ByName("slot")
	fd_Struct_miningSystem = md_Struct.Fields().ByName("miningSystem")
	fd_Struct_refiningSystem = md_Struct.Fields().ByName("refiningSystem")
	fd_Struct_powerSystem = md_Struct.Fields().ByName("powerSystem")
	fd_Struct_buildStartBlock = md_Struct.Fields().ByName("buildStartBlock")
	fd_Struct_passiveDraw = md_Struct.Fields().ByName("passiveDraw")
	fd_Struct_activeMiningSystemDraw = md_Struct.Fields().ByName("activeMiningSystemDraw")
	fd_Struct_activeMiningSystemBlock = md_Struct.Fields().ByName("activeMiningSystemBlock")
	fd_Struct_activeRefiningSystemDraw = md_Struct.Fields().ByName("activeRefiningSystemDraw")
	fd_Struct_activeRefiningSystemBlock = md_Struct.Fields().ByName("activeRefiningSystemBlock")
	fd_Struct_miningSystemStatus = md_Struct.Fields().ByName("miningSystemStatus")
	fd_Struct_refiningSystemStatus = md_Struct.Fields().ByName("refiningSystemStatus")
	fd_Struct_powerSystemFuel = md_Struct.Fields().ByName("powerSystemFuel")
	fd_Struct_powerSystemCapacity = md_Struct.Fields().ByName("powerSystemCapacity")
	fd_Struct_powerSystemLoad = md_Struct.Fields().ByName("powerSystemLoad")
}

var _ protoreflect.Message = (*fastReflection_Struct)(nil)

type fastReflection_Struct Struct

func (x *Struct) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Struct)(x)
}

func (x *Struct) slowProtoReflect() protoreflect.Message {
	mi := &file_structs_structs_struct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Struct_messageType fastReflection_Struct_messageType
var _ protoreflect.MessageType = fastReflection_Struct_messageType{}

type fastReflection_Struct_messageType struct{}

func (x fastReflection_Struct_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Struct)(nil)
}
func (x fastReflection_Struct_messageType) New() protoreflect.Message {
	return new(fastReflection_Struct)
}
func (x fastReflection_Struct_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Struct
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Struct) Descriptor() protoreflect.MessageDescriptor {
	return md_Struct
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Struct) Type() protoreflect.MessageType {
	return _fastReflection_Struct_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Struct) New() protoreflect.Message {
	return new(fastReflection_Struct)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Struct) Interface() protoreflect.ProtoMessage {
	return (*Struct)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Struct) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_Struct_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Struct_creator, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_Struct_owner, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_Struct_status, value) {
			return
		}
	}
	if x.MaxHealth != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxHealth)
		if !f(fd_Struct_maxHealth, value) {
			return
		}
	}
	if x.Health != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Health)
		if !f(fd_Struct_health, value) {
			return
		}
	}
	if x.Category != "" {
		value := protoreflect.ValueOfString(x.Category)
		if !f(fd_Struct_category, value) {
			return
		}
	}
	if x.Type_ != "" {
		value := protoreflect.ValueOfString(x.Type_)
		if !f(fd_Struct_type, value) {
			return
		}
	}
	if x.Ambit != "" {
		value := protoreflect.ValueOfString(x.Ambit)
		if !f(fd_Struct_ambit, value) {
			return
		}
	}
	if x.PlanetId != "" {
		value := protoreflect.ValueOfString(x.PlanetId)
		if !f(fd_Struct_planetId, value) {
			return
		}
	}
	if x.Slot != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Slot)
		if !f(fd_Struct_slot, value) {
			return
		}
	}
	if x.MiningSystem != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MiningSystem)
		if !f(fd_Struct_miningSystem, value) {
			return
		}
	}
	if x.RefiningSystem != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RefiningSystem)
		if !f(fd_Struct_refiningSystem, value) {
			return
		}
	}
	if x.PowerSystem != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PowerSystem)
		if !f(fd_Struct_powerSystem, value) {
			return
		}
	}
	if x.BuildStartBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BuildStartBlock)
		if !f(fd_Struct_buildStartBlock, value) {
			return
		}
	}
	if x.PassiveDraw != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PassiveDraw)
		if !f(fd_Struct_passiveDraw, value) {
			return
		}
	}
	if x.ActiveMiningSystemDraw != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ActiveMiningSystemDraw)
		if !f(fd_Struct_activeMiningSystemDraw, value) {
			return
		}
	}
	if x.ActiveMiningSystemBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ActiveMiningSystemBlock)
		if !f(fd_Struct_activeMiningSystemBlock, value) {
			return
		}
	}
	if x.ActiveRefiningSystemDraw != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ActiveRefiningSystemDraw)
		if !f(fd_Struct_activeRefiningSystemDraw, value) {
			return
		}
	}
	if x.ActiveRefiningSystemBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ActiveRefiningSystemBlock)
		if !f(fd_Struct_activeRefiningSystemBlock, value) {
			return
		}
	}
	if x.MiningSystemStatus != "" {
		value := protoreflect.ValueOfString(x.MiningSystemStatus)
		if !f(fd_Struct_miningSystemStatus, value) {
			return
		}
	}
	if x.RefiningSystemStatus != "" {
		value := protoreflect.ValueOfString(x.RefiningSystemStatus)
		if !f(fd_Struct_refiningSystemStatus, value) {
			return
		}
	}
	if x.PowerSystemFuel != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PowerSystemFuel)
		if !f(fd_Struct_powerSystemFuel, value) {
			return
		}
	}
	if x.PowerSystemCapacity != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PowerSystemCapacity)
		if !f(fd_Struct_powerSystemCapacity, value) {
			return
		}
	}
	if x.PowerSystemLoad != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PowerSystemLoad)
		if !f(fd_Struct_powerSystemLoad, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Struct) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "structs.Struct.id":
		return x.Id != ""
	case "structs.Struct.creator":
		return x.Creator != ""
	case "structs.Struct.owner":
		return x.Owner != ""
	case "structs.Struct.status":
		return x.Status != ""
	case "structs.Struct.maxHealth":
		return x.MaxHealth != uint64(0)
	case "structs.Struct.health":
		return x.Health != uint64(0)
	case "structs.Struct.category":
		return x.Category != ""
	case "structs.Struct.type":
		return x.Type_ != ""
	case "structs.Struct.ambit":
		return x.Ambit != ""
	case "structs.Struct.planetId":
		return x.PlanetId != ""
	case "structs.Struct.slot":
		return x.Slot != uint64(0)
	case "structs.Struct.miningSystem":
		return x.MiningSystem != uint64(0)
	case "structs.Struct.refiningSystem":
		return x.RefiningSystem != uint64(0)
	case "structs.Struct.powerSystem":
		return x.PowerSystem != uint64(0)
	case "structs.Struct.buildStartBlock":
		return x.BuildStartBlock != uint64(0)
	case "structs.Struct.passiveDraw":
		return x.PassiveDraw != uint64(0)
	case "structs.Struct.activeMiningSystemDraw":
		return x.ActiveMiningSystemDraw != uint64(0)
	case "structs.Struct.activeMiningSystemBlock":
		return x.ActiveMiningSystemBlock != uint64(0)
	case "structs.Struct.activeRefiningSystemDraw":
		return x.ActiveRefiningSystemDraw != uint64(0)
	case "structs.Struct.activeRefiningSystemBlock":
		return x.ActiveRefiningSystemBlock != uint64(0)
	case "structs.Struct.miningSystemStatus":
		return x.MiningSystemStatus != ""
	case "structs.Struct.refiningSystemStatus":
		return x.RefiningSystemStatus != ""
	case "structs.Struct.powerSystemFuel":
		return x.PowerSystemFuel != uint64(0)
	case "structs.Struct.powerSystemCapacity":
		return x.PowerSystemCapacity != uint64(0)
	case "structs.Struct.powerSystemLoad":
		return x.PowerSystemLoad != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.Struct"))
		}
		panic(fmt.Errorf("message structs.Struct does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Struct) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "structs.Struct.id":
		x.Id = ""
	case "structs.Struct.creator":
		x.Creator = ""
	case "structs.Struct.owner":
		x.Owner = ""
	case "structs.Struct.status":
		x.Status = ""
	case "structs.Struct.maxHealth":
		x.MaxHealth = uint64(0)
	case "structs.Struct.health":
		x.Health = uint64(0)
	case "structs.Struct.category":
		x.Category = ""
	case "structs.Struct.type":
		x.Type_ = ""
	case "structs.Struct.ambit":
		x.Ambit = ""
	case "structs.Struct.planetId":
		x.PlanetId = ""
	case "structs.Struct.slot":
		x.Slot = uint64(0)
	case "structs.Struct.miningSystem":
		x.MiningSystem = uint64(0)
	case "structs.Struct.refiningSystem":
		x.RefiningSystem = uint64(0)
	case "structs.Struct.powerSystem":
		x.PowerSystem = uint64(0)
	case "structs.Struct.buildStartBlock":
		x.BuildStartBlock = uint64(0)
	case "structs.Struct.passiveDraw":
		x.PassiveDraw = uint64(0)
	case "structs.Struct.activeMiningSystemDraw":
		x.ActiveMiningSystemDraw = uint64(0)
	case "structs.Struct.activeMiningSystemBlock":
		x.ActiveMiningSystemBlock = uint64(0)
	case "structs.Struct.activeRefiningSystemDraw":
		x.ActiveRefiningSystemDraw = uint64(0)
	case "structs.Struct.activeRefiningSystemBlock":
		x.ActiveRefiningSystemBlock = uint64(0)
	case "structs.Struct.miningSystemStatus":
		x.MiningSystemStatus = ""
	case "structs.Struct.refiningSystemStatus":
		x.RefiningSystemStatus = ""
	case "structs.Struct.powerSystemFuel":
		x.PowerSystemFuel = uint64(0)
	case "structs.Struct.powerSystemCapacity":
		x.PowerSystemCapacity = uint64(0)
	case "structs.Struct.powerSystemLoad":
		x.PowerSystemLoad = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.Struct"))
		}
		panic(fmt.Errorf("message structs.Struct does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Struct) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "structs.Struct.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "structs.Struct.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "structs.Struct.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "structs.Struct.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "structs.Struct.maxHealth":
		value := x.MaxHealth
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.health":
		value := x.Health
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.category":
		value := x.Category
		return protoreflect.ValueOfString(value)
	case "structs.Struct.type":
		value := x.Type_
		return protoreflect.ValueOfString(value)
	case "structs.Struct.ambit":
		value := x.Ambit
		return protoreflect.ValueOfString(value)
	case "structs.Struct.planetId":
		value := x.PlanetId
		return protoreflect.ValueOfString(value)
	case "structs.Struct.slot":
		value := x.Slot
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.miningSystem":
		value := x.MiningSystem
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.refiningSystem":
		value := x.RefiningSystem
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.powerSystem":
		value := x.PowerSystem
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.buildStartBlock":
		value := x.BuildStartBlock
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.passiveDraw":
		value := x.PassiveDraw
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.activeMiningSystemDraw":
		value := x.ActiveMiningSystemDraw
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.activeMiningSystemBlock":
		value := x.ActiveMiningSystemBlock
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.activeRefiningSystemDraw":
		value := x.ActiveRefiningSystemDraw
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.activeRefiningSystemBlock":
		value := x.ActiveRefiningSystemBlock
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.miningSystemStatus":
		value := x.MiningSystemStatus
		return protoreflect.ValueOfString(value)
	case "structs.Struct.refiningSystemStatus":
		value := x.RefiningSystemStatus
		return protoreflect.ValueOfString(value)
	case "structs.Struct.powerSystemFuel":
		value := x.PowerSystemFuel
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.powerSystemCapacity":
		value := x.PowerSystemCapacity
		return protoreflect.ValueOfUint64(value)
	case "structs.Struct.powerSystemLoad":
		value := x.PowerSystemLoad
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.Struct"))
		}
		panic(fmt.Errorf("message structs.Struct does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Struct) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "structs.Struct.id":
		x.Id = value.Interface().(string)
	case "structs.Struct.creator":
		x.Creator = value.Interface().(string)
	case "structs.Struct.owner":
		x.Owner = value.Interface().(string)
	case "structs.Struct.status":
		x.Status = value.Interface().(string)
	case "structs.Struct.maxHealth":
		x.MaxHealth = value.Uint()
	case "structs.Struct.health":
		x.Health = value.Uint()
	case "structs.Struct.category":
		x.Category = value.Interface().(string)
	case "structs.Struct.type":
		x.Type_ = value.Interface().(string)
	case "structs.Struct.ambit":
		x.Ambit = value.Interface().(string)
	case "structs.Struct.planetId":
		x.PlanetId = value.Interface().(string)
	case "structs.Struct.slot":
		x.Slot = value.Uint()
	case "structs.Struct.miningSystem":
		x.MiningSystem = value.Uint()
	case "structs.Struct.refiningSystem":
		x.RefiningSystem = value.Uint()
	case "structs.Struct.powerSystem":
		x.PowerSystem = value.Uint()
	case "structs.Struct.buildStartBlock":
		x.BuildStartBlock = value.Uint()
	case "structs.Struct.passiveDraw":
		x.PassiveDraw = value.Uint()
	case "structs.Struct.activeMiningSystemDraw":
		x.ActiveMiningSystemDraw = value.Uint()
	case "structs.Struct.activeMiningSystemBlock":
		x.ActiveMiningSystemBlock = value.Uint()
	case "structs.Struct.activeRefiningSystemDraw":
		x.ActiveRefiningSystemDraw = value.Uint()
	case "structs.Struct.activeRefiningSystemBlock":
		x.ActiveRefiningSystemBlock = value.Uint()
	case "structs.Struct.miningSystemStatus":
		x.MiningSystemStatus = value.Interface().(string)
	case "structs.Struct.refiningSystemStatus":
		x.RefiningSystemStatus = value.Interface().(string)
	case "structs.Struct.powerSystemFuel":
		x.PowerSystemFuel = value.Uint()
	case "structs.Struct.powerSystemCapacity":
		x.PowerSystemCapacity = value.Uint()
	case "structs.Struct.powerSystemLoad":
		x.PowerSystemLoad = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.Struct"))
		}
		panic(fmt.Errorf("message structs.Struct does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Struct) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.Struct.id":
		panic(fmt.Errorf("field id of message structs.Struct is not mutable"))
	case "structs.Struct.creator":
		panic(fmt.Errorf("field creator of message structs.Struct is not mutable"))
	case "structs.Struct.owner":
		panic(fmt.Errorf("field owner of message structs.Struct is not mutable"))
	case "structs.Struct.status":
		panic(fmt.Errorf("field status of message structs.Struct is not mutable"))
	case "structs.Struct.maxHealth":
		panic(fmt.Errorf("field maxHealth of message structs.Struct is not mutable"))
	case "structs.Struct.health":
		panic(fmt.Errorf("field health of message structs.Struct is not mutable"))
	case "structs.Struct.category":
		panic(fmt.Errorf("field category of message structs.Struct is not mutable"))
	case "structs.Struct.type":
		panic(fmt.Errorf("field type of message structs.Struct is not mutable"))
	case "structs.Struct.ambit":
		panic(fmt.Errorf("field ambit of message structs.Struct is not mutable"))
	case "structs.Struct.planetId":
		panic(fmt.Errorf("field planetId of message structs.Struct is not mutable"))
	case "structs.Struct.slot":
		panic(fmt.Errorf("field slot of message structs.Struct is not mutable"))
	case "structs.Struct.miningSystem":
		panic(fmt.Errorf("field miningSystem of message structs.Struct is not mutable"))
	case "structs.Struct.refiningSystem":
		panic(fmt.Errorf("field refiningSystem of message structs.Struct is not mutable"))
	case "structs.Struct.powerSystem":
		panic(fmt.Errorf("field powerSystem of message structs.Struct is not mutable"))
	case "structs.Struct.buildStartBlock":
		panic(fmt.Errorf("field buildStartBlock of message structs.Struct is not mutable"))
	case "structs.Struct.passiveDraw":
		panic(fmt.Errorf("field passiveDraw of message structs.Struct is not mutable"))
	case "structs.Struct.activeMiningSystemDraw":
		panic(fmt.Errorf("field activeMiningSystemDraw of message structs.Struct is not mutable"))
	case "structs.Struct.activeMiningSystemBlock":
		panic(fmt.Errorf("field activeMiningSystemBlock of message structs.Struct is not mutable"))
	case "structs.Struct.activeRefiningSystemDraw":
		panic(fmt.Errorf("field activeRefiningSystemDraw of message structs.Struct is not mutable"))
	case "structs.Struct.activeRefiningSystemBlock":
		panic(fmt.Errorf("field activeRefiningSystemBlock of message structs.Struct is not mutable"))
	case "structs.Struct.miningSystemStatus":
		panic(fmt.Errorf("field miningSystemStatus of message structs.Struct is not mutable"))
	case "structs.Struct.refiningSystemStatus":
		panic(fmt.Errorf("field refiningSystemStatus of message structs.Struct is not mutable"))
	case "structs.Struct.powerSystemFuel":
		panic(fmt.Errorf("field powerSystemFuel of message structs.Struct is not mutable"))
	case "structs.Struct.powerSystemCapacity":
		panic(fmt.Errorf("field powerSystemCapacity of message structs.Struct is not mutable"))
	case "structs.Struct.powerSystemLoad":
		panic(fmt.Errorf("field powerSystemLoad of message structs.Struct is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.Struct"))
		}
		panic(fmt.Errorf("message structs.Struct does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Struct) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.Struct.id":
		return protoreflect.ValueOfString("")
	case "structs.Struct.creator":
		return protoreflect.ValueOfString("")
	case "structs.Struct.owner":
		return protoreflect.ValueOfString("")
	case "structs.Struct.status":
		return protoreflect.ValueOfString("")
	case "structs.Struct.maxHealth":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.health":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.category":
		return protoreflect.ValueOfString("")
	case "structs.Struct.type":
		return protoreflect.ValueOfString("")
	case "structs.Struct.ambit":
		return protoreflect.ValueOfString("")
	case "structs.Struct.planetId":
		return protoreflect.ValueOfString("")
	case "structs.Struct.slot":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.miningSystem":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.refiningSystem":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.powerSystem":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.buildStartBlock":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.passiveDraw":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.activeMiningSystemDraw":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.activeMiningSystemBlock":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.activeRefiningSystemDraw":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.activeRefiningSystemBlock":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.miningSystemStatus":
		return protoreflect.ValueOfString("")
	case "structs.Struct.refiningSystemStatus":
		return protoreflect.ValueOfString("")
	case "structs.Struct.powerSystemFuel":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.powerSystemCapacity":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.Struct.powerSystemLoad":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.Struct"))
		}
		panic(fmt.Errorf("message structs.Struct does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Struct) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in structs.Struct", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Struct) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Struct) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Struct) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Struct) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Struct)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxHealth != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxHealth))
		}
		if x.Health != 0 {
			n += 1 + runtime.Sov(uint64(x.Health))
		}
		l = len(x.Category)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Type_)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Ambit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PlanetId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Slot != 0 {
			n += 1 + runtime.Sov(uint64(x.Slot))
		}
		if x.MiningSystem != 0 {
			n += 1 + runtime.Sov(uint64(x.MiningSystem))
		}
		if x.RefiningSystem != 0 {
			n += 1 + runtime.Sov(uint64(x.RefiningSystem))
		}
		if x.PowerSystem != 0 {
			n += 1 + runtime.Sov(uint64(x.PowerSystem))
		}
		if x.BuildStartBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.BuildStartBlock))
		}
		if x.PassiveDraw != 0 {
			n += 2 + runtime.Sov(uint64(x.PassiveDraw))
		}
		if x.ActiveMiningSystemDraw != 0 {
			n += 2 + runtime.Sov(uint64(x.ActiveMiningSystemDraw))
		}
		if x.ActiveMiningSystemBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.ActiveMiningSystemBlock))
		}
		if x.ActiveRefiningSystemDraw != 0 {
			n += 2 + runtime.Sov(uint64(x.ActiveRefiningSystemDraw))
		}
		if x.ActiveRefiningSystemBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.ActiveRefiningSystemBlock))
		}
		l = len(x.MiningSystemStatus)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RefiningSystemStatus)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.PowerSystemFuel != 0 {
			n += 2 + runtime.Sov(uint64(x.PowerSystemFuel))
		}
		if x.PowerSystemCapacity != 0 {
			n += 2 + runtime.Sov(uint64(x.PowerSystemCapacity))
		}
		if x.PowerSystemLoad != 0 {
			n += 2 + runtime.Sov(uint64(x.PowerSystemLoad))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Struct)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PowerSystemLoad != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PowerSystemLoad))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if x.PowerSystemCapacity != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PowerSystemCapacity))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc0
		}
		if x.PowerSystemFuel != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PowerSystemFuel))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb8
		}
		if len(x.RefiningSystemStatus) > 0 {
			i -= len(x.RefiningSystemStatus)
			copy(dAtA[i:], x.RefiningSystemStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RefiningSystemStatus)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if len(x.MiningSystemStatus) > 0 {
			i -= len(x.MiningSystemStatus)
			copy(dAtA[i:], x.MiningSystemStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MiningSystemStatus)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if x.ActiveRefiningSystemBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActiveRefiningSystemBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.ActiveRefiningSystemDraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActiveRefiningSystemDraw))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.ActiveMiningSystemBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActiveMiningSystemBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.ActiveMiningSystemDraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActiveMiningSystemDraw))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.PassiveDraw != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PassiveDraw))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.BuildStartBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BuildStartBlock))
			i--
			dAtA[i] = 0x78
		}
		if x.PowerSystem != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PowerSystem))
			i--
			dAtA[i] = 0x70
		}
		if x.RefiningSystem != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RefiningSystem))
			i--
			dAtA[i] = 0x68
		}
		if x.MiningSystem != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MiningSystem))
			i--
			dAtA[i] = 0x60
		}
		if x.Slot != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Slot))
			i--
			dAtA[i] = 0x58
		}
		if len(x.PlanetId) > 0 {
			i -= len(x.PlanetId)
			copy(dAtA[i:], x.PlanetId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PlanetId)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Ambit) > 0 {
			i -= len(x.Ambit)
			copy(dAtA[i:], x.Ambit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Ambit)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Type_) > 0 {
			i -= len(x.Type_)
			copy(dAtA[i:], x.Type_)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Type_)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Category) > 0 {
			i -= len(x.Category)
			copy(dAtA[i:], x.Category)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Category)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Health != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Health))
			i--
			dAtA[i] = 0x30
		}
		if x.MaxHealth != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxHealth))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Struct)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Struct: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Struct: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxHealth", wireType)
				}
				x.MaxHealth = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxHealth |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
				}
				x.Health = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Health |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Category = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Type_ = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ambit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Ambit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanetId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PlanetId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
				}
				x.Slot = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Slot |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MiningSystem", wireType)
				}
				x.MiningSystem = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MiningSystem |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RefiningSystem", wireType)
				}
				x.RefiningSystem = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RefiningSystem |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PowerSystem", wireType)
				}
				x.PowerSystem = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PowerSystem |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BuildStartBlock", wireType)
				}
				x.BuildStartBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BuildStartBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PassiveDraw", wireType)
				}
				x.PassiveDraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PassiveDraw |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveMiningSystemDraw", wireType)
				}
				x.ActiveMiningSystemDraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActiveMiningSystemDraw |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveMiningSystemBlock", wireType)
				}
				x.ActiveMiningSystemBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActiveMiningSystemBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveRefiningSystemDraw", wireType)
				}
				x.ActiveRefiningSystemDraw = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActiveRefiningSystemDraw |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveRefiningSystemBlock", wireType)
				}
				x.ActiveRefiningSystemBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActiveRefiningSystemBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MiningSystemStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MiningSystemStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RefiningSystemStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RefiningSystemStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 23:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PowerSystemFuel", wireType)
				}
				x.PowerSystemFuel = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PowerSystemFuel |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 24:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PowerSystemCapacity", wireType)
				}
				x.PowerSystemCapacity = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PowerSystemCapacity |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PowerSystemLoad", wireType)
				}
				x.PowerSystemLoad = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PowerSystemLoad |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: structs/structs/struct.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This will all need to be reworked but let's
// do some super basic crap here to get testnet up
type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator   string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Owner     string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	MaxHealth uint64 `protobuf:"varint,5,opt,name=maxHealth,proto3" json:"maxHealth,omitempty"`
	Health    uint64 `protobuf:"varint,6,opt,name=health,proto3" json:"health,omitempty"`
	// Planet or Fleet
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	// What it is
	Type_ string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// Where it is
	Ambit    string `protobuf:"bytes,9,opt,name=ambit,proto3" json:"ambit,omitempty"`
	PlanetId string `protobuf:"bytes,10,opt,name=planetId,proto3" json:"planetId,omitempty"` // No fleet stuff yet
	Slot     uint64 `protobuf:"varint,11,opt,name=slot,proto3" json:"slot,omitempty"`
	// Struct Features
	MiningSystem              uint64 `protobuf:"varint,12,opt,name=miningSystem,proto3" json:"miningSystem,omitempty"`
	RefiningSystem            uint64 `protobuf:"varint,13,opt,name=refiningSystem,proto3" json:"refiningSystem,omitempty"`
	PowerSystem               uint64 `protobuf:"varint,14,opt,name=powerSystem,proto3" json:"powerSystem,omitempty"`
	BuildStartBlock           uint64 `protobuf:"varint,15,opt,name=buildStartBlock,proto3" json:"buildStartBlock,omitempty"`
	PassiveDraw               uint64 `protobuf:"varint,16,opt,name=passiveDraw,proto3" json:"passiveDraw,omitempty"`
	ActiveMiningSystemDraw    uint64 `protobuf:"varint,17,opt,name=activeMiningSystemDraw,proto3" json:"activeMiningSystemDraw,omitempty"`
	ActiveMiningSystemBlock   uint64 `protobuf:"varint,18,opt,name=activeMiningSystemBlock,proto3" json:"activeMiningSystemBlock,omitempty"`
	ActiveRefiningSystemDraw  uint64 `protobuf:"varint,19,opt,name=activeRefiningSystemDraw,proto3" json:"activeRefiningSystemDraw,omitempty"`
	ActiveRefiningSystemBlock uint64 `protobuf:"varint,20,opt,name=activeRefiningSystemBlock,proto3" json:"activeRefiningSystemBlock,omitempty"`
	MiningSystemStatus        string `protobuf:"bytes,21,opt,name=miningSystemStatus,proto3" json:"miningSystemStatus,omitempty"`
	RefiningSystemStatus      string `protobuf:"bytes,22,opt,name=refiningSystemStatus,proto3" json:"refiningSystemStatus,omitempty"`
	PowerSystemFuel           uint64 `protobuf:"varint,23,opt,name=powerSystemFuel,proto3" json:"powerSystemFuel,omitempty"`
	PowerSystemCapacity       uint64 `protobuf:"varint,24,opt,name=powerSystemCapacity,proto3" json:"powerSystemCapacity,omitempty"`
	PowerSystemLoad           uint64 `protobuf:"varint,25,opt,name=powerSystemLoad,proto3" json:"powerSystemLoad,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_structs_struct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_structs_structs_struct_proto_rawDescGZIP(), []int{0}
}

func (x *Struct) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Struct) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Struct) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Struct) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Struct) GetMaxHealth() uint64 {
	if x != nil {
		return x.MaxHealth
	}
	return 0
}

func (x *Struct) GetHealth() uint64 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *Struct) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Struct) GetType_() string {
	if x != nil {
		return x.Type_
	}
	return ""
}

func (x *Struct) GetAmbit() string {
	if x != nil {
		return x.Ambit
	}
	return ""
}

func (x *Struct) GetPlanetId() string {
	if x != nil {
		return x.PlanetId
	}
	return ""
}

func (x *Struct) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Struct) GetMiningSystem() uint64 {
	if x != nil {
		return x.MiningSystem
	}
	return 0
}

func (x *Struct) GetRefiningSystem() uint64 {
	if x != nil {
		return x.RefiningSystem
	}
	return 0
}

func (x *Struct) GetPowerSystem() uint64 {
	if x != nil {
		return x.PowerSystem
	}
	return 0
}

func (x *Struct) GetBuildStartBlock() uint64 {
	if x != nil {
		return x.BuildStartBlock
	}
	return 0
}

func (x *Struct) GetPassiveDraw() uint64 {
	if x != nil {
		return x.PassiveDraw
	}
	return 0
}

func (x *Struct) GetActiveMiningSystemDraw() uint64 {
	if x != nil {
		return x.ActiveMiningSystemDraw
	}
	return 0
}

func (x *Struct) GetActiveMiningSystemBlock() uint64 {
	if x != nil {
		return x.ActiveMiningSystemBlock
	}
	return 0
}

func (x *Struct) GetActiveRefiningSystemDraw() uint64 {
	if x != nil {
		return x.ActiveRefiningSystemDraw
	}
	return 0
}

func (x *Struct) GetActiveRefiningSystemBlock() uint64 {
	if x != nil {
		return x.ActiveRefiningSystemBlock
	}
	return 0
}

func (x *Struct) GetMiningSystemStatus() string {
	if x != nil {
		return x.MiningSystemStatus
	}
	return ""
}

func (x *Struct) GetRefiningSystemStatus() string {
	if x != nil {
		return x.RefiningSystemStatus
	}
	return ""
}

func (x *Struct) GetPowerSystemFuel() uint64 {
	if x != nil {
		return x.PowerSystemFuel
	}
	return 0
}

func (x *Struct) GetPowerSystemCapacity() uint64 {
	if x != nil {
		return x.PowerSystemCapacity
	}
	return 0
}

func (x *Struct) GetPowerSystemLoad() uint64 {
	if x != nil {
		return x.PowerSystemLoad
	}
	return 0
}

var File_structs_structs_struct_proto protoreflect.FileDescriptor

var file_structs_structs_struct_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x22, 0x9c, 0x07, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6d, 0x62, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6d, 0x62, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x72, 0x61, 0x77, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x12, 0x36, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x72, 0x61, 0x77, 0x12, 0x3c,
	0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x12,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46,
	0x75, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x61, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x78, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x42, 0x0b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xca, 0x02, 0x07, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0xe2, 0x02, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_structs_structs_struct_proto_rawDescOnce sync.Once
	file_structs_structs_struct_proto_rawDescData = file_structs_structs_struct_proto_rawDesc
)

func file_structs_structs_struct_proto_rawDescGZIP() []byte {
	file_structs_structs_struct_proto_rawDescOnce.Do(func() {
		file_structs_structs_struct_proto_rawDescData = protoimpl.X.CompressGZIP(file_structs_structs_struct_proto_rawDescData)
	})
	return file_structs_structs_struct_proto_rawDescData
}

var file_structs_structs_struct_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_structs_structs_struct_proto_goTypes = []interface{}{
	(*Struct)(nil), // 0: structs.Struct
}
var file_structs_structs_struct_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_structs_structs_struct_proto_init() }
func file_structs_structs_struct_proto_init() {
	if File_structs_structs_struct_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_structs_structs_struct_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structs_structs_struct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structs_structs_struct_proto_goTypes,
		DependencyIndexes: file_structs_structs_struct_proto_depIdxs,
		MessageInfos:      file_structs_structs_struct_proto_msgTypes,
	}.Build()
	File_structs_structs_struct_proto = out.File
	file_structs_structs_struct_proto_rawDesc = nil
	file_structs_structs_struct_proto_goTypes = nil
	file_structs_structs_struct_proto_depIdxs = nil
}
