// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package structs

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: structs/structs/keys.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectType int32

const (
	ObjectType_guild      ObjectType = 0
	ObjectType_player     ObjectType = 1
	ObjectType_planet     ObjectType = 2
	ObjectType_reactor    ObjectType = 3
	ObjectType_substation ObjectType = 4
	ObjectType_struct     ObjectType = 5
	ObjectType_allocation ObjectType = 6
	ObjectType_infusion   ObjectType = 7
	ObjectType_address    ObjectType = 8
	ObjectType_fleet      ObjectType = 9
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0: "guild",
		1: "player",
		2: "planet",
		3: "reactor",
		4: "substation",
		5: "struct",
		6: "allocation",
		7: "infusion",
		8: "address",
		9: "fleet",
	}
	ObjectType_value = map[string]int32{
		"guild":      0,
		"player":     1,
		"planet":     2,
		"reactor":    3,
		"substation": 4,
		"struct":     5,
		"allocation": 6,
		"infusion":   7,
		"address":    8,
		"fleet":      9,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[0].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[0]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{0}
}

type GridAttributeType int32

const (
	GridAttributeType_ore                    GridAttributeType = 0
	GridAttributeType_fuel                   GridAttributeType = 1
	GridAttributeType_capacity               GridAttributeType = 2
	GridAttributeType_load                   GridAttributeType = 3
	GridAttributeType_structsLoad            GridAttributeType = 4
	GridAttributeType_power                  GridAttributeType = 5
	GridAttributeType_connectionCapacity     GridAttributeType = 6
	GridAttributeType_connectionCount        GridAttributeType = 7
	GridAttributeType_allocationPointerStart GridAttributeType = 8
	GridAttributeType_allocationPointerEnd   GridAttributeType = 9
	GridAttributeType_proxyNonce             GridAttributeType = 10
	GridAttributeType_lastAction             GridAttributeType = 11
	GridAttributeType_nonce                  GridAttributeType = 12
	GridAttributeType_ready                  GridAttributeType = 13
)

// Enum value maps for GridAttributeType.
var (
	GridAttributeType_name = map[int32]string{
		0:  "ore",
		1:  "fuel",
		2:  "capacity",
		3:  "load",
		4:  "structsLoad",
		5:  "power",
		6:  "connectionCapacity",
		7:  "connectionCount",
		8:  "allocationPointerStart",
		9:  "allocationPointerEnd",
		10: "proxyNonce",
		11: "lastAction",
		12: "nonce",
		13: "ready",
	}
	GridAttributeType_value = map[string]int32{
		"ore":                    0,
		"fuel":                   1,
		"capacity":               2,
		"load":                   3,
		"structsLoad":            4,
		"power":                  5,
		"connectionCapacity":     6,
		"connectionCount":        7,
		"allocationPointerStart": 8,
		"allocationPointerEnd":   9,
		"proxyNonce":             10,
		"lastAction":             11,
		"nonce":                  12,
		"ready":                  13,
	}
)

func (x GridAttributeType) Enum() *GridAttributeType {
	p := new(GridAttributeType)
	*p = x
	return p
}

func (x GridAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GridAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[1].Descriptor()
}

func (GridAttributeType) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[1]
}

func (x GridAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GridAttributeType.Descriptor instead.
func (GridAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{1}
}

type AllocationType int32

const (
	AllocationType_static    AllocationType = 0
	AllocationType_dynamic   AllocationType = 1
	AllocationType_automated AllocationType = 2
)

// Enum value maps for AllocationType.
var (
	AllocationType_name = map[int32]string{
		0: "static",
		1: "dynamic",
		2: "automated",
	}
	AllocationType_value = map[string]int32{
		"static":    0,
		"dynamic":   1,
		"automated": 2,
	}
)

func (x AllocationType) Enum() *AllocationType {
	p := new(AllocationType)
	*p = x
	return p
}

func (x AllocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[2].Descriptor()
}

func (AllocationType) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[2]
}

func (x AllocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllocationType.Descriptor instead.
func (AllocationType) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{2}
}

type GuildJoinBypassLevel int32

const (
	GuildJoinBypassLevel_closed       GuildJoinBypassLevel = 0 // Feature off
	GuildJoinBypassLevel_permissioned GuildJoinBypassLevel = 1 // Only those with permissions can do it
	GuildJoinBypassLevel_member       GuildJoinBypassLevel = 2 // All members of the guild can contribute
)

// Enum value maps for GuildJoinBypassLevel.
var (
	GuildJoinBypassLevel_name = map[int32]string{
		0: "closed",
		1: "permissioned",
		2: "member",
	}
	GuildJoinBypassLevel_value = map[string]int32{
		"closed":       0,
		"permissioned": 1,
		"member":       2,
	}
)

func (x GuildJoinBypassLevel) Enum() *GuildJoinBypassLevel {
	p := new(GuildJoinBypassLevel)
	*p = x
	return p
}

func (x GuildJoinBypassLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildJoinBypassLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[3].Descriptor()
}

func (GuildJoinBypassLevel) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[3]
}

func (x GuildJoinBypassLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildJoinBypassLevel.Descriptor instead.
func (GuildJoinBypassLevel) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{3}
}

type GuildJoinType int32

const (
	GuildJoinType_invite  GuildJoinType = 0
	GuildJoinType_request GuildJoinType = 1
	GuildJoinType_direct  GuildJoinType = 2
	GuildJoinType_proxy   GuildJoinType = 3
)

// Enum value maps for GuildJoinType.
var (
	GuildJoinType_name = map[int32]string{
		0: "invite",
		1: "request",
		2: "direct",
		3: "proxy",
	}
	GuildJoinType_value = map[string]int32{
		"invite":  0,
		"request": 1,
		"direct":  2,
		"proxy":   3,
	}
)

func (x GuildJoinType) Enum() *GuildJoinType {
	p := new(GuildJoinType)
	*p = x
	return p
}

func (x GuildJoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuildJoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[4].Descriptor()
}

func (GuildJoinType) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[4]
}

func (x GuildJoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuildJoinType.Descriptor instead.
func (GuildJoinType) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{4}
}

type RegistrationStatus int32

const (
	RegistrationStatus_proposed RegistrationStatus = 0
	RegistrationStatus_approved RegistrationStatus = 1
	RegistrationStatus_denied   RegistrationStatus = 2
	RegistrationStatus_revoked  RegistrationStatus = 3
)

// Enum value maps for RegistrationStatus.
var (
	RegistrationStatus_name = map[int32]string{
		0: "proposed",
		1: "approved",
		2: "denied",
		3: "revoked",
	}
	RegistrationStatus_value = map[string]int32{
		"proposed": 0,
		"approved": 1,
		"denied":   2,
		"revoked":  3,
	}
)

func (x RegistrationStatus) Enum() *RegistrationStatus {
	p := new(RegistrationStatus)
	*p = x
	return p
}

func (x RegistrationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[5].Descriptor()
}

func (RegistrationStatus) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[5]
}

func (x RegistrationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationStatus.Descriptor instead.
func (RegistrationStatus) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{5}
}

type Ambit int32

const (
	Ambit_none  Ambit = 0
	Ambit_water Ambit = 1
	Ambit_land  Ambit = 2
	Ambit_air   Ambit = 3
	Ambit_space Ambit = 4
	Ambit_local Ambit = 5
)

// Enum value maps for Ambit.
var (
	Ambit_name = map[int32]string{
		0: "none",
		1: "water",
		2: "land",
		3: "air",
		4: "space",
		5: "local",
	}
	Ambit_value = map[string]int32{
		"none":  0,
		"water": 1,
		"land":  2,
		"air":   3,
		"space": 4,
		"local": 5,
	}
)

func (x Ambit) Enum() *Ambit {
	p := new(Ambit)
	*p = x
	return p
}

func (x Ambit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ambit) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[6].Descriptor()
}

func (Ambit) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[6]
}

func (x Ambit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ambit.Descriptor instead.
func (Ambit) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{6}
}

type PlanetStatus int32

const (
	PlanetStatus_active   PlanetStatus = 0
	PlanetStatus_complete PlanetStatus = 1
)

// Enum value maps for PlanetStatus.
var (
	PlanetStatus_name = map[int32]string{
		0: "active",
		1: "complete",
	}
	PlanetStatus_value = map[string]int32{
		"active":   0,
		"complete": 1,
	}
)

func (x PlanetStatus) Enum() *PlanetStatus {
	p := new(PlanetStatus)
	*p = x
	return p
}

func (x PlanetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[7].Descriptor()
}

func (PlanetStatus) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[7]
}

func (x PlanetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanetStatus.Descriptor instead.
func (PlanetStatus) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{7}
}

type FleetStatus int32

const (
	FleetStatus_onStation FleetStatus = 0
	FleetStatus_away      FleetStatus = 1
)

// Enum value maps for FleetStatus.
var (
	FleetStatus_name = map[int32]string{
		0: "onStation",
		1: "away",
	}
	FleetStatus_value = map[string]int32{
		"onStation": 0,
		"away":      1,
	}
)

func (x FleetStatus) Enum() *FleetStatus {
	p := new(FleetStatus)
	*p = x
	return p
}

func (x FleetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FleetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[8].Descriptor()
}

func (FleetStatus) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[8]
}

func (x FleetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FleetStatus.Descriptor instead.
func (FleetStatus) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{8}
}

type StructAttributeType int32

const (
	StructAttributeType_health               StructAttributeType = 0
	StructAttributeType_status               StructAttributeType = 1
	StructAttributeType_blockStartBuild      StructAttributeType = 2
	StructAttributeType_blockStartOreMine    StructAttributeType = 3
	StructAttributeType_blockStartOreRefine  StructAttributeType = 4
	StructAttributeType_protectedStructIndex StructAttributeType = 5
	StructAttributeType_typeCount            StructAttributeType = 6
)

// Enum value maps for StructAttributeType.
var (
	StructAttributeType_name = map[int32]string{
		0: "health",
		1: "status",
		2: "blockStartBuild",
		3: "blockStartOreMine",
		4: "blockStartOreRefine",
		5: "protectedStructIndex",
		6: "typeCount",
	}
	StructAttributeType_value = map[string]int32{
		"health":               0,
		"status":               1,
		"blockStartBuild":      2,
		"blockStartOreMine":    3,
		"blockStartOreRefine":  4,
		"protectedStructIndex": 5,
		"typeCount":            6,
	}
)

func (x StructAttributeType) Enum() *StructAttributeType {
	p := new(StructAttributeType)
	*p = x
	return p
}

func (x StructAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[9].Descriptor()
}

func (StructAttributeType) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[9]
}

func (x StructAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructAttributeType.Descriptor instead.
func (StructAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{9}
}

type PlanetAttributeType int32

const (
	PlanetAttributeType_planetaryShield                                            PlanetAttributeType = 0
	PlanetAttributeType_repairNetworkQuantity                                      PlanetAttributeType = 1
	PlanetAttributeType_defensiveCannonQuantity                                    PlanetAttributeType = 2
	PlanetAttributeType_coordinatedGlobalShieldNetworkQuantity                     PlanetAttributeType = 3
	PlanetAttributeType_lowOrbitBallisticsInterceptorNetworkQuantity               PlanetAttributeType = 4
	PlanetAttributeType_advancedLowOrbitBallisticsInterceptorNetworkQuantity       PlanetAttributeType = 5
	PlanetAttributeType_lowOrbitBallisticsInterceptorNetworkSuccessRateNumerator   PlanetAttributeType = 6
	PlanetAttributeType_lowOrbitBallisticsInterceptorNetworkSuccessRateDenominator PlanetAttributeType = 7
	PlanetAttributeType_orbitalJammingStationQuantity                              PlanetAttributeType = 8
	PlanetAttributeType_advancedOrbitalJammingStationQuantity                      PlanetAttributeType = 9
)

// Enum value maps for PlanetAttributeType.
var (
	PlanetAttributeType_name = map[int32]string{
		0: "planetaryShield",
		1: "repairNetworkQuantity",
		2: "defensiveCannonQuantity",
		3: "coordinatedGlobalShieldNetworkQuantity",
		4: "lowOrbitBallisticsInterceptorNetworkQuantity",
		5: "advancedLowOrbitBallisticsInterceptorNetworkQuantity",
		6: "lowOrbitBallisticsInterceptorNetworkSuccessRateNumerator",
		7: "lowOrbitBallisticsInterceptorNetworkSuccessRateDenominator",
		8: "orbitalJammingStationQuantity",
		9: "advancedOrbitalJammingStationQuantity",
	}
	PlanetAttributeType_value = map[string]int32{
		"planetaryShield":                                            0,
		"repairNetworkQuantity":                                      1,
		"defensiveCannonQuantity":                                    2,
		"coordinatedGlobalShieldNetworkQuantity":                     3,
		"lowOrbitBallisticsInterceptorNetworkQuantity":               4,
		"advancedLowOrbitBallisticsInterceptorNetworkQuantity":       5,
		"lowOrbitBallisticsInterceptorNetworkSuccessRateNumerator":   6,
		"lowOrbitBallisticsInterceptorNetworkSuccessRateDenominator": 7,
		"orbitalJammingStationQuantity":                              8,
		"advancedOrbitalJammingStationQuantity":                      9,
	}
)

func (x PlanetAttributeType) Enum() *PlanetAttributeType {
	p := new(PlanetAttributeType)
	*p = x
	return p
}

func (x PlanetAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanetAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[10].Descriptor()
}

func (PlanetAttributeType) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[10]
}

func (x PlanetAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanetAttributeType.Descriptor instead.
func (PlanetAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{10}
}

type TechWeaponSystem int32

const (
	TechWeaponSystem_primaryWeapon   TechWeaponSystem = 0
	TechWeaponSystem_secondaryWeapon TechWeaponSystem = 1
)

// Enum value maps for TechWeaponSystem.
var (
	TechWeaponSystem_name = map[int32]string{
		0: "primaryWeapon",
		1: "secondaryWeapon",
	}
	TechWeaponSystem_value = map[string]int32{
		"primaryWeapon":   0,
		"secondaryWeapon": 1,
	}
)

func (x TechWeaponSystem) Enum() *TechWeaponSystem {
	p := new(TechWeaponSystem)
	*p = x
	return p
}

func (x TechWeaponSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechWeaponSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[11].Descriptor()
}

func (TechWeaponSystem) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[11]
}

func (x TechWeaponSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechWeaponSystem.Descriptor instead.
func (TechWeaponSystem) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{11}
}

type TechWeaponControl int32

const (
	TechWeaponControl_noWeaponControl TechWeaponControl = 0
	TechWeaponControl_guided          TechWeaponControl = 1
	TechWeaponControl_unguided        TechWeaponControl = 2
)

// Enum value maps for TechWeaponControl.
var (
	TechWeaponControl_name = map[int32]string{
		0: "noWeaponControl",
		1: "guided",
		2: "unguided",
	}
	TechWeaponControl_value = map[string]int32{
		"noWeaponControl": 0,
		"guided":          1,
		"unguided":        2,
	}
)

func (x TechWeaponControl) Enum() *TechWeaponControl {
	p := new(TechWeaponControl)
	*p = x
	return p
}

func (x TechWeaponControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechWeaponControl) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[12].Descriptor()
}

func (TechWeaponControl) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[12]
}

func (x TechWeaponControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechWeaponControl.Descriptor instead.
func (TechWeaponControl) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{12}
}

type TechActiveWeaponry int32

const (
	TechActiveWeaponry_noActiveWeaponry TechActiveWeaponry = 0
	TechActiveWeaponry_guidedWeaponry   TechActiveWeaponry = 1
	TechActiveWeaponry_unguidedWeaponry TechActiveWeaponry = 2
	TechActiveWeaponry_attackRun        TechActiveWeaponry = 3
	TechActiveWeaponry_selfDestruct     TechActiveWeaponry = 4
)

// Enum value maps for TechActiveWeaponry.
var (
	TechActiveWeaponry_name = map[int32]string{
		0: "noActiveWeaponry",
		1: "guidedWeaponry",
		2: "unguidedWeaponry",
		3: "attackRun",
		4: "selfDestruct",
	}
	TechActiveWeaponry_value = map[string]int32{
		"noActiveWeaponry": 0,
		"guidedWeaponry":   1,
		"unguidedWeaponry": 2,
		"attackRun":        3,
		"selfDestruct":     4,
	}
)

func (x TechActiveWeaponry) Enum() *TechActiveWeaponry {
	p := new(TechActiveWeaponry)
	*p = x
	return p
}

func (x TechActiveWeaponry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechActiveWeaponry) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[13].Descriptor()
}

func (TechActiveWeaponry) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[13]
}

func (x TechActiveWeaponry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechActiveWeaponry.Descriptor instead.
func (TechActiveWeaponry) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{13}
}

type TechPassiveWeaponry int32

const (
	TechPassiveWeaponry_noPassiveWeaponry     TechPassiveWeaponry = 0
	TechPassiveWeaponry_counterAttack         TechPassiveWeaponry = 1
	TechPassiveWeaponry_strongCounterAttack   TechPassiveWeaponry = 2
	TechPassiveWeaponry_advancedCounterAttack TechPassiveWeaponry = 3
	TechPassiveWeaponry_lastResort            TechPassiveWeaponry = 4
)

// Enum value maps for TechPassiveWeaponry.
var (
	TechPassiveWeaponry_name = map[int32]string{
		0: "noPassiveWeaponry",
		1: "counterAttack",
		2: "strongCounterAttack",
		3: "advancedCounterAttack",
		4: "lastResort",
	}
	TechPassiveWeaponry_value = map[string]int32{
		"noPassiveWeaponry":     0,
		"counterAttack":         1,
		"strongCounterAttack":   2,
		"advancedCounterAttack": 3,
		"lastResort":            4,
	}
)

func (x TechPassiveWeaponry) Enum() *TechPassiveWeaponry {
	p := new(TechPassiveWeaponry)
	*p = x
	return p
}

func (x TechPassiveWeaponry) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechPassiveWeaponry) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[14].Descriptor()
}

func (TechPassiveWeaponry) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[14]
}

func (x TechPassiveWeaponry) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechPassiveWeaponry.Descriptor instead.
func (TechPassiveWeaponry) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{14}
}

type TechUnitDefenses int32

const (
	TechUnitDefenses_noUnitDefenses       TechUnitDefenses = 0
	TechUnitDefenses_defensiveManeuver    TechUnitDefenses = 1
	TechUnitDefenses_signalJamming        TechUnitDefenses = 2
	TechUnitDefenses_armour               TechUnitDefenses = 3
	TechUnitDefenses_indirectCombatModule TechUnitDefenses = 4
	TechUnitDefenses_stealthMode          TechUnitDefenses = 5
	TechUnitDefenses_perimeterFencing     TechUnitDefenses = 6
	TechUnitDefenses_reinforcedWalls      TechUnitDefenses = 7
)

// Enum value maps for TechUnitDefenses.
var (
	TechUnitDefenses_name = map[int32]string{
		0: "noUnitDefenses",
		1: "defensiveManeuver",
		2: "signalJamming",
		3: "armour",
		4: "indirectCombatModule",
		5: "stealthMode",
		6: "perimeterFencing",
		7: "reinforcedWalls",
	}
	TechUnitDefenses_value = map[string]int32{
		"noUnitDefenses":       0,
		"defensiveManeuver":    1,
		"signalJamming":        2,
		"armour":               3,
		"indirectCombatModule": 4,
		"stealthMode":          5,
		"perimeterFencing":     6,
		"reinforcedWalls":      7,
	}
)

func (x TechUnitDefenses) Enum() *TechUnitDefenses {
	p := new(TechUnitDefenses)
	*p = x
	return p
}

func (x TechUnitDefenses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechUnitDefenses) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[15].Descriptor()
}

func (TechUnitDefenses) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[15]
}

func (x TechUnitDefenses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechUnitDefenses.Descriptor instead.
func (TechUnitDefenses) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{15}
}

type TechOreReserveDefenses int32

const (
	TechOreReserveDefenses_noOreReserveDefenses              TechOreReserveDefenses = 0
	TechOreReserveDefenses_coordinatedReserveResponseTracker TechOreReserveDefenses = 1
	TechOreReserveDefenses_rapidResponsePackage              TechOreReserveDefenses = 2
	TechOreReserveDefenses_activeScanning                    TechOreReserveDefenses = 3
	TechOreReserveDefenses_monitoringStation                 TechOreReserveDefenses = 4
	TechOreReserveDefenses_oreBunker                         TechOreReserveDefenses = 5
)

// Enum value maps for TechOreReserveDefenses.
var (
	TechOreReserveDefenses_name = map[int32]string{
		0: "noOreReserveDefenses",
		1: "coordinatedReserveResponseTracker",
		2: "rapidResponsePackage",
		3: "activeScanning",
		4: "monitoringStation",
		5: "oreBunker",
	}
	TechOreReserveDefenses_value = map[string]int32{
		"noOreReserveDefenses":              0,
		"coordinatedReserveResponseTracker": 1,
		"rapidResponsePackage":              2,
		"activeScanning":                    3,
		"monitoringStation":                 4,
		"oreBunker":                         5,
	}
)

func (x TechOreReserveDefenses) Enum() *TechOreReserveDefenses {
	p := new(TechOreReserveDefenses)
	*p = x
	return p
}

func (x TechOreReserveDefenses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechOreReserveDefenses) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[16].Descriptor()
}

func (TechOreReserveDefenses) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[16]
}

func (x TechOreReserveDefenses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechOreReserveDefenses.Descriptor instead.
func (TechOreReserveDefenses) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{16}
}

type TechPlanetaryDefenses int32

const (
	TechPlanetaryDefenses_noPlanetaryDefense                  TechPlanetaryDefenses = 0
	TechPlanetaryDefenses_defensiveCannon                     TechPlanetaryDefenses = 1
	TechPlanetaryDefenses_lowOrbitBallisticInterceptorNetwork TechPlanetaryDefenses = 2
)

// Enum value maps for TechPlanetaryDefenses.
var (
	TechPlanetaryDefenses_name = map[int32]string{
		0: "noPlanetaryDefense",
		1: "defensiveCannon",
		2: "lowOrbitBallisticInterceptorNetwork",
	}
	TechPlanetaryDefenses_value = map[string]int32{
		"noPlanetaryDefense":                  0,
		"defensiveCannon":                     1,
		"lowOrbitBallisticInterceptorNetwork": 2,
	}
)

func (x TechPlanetaryDefenses) Enum() *TechPlanetaryDefenses {
	p := new(TechPlanetaryDefenses)
	*p = x
	return p
}

func (x TechPlanetaryDefenses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechPlanetaryDefenses) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[17].Descriptor()
}

func (TechPlanetaryDefenses) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[17]
}

func (x TechPlanetaryDefenses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechPlanetaryDefenses.Descriptor instead.
func (TechPlanetaryDefenses) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{17}
}

type TechStorageFacilities int32

const (
	TechStorageFacilities_noStorageFacilities TechStorageFacilities = 0
	TechStorageFacilities_dock                TechStorageFacilities = 1
	TechStorageFacilities_hanger              TechStorageFacilities = 2
	TechStorageFacilities_fleetBase           TechStorageFacilities = 3
)

// Enum value maps for TechStorageFacilities.
var (
	TechStorageFacilities_name = map[int32]string{
		0: "noStorageFacilities",
		1: "dock",
		2: "hanger",
		3: "fleetBase",
	}
	TechStorageFacilities_value = map[string]int32{
		"noStorageFacilities": 0,
		"dock":                1,
		"hanger":              2,
		"fleetBase":           3,
	}
)

func (x TechStorageFacilities) Enum() *TechStorageFacilities {
	p := new(TechStorageFacilities)
	*p = x
	return p
}

func (x TechStorageFacilities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechStorageFacilities) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[18].Descriptor()
}

func (TechStorageFacilities) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[18]
}

func (x TechStorageFacilities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechStorageFacilities.Descriptor instead.
func (TechStorageFacilities) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{18}
}

type TechPlanetaryMining int32

const (
	TechPlanetaryMining_noPlanetaryMining TechPlanetaryMining = 0
	TechPlanetaryMining_oreMiningRig      TechPlanetaryMining = 1
)

// Enum value maps for TechPlanetaryMining.
var (
	TechPlanetaryMining_name = map[int32]string{
		0: "noPlanetaryMining",
		1: "oreMiningRig",
	}
	TechPlanetaryMining_value = map[string]int32{
		"noPlanetaryMining": 0,
		"oreMiningRig":      1,
	}
)

func (x TechPlanetaryMining) Enum() *TechPlanetaryMining {
	p := new(TechPlanetaryMining)
	*p = x
	return p
}

func (x TechPlanetaryMining) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechPlanetaryMining) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[19].Descriptor()
}

func (TechPlanetaryMining) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[19]
}

func (x TechPlanetaryMining) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechPlanetaryMining.Descriptor instead.
func (TechPlanetaryMining) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{19}
}

type TechPlanetaryRefineries int32

const (
	TechPlanetaryRefineries_noPlanetaryRefinery TechPlanetaryRefineries = 0
	TechPlanetaryRefineries_oreRefinery         TechPlanetaryRefineries = 1
)

// Enum value maps for TechPlanetaryRefineries.
var (
	TechPlanetaryRefineries_name = map[int32]string{
		0: "noPlanetaryRefinery",
		1: "oreRefinery",
	}
	TechPlanetaryRefineries_value = map[string]int32{
		"noPlanetaryRefinery": 0,
		"oreRefinery":         1,
	}
)

func (x TechPlanetaryRefineries) Enum() *TechPlanetaryRefineries {
	p := new(TechPlanetaryRefineries)
	*p = x
	return p
}

func (x TechPlanetaryRefineries) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechPlanetaryRefineries) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[20].Descriptor()
}

func (TechPlanetaryRefineries) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[20]
}

func (x TechPlanetaryRefineries) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechPlanetaryRefineries.Descriptor instead.
func (TechPlanetaryRefineries) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{20}
}

type TechPowerGeneration int32

const (
	TechPowerGeneration_noPowerGeneration TechPowerGeneration = 0
	TechPowerGeneration_smallGenerator    TechPowerGeneration = 1
	TechPowerGeneration_mediumGenerator   TechPowerGeneration = 2
	TechPowerGeneration_largeGenerator    TechPowerGeneration = 3
)

// Enum value maps for TechPowerGeneration.
var (
	TechPowerGeneration_name = map[int32]string{
		0: "noPowerGeneration",
		1: "smallGenerator",
		2: "mediumGenerator",
		3: "largeGenerator",
	}
	TechPowerGeneration_value = map[string]int32{
		"noPowerGeneration": 0,
		"smallGenerator":    1,
		"mediumGenerator":   2,
		"largeGenerator":    3,
	}
)

func (x TechPowerGeneration) Enum() *TechPowerGeneration {
	p := new(TechPowerGeneration)
	*p = x
	return p
}

func (x TechPowerGeneration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechPowerGeneration) Descriptor() protoreflect.EnumDescriptor {
	return file_structs_structs_keys_proto_enumTypes[21].Descriptor()
}

func (TechPowerGeneration) Type() protoreflect.EnumType {
	return &file_structs_structs_keys_proto_enumTypes[21]
}

func (x TechPowerGeneration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechPowerGeneration.Descriptor instead.
func (TechPowerGeneration) EnumDescriptor() ([]byte, []int) {
	return file_structs_structs_keys_proto_rawDescGZIP(), []int{21}
}

var File_structs_structs_keys_proto protoreflect.FileDescriptor

var file_structs_structs_keys_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2a, 0x8e, 0x01, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x10, 0x09, 0x2a, 0xf3, 0x01, 0x0a, 0x11, 0x67, 0x72, 0x69, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x6f, 0x72,
	0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x6c,
	0x6f, 0x61, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x4c, 0x6f, 0x61, 0x64, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x1a,
	0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x64, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x10, 0x0c, 0x12,
	0x09, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0x0d, 0x2a, 0x38, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69,
	0x6e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x10, 0x03, 0x2a, 0x45, 0x0a, 0x05, 0x61, 0x6d, 0x62, 0x69, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x69,
	0x72, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x05, 0x2a, 0x28, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x0b, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x10, 0x01, 0x2a, 0x9b, 0x01, 0x0a, 0x13,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x2a, 0xc6, 0x03, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x43, 0x61,
	0x6e, 0x6e, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x2a,
	0x0a, 0x26, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x6c, 0x6f,
	0x77, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12, 0x38, 0x0a, 0x34,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x4f, 0x72, 0x62, 0x69, 0x74,
	0x42, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x10, 0x05, 0x12, 0x3c, 0x0a, 0x38, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x62,
	0x69, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x06, 0x12, 0x3e, 0x0a, 0x3a, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x62, 0x69, 0x74,
	0x42, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x4a,
	0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x10, 0x09, 0x2a, 0x3a, 0x0a, 0x10, 0x74, 0x65, 0x63, 0x68, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x10, 0x01, 0x2a, 0x42,
	0x0a, 0x11, 0x74, 0x65, 0x63, 0x68, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x6e, 0x6f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x64,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x65, 0x64,
	0x10, 0x02, 0x2a, 0x75, 0x0a, 0x12, 0x74, 0x65, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x6f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x67, 0x75, 0x69, 0x64, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x75, 0x6e, 0x67, 0x75, 0x69, 0x64, 0x65, 0x64, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x75, 0x6e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x74, 0x65,
	0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x72,
	0x79, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x72, 0x79, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x73,
	0x74, 0x72, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x6b, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x72, 0x74, 0x10, 0x04, 0x2a,
	0xb2, 0x01, 0x0a, 0x10, 0x74, 0x65, 0x63, 0x68, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x6e, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x6e, 0x65, 0x75, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x72, 0x6d, 0x6f, 0x75, 0x72, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x72, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x57, 0x61, 0x6c,
	0x6c, 0x73, 0x10, 0x07, 0x2a, 0xad, 0x01, 0x0a, 0x16, 0x74, 0x65, 0x63, 0x68, 0x4f, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x14, 0x6e, 0x6f, 0x4f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x72, 0x61, 0x70, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x6b,
	0x65, 0x72, 0x10, 0x05, 0x2a, 0x6d, 0x0a, 0x15, 0x74, 0x65, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x6e, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x69,
	0x76, 0x65, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6c, 0x6f,
	0x77, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x10, 0x02, 0x2a, 0x55, 0x0a, 0x15, 0x74, 0x65, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x13,
	0x6e, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x13, 0x74, 0x65,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x6f, 0x72, 0x65, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x17, 0x74, 0x65,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x6e, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x10, 0x01, 0x2a,
	0x69, 0x0a, 0x13, 0x74, 0x65, 0x63, 0x68, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x6f, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x42, 0x9f, 0x01, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x42, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xca, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1b, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x3a, 0x3a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_structs_structs_keys_proto_rawDescOnce sync.Once
	file_structs_structs_keys_proto_rawDescData = file_structs_structs_keys_proto_rawDesc
)

func file_structs_structs_keys_proto_rawDescGZIP() []byte {
	file_structs_structs_keys_proto_rawDescOnce.Do(func() {
		file_structs_structs_keys_proto_rawDescData = protoimpl.X.CompressGZIP(file_structs_structs_keys_proto_rawDescData)
	})
	return file_structs_structs_keys_proto_rawDescData
}

var file_structs_structs_keys_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_structs_structs_keys_proto_goTypes = []interface{}{
	(ObjectType)(0),              // 0: structs.structs.objectType
	(GridAttributeType)(0),       // 1: structs.structs.gridAttributeType
	(AllocationType)(0),          // 2: structs.structs.allocationType
	(GuildJoinBypassLevel)(0),    // 3: structs.structs.guildJoinBypassLevel
	(GuildJoinType)(0),           // 4: structs.structs.guildJoinType
	(RegistrationStatus)(0),      // 5: structs.structs.registrationStatus
	(Ambit)(0),                   // 6: structs.structs.ambit
	(PlanetStatus)(0),            // 7: structs.structs.planetStatus
	(FleetStatus)(0),             // 8: structs.structs.fleetStatus
	(StructAttributeType)(0),     // 9: structs.structs.structAttributeType
	(PlanetAttributeType)(0),     // 10: structs.structs.planetAttributeType
	(TechWeaponSystem)(0),        // 11: structs.structs.techWeaponSystem
	(TechWeaponControl)(0),       // 12: structs.structs.techWeaponControl
	(TechActiveWeaponry)(0),      // 13: structs.structs.techActiveWeaponry
	(TechPassiveWeaponry)(0),     // 14: structs.structs.techPassiveWeaponry
	(TechUnitDefenses)(0),        // 15: structs.structs.techUnitDefenses
	(TechOreReserveDefenses)(0),  // 16: structs.structs.techOreReserveDefenses
	(TechPlanetaryDefenses)(0),   // 17: structs.structs.techPlanetaryDefenses
	(TechStorageFacilities)(0),   // 18: structs.structs.techStorageFacilities
	(TechPlanetaryMining)(0),     // 19: structs.structs.techPlanetaryMining
	(TechPlanetaryRefineries)(0), // 20: structs.structs.techPlanetaryRefineries
	(TechPowerGeneration)(0),     // 21: structs.structs.techPowerGeneration
}
var file_structs_structs_keys_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_structs_structs_keys_proto_init() }
func file_structs_structs_keys_proto_init() {
	if File_structs_structs_keys_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structs_structs_keys_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structs_structs_keys_proto_goTypes,
		DependencyIndexes: file_structs_structs_keys_proto_depIdxs,
		EnumInfos:         file_structs_structs_keys_proto_enumTypes,
	}.Build()
	File_structs_structs_keys_proto = out.File
	file_structs_structs_keys_proto_rawDesc = nil
	file_structs_structs_keys_proto_goTypes = nil
	file_structs_structs_keys_proto_depIdxs = nil
}
