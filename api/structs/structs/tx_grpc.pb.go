// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: structs/structs/tx.proto

package structs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                                  = "/structs.structs.Msg/UpdateParams"
	Msg_AddressRegister_FullMethodName                               = "/structs.structs.Msg/AddressRegister"
	Msg_AddressRevoke_FullMethodName                                 = "/structs.structs.Msg/AddressRevoke"
	Msg_AgreementOpen_FullMethodName                                 = "/structs.structs.Msg/AgreementOpen"
	Msg_AgreementClose_FullMethodName                                = "/structs.structs.Msg/AgreementClose"
	Msg_AgreementCapacityIncrease_FullMethodName                     = "/structs.structs.Msg/AgreementCapacityIncrease"
	Msg_AgreementCapacityDecrease_FullMethodName                     = "/structs.structs.Msg/AgreementCapacityDecrease"
	Msg_AgreementDurationIncrease_FullMethodName                     = "/structs.structs.Msg/AgreementDurationIncrease"
	Msg_AllocationCreate_FullMethodName                              = "/structs.structs.Msg/AllocationCreate"
	Msg_AllocationDelete_FullMethodName                              = "/structs.structs.Msg/AllocationDelete"
	Msg_AllocationUpdate_FullMethodName                              = "/structs.structs.Msg/AllocationUpdate"
	Msg_AllocationTransfer_FullMethodName                            = "/structs.structs.Msg/AllocationTransfer"
	Msg_FleetMove_FullMethodName                                     = "/structs.structs.Msg/FleetMove"
	Msg_GuildCreate_FullMethodName                                   = "/structs.structs.Msg/GuildCreate"
	Msg_GuildUpdateOwnerId_FullMethodName                            = "/structs.structs.Msg/GuildUpdateOwnerId"
	Msg_GuildUpdateEntrySubstationId_FullMethodName                  = "/structs.structs.Msg/GuildUpdateEntrySubstationId"
	Msg_GuildUpdateEndpoint_FullMethodName                           = "/structs.structs.Msg/GuildUpdateEndpoint"
	Msg_GuildUpdateJoinInfusionMinimum_FullMethodName                = "/structs.structs.Msg/GuildUpdateJoinInfusionMinimum"
	Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_FullMethodName  = "/structs.structs.Msg/GuildUpdateJoinInfusionMinimumBypassByInvite"
	Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_FullMethodName = "/structs.structs.Msg/GuildUpdateJoinInfusionMinimumBypassByRequest"
	Msg_GuildMembershipInvite_FullMethodName                         = "/structs.structs.Msg/GuildMembershipInvite"
	Msg_GuildMembershipInviteApprove_FullMethodName                  = "/structs.structs.Msg/GuildMembershipInviteApprove"
	Msg_GuildMembershipInviteDeny_FullMethodName                     = "/structs.structs.Msg/GuildMembershipInviteDeny"
	Msg_GuildMembershipInviteRevoke_FullMethodName                   = "/structs.structs.Msg/GuildMembershipInviteRevoke"
	Msg_GuildMembershipJoin_FullMethodName                           = "/structs.structs.Msg/GuildMembershipJoin"
	Msg_GuildMembershipJoinProxy_FullMethodName                      = "/structs.structs.Msg/GuildMembershipJoinProxy"
	Msg_GuildMembershipKick_FullMethodName                           = "/structs.structs.Msg/GuildMembershipKick"
	Msg_GuildMembershipRequest_FullMethodName                        = "/structs.structs.Msg/GuildMembershipRequest"
	Msg_GuildMembershipRequestApprove_FullMethodName                 = "/structs.structs.Msg/GuildMembershipRequestApprove"
	Msg_GuildMembershipRequestDeny_FullMethodName                    = "/structs.structs.Msg/GuildMembershipRequestDeny"
	Msg_GuildMembershipRequestRevoke_FullMethodName                  = "/structs.structs.Msg/GuildMembershipRequestRevoke"
	Msg_PermissionGrantOnAddress_FullMethodName                      = "/structs.structs.Msg/PermissionGrantOnAddress"
	Msg_PermissionGrantOnObject_FullMethodName                       = "/structs.structs.Msg/PermissionGrantOnObject"
	Msg_PermissionRevokeOnAddress_FullMethodName                     = "/structs.structs.Msg/PermissionRevokeOnAddress"
	Msg_PermissionRevokeOnObject_FullMethodName                      = "/structs.structs.Msg/PermissionRevokeOnObject"
	Msg_PermissionSetOnAddress_FullMethodName                        = "/structs.structs.Msg/PermissionSetOnAddress"
	Msg_PermissionSetOnObject_FullMethodName                         = "/structs.structs.Msg/PermissionSetOnObject"
	Msg_PlanetExplore_FullMethodName                                 = "/structs.structs.Msg/PlanetExplore"
	Msg_PlanetRaidComplete_FullMethodName                            = "/structs.structs.Msg/PlanetRaidComplete"
	Msg_PlayerUpdatePrimaryAddress_FullMethodName                    = "/structs.structs.Msg/PlayerUpdatePrimaryAddress"
	Msg_ProviderCreate_FullMethodName                                = "/structs.structs.Msg/ProviderCreate"
	Msg_ProviderWithdrawBalance_FullMethodName                       = "/structs.structs.Msg/ProviderWithdrawBalance"
	Msg_ProviderUpdateCapacityMinimum_FullMethodName                 = "/structs.structs.Msg/ProviderUpdateCapacityMinimum"
	Msg_ProviderUpdateCapacityMaximum_FullMethodName                 = "/structs.structs.Msg/ProviderUpdateCapacityMaximum"
	Msg_ProviderUpdateDurationMinimum_FullMethodName                 = "/structs.structs.Msg/ProviderUpdateDurationMinimum"
	Msg_ProviderUpdateDurationMaximum_FullMethodName                 = "/structs.structs.Msg/ProviderUpdateDurationMaximum"
	Msg_ProviderUpdateAccessPolicy_FullMethodName                    = "/structs.structs.Msg/ProviderUpdateAccessPolicy"
	Msg_ProviderGuildGrant_FullMethodName                            = "/structs.structs.Msg/ProviderGuildGrant"
	Msg_ProviderGuildRevoke_FullMethodName                           = "/structs.structs.Msg/ProviderGuildRevoke"
	Msg_ProviderDelete_FullMethodName                                = "/structs.structs.Msg/ProviderDelete"
	Msg_StructActivate_FullMethodName                                = "/structs.structs.Msg/StructActivate"
	Msg_StructDeactivate_FullMethodName                              = "/structs.structs.Msg/StructDeactivate"
	Msg_StructBuildInitiate_FullMethodName                           = "/structs.structs.Msg/StructBuildInitiate"
	Msg_StructBuildComplete_FullMethodName                           = "/structs.structs.Msg/StructBuildComplete"
	Msg_StructBuildCancel_FullMethodName                             = "/structs.structs.Msg/StructBuildCancel"
	Msg_StructDefenseSet_FullMethodName                              = "/structs.structs.Msg/StructDefenseSet"
	Msg_StructDefenseClear_FullMethodName                            = "/structs.structs.Msg/StructDefenseClear"
	Msg_StructMove_FullMethodName                                    = "/structs.structs.Msg/StructMove"
	Msg_StructAttack_FullMethodName                                  = "/structs.structs.Msg/StructAttack"
	Msg_StructStealthActivate_FullMethodName                         = "/structs.structs.Msg/StructStealthActivate"
	Msg_StructStealthDeactivate_FullMethodName                       = "/structs.structs.Msg/StructStealthDeactivate"
	Msg_StructGeneratorInfuse_FullMethodName                         = "/structs.structs.Msg/StructGeneratorInfuse"
	Msg_StructOreMinerComplete_FullMethodName                        = "/structs.structs.Msg/StructOreMinerComplete"
	Msg_StructOreRefineryComplete_FullMethodName                     = "/structs.structs.Msg/StructOreRefineryComplete"
	Msg_SubstationCreate_FullMethodName                              = "/structs.structs.Msg/SubstationCreate"
	Msg_SubstationDelete_FullMethodName                              = "/structs.structs.Msg/SubstationDelete"
	Msg_SubstationAllocationConnect_FullMethodName                   = "/structs.structs.Msg/SubstationAllocationConnect"
	Msg_SubstationAllocationDisconnect_FullMethodName                = "/structs.structs.Msg/SubstationAllocationDisconnect"
	Msg_SubstationPlayerConnect_FullMethodName                       = "/structs.structs.Msg/SubstationPlayerConnect"
	Msg_SubstationPlayerDisconnect_FullMethodName                    = "/structs.structs.Msg/SubstationPlayerDisconnect"
	Msg_SubstationPlayerMigrate_FullMethodName                       = "/structs.structs.Msg/SubstationPlayerMigrate"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddressRegister(ctx context.Context, in *MsgAddressRegister, opts ...grpc.CallOption) (*MsgAddressRegisterResponse, error)
	AddressRevoke(ctx context.Context, in *MsgAddressRevoke, opts ...grpc.CallOption) (*MsgAddressRevokeResponse, error)
	AgreementOpen(ctx context.Context, in *MsgAgreementOpen, opts ...grpc.CallOption) (*MsgAgreementResponse, error)
	AgreementClose(ctx context.Context, in *MsgAgreementClose, opts ...grpc.CallOption) (*MsgAgreementResponse, error)
	AgreementCapacityIncrease(ctx context.Context, in *MsgAgreementCapacityIncrease, opts ...grpc.CallOption) (*MsgAgreementResponse, error)
	AgreementCapacityDecrease(ctx context.Context, in *MsgAgreementCapacityDecrease, opts ...grpc.CallOption) (*MsgAgreementResponse, error)
	AgreementDurationIncrease(ctx context.Context, in *MsgAgreementDurationIncrease, opts ...grpc.CallOption) (*MsgAgreementResponse, error)
	AllocationCreate(ctx context.Context, in *MsgAllocationCreate, opts ...grpc.CallOption) (*MsgAllocationCreateResponse, error)
	AllocationDelete(ctx context.Context, in *MsgAllocationDelete, opts ...grpc.CallOption) (*MsgAllocationDeleteResponse, error)
	AllocationUpdate(ctx context.Context, in *MsgAllocationUpdate, opts ...grpc.CallOption) (*MsgAllocationUpdateResponse, error)
	AllocationTransfer(ctx context.Context, in *MsgAllocationTransfer, opts ...grpc.CallOption) (*MsgAllocationTransferResponse, error)
	FleetMove(ctx context.Context, in *MsgFleetMove, opts ...grpc.CallOption) (*MsgFleetMoveResponse, error)
	GuildCreate(ctx context.Context, in *MsgGuildCreate, opts ...grpc.CallOption) (*MsgGuildCreateResponse, error)
	GuildUpdateOwnerId(ctx context.Context, in *MsgGuildUpdateOwnerId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateEntrySubstationId(ctx context.Context, in *MsgGuildUpdateEntrySubstationId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateEndpoint(ctx context.Context, in *MsgGuildUpdateEndpoint, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimum(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimum, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByInvite(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByInvite, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByRequest(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByRequest, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildMembershipInvite(ctx context.Context, in *MsgGuildMembershipInvite, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteApprove(ctx context.Context, in *MsgGuildMembershipInviteApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteDeny(ctx context.Context, in *MsgGuildMembershipInviteDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteRevoke(ctx context.Context, in *MsgGuildMembershipInviteRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoin(ctx context.Context, in *MsgGuildMembershipJoin, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoinProxy(ctx context.Context, in *MsgGuildMembershipJoinProxy, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipKick(ctx context.Context, in *MsgGuildMembershipKick, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequest(ctx context.Context, in *MsgGuildMembershipRequest, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestApprove(ctx context.Context, in *MsgGuildMembershipRequestApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestDeny(ctx context.Context, in *MsgGuildMembershipRequestDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestRevoke(ctx context.Context, in *MsgGuildMembershipRequestRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	PermissionGrantOnAddress(ctx context.Context, in *MsgPermissionGrantOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionGrantOnObject(ctx context.Context, in *MsgPermissionGrantOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionRevokeOnAddress(ctx context.Context, in *MsgPermissionRevokeOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionRevokeOnObject(ctx context.Context, in *MsgPermissionRevokeOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionSetOnAddress(ctx context.Context, in *MsgPermissionSetOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionSetOnObject(ctx context.Context, in *MsgPermissionSetOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PlanetExplore(ctx context.Context, in *MsgPlanetExplore, opts ...grpc.CallOption) (*MsgPlanetExploreResponse, error)
	PlanetRaidComplete(ctx context.Context, in *MsgPlanetRaidComplete, opts ...grpc.CallOption) (*MsgPlanetRaidCompleteResponse, error)
	PlayerUpdatePrimaryAddress(ctx context.Context, in *MsgPlayerUpdatePrimaryAddress, opts ...grpc.CallOption) (*MsgPlayerUpdatePrimaryAddressResponse, error)
	ProviderCreate(ctx context.Context, in *MsgProviderCreate, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderWithdrawBalance(ctx context.Context, in *MsgProviderWithdrawBalance, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderUpdateCapacityMinimum(ctx context.Context, in *MsgProviderUpdateCapacityMinimum, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderUpdateCapacityMaximum(ctx context.Context, in *MsgProviderUpdateCapacityMaximum, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderUpdateDurationMinimum(ctx context.Context, in *MsgProviderUpdateDurationMinimum, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderUpdateDurationMaximum(ctx context.Context, in *MsgProviderUpdateDurationMaximum, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderUpdateAccessPolicy(ctx context.Context, in *MsgProviderUpdateAccessPolicy, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderGuildGrant(ctx context.Context, in *MsgProviderGuildGrant, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderGuildRevoke(ctx context.Context, in *MsgProviderGuildRevoke, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	ProviderDelete(ctx context.Context, in *MsgProviderDelete, opts ...grpc.CallOption) (*MsgProviderResponse, error)
	StructActivate(ctx context.Context, in *MsgStructActivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructDeactivate(ctx context.Context, in *MsgStructDeactivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructBuildInitiate(ctx context.Context, in *MsgStructBuildInitiate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructBuildComplete(ctx context.Context, in *MsgStructBuildComplete, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructBuildCancel(ctx context.Context, in *MsgStructBuildCancel, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructDefenseSet(ctx context.Context, in *MsgStructDefenseSet, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructDefenseClear(ctx context.Context, in *MsgStructDefenseClear, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructMove(ctx context.Context, in *MsgStructMove, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructAttack(ctx context.Context, in *MsgStructAttack, opts ...grpc.CallOption) (*MsgStructAttackResponse, error)
	StructStealthActivate(ctx context.Context, in *MsgStructStealthActivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructStealthDeactivate(ctx context.Context, in *MsgStructStealthDeactivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error)
	StructGeneratorInfuse(ctx context.Context, in *MsgStructGeneratorInfuse, opts ...grpc.CallOption) (*MsgStructGeneratorStatusResponse, error)
	StructOreMinerComplete(ctx context.Context, in *MsgStructOreMinerComplete, opts ...grpc.CallOption) (*MsgStructOreMinerStatusResponse, error)
	StructOreRefineryComplete(ctx context.Context, in *MsgStructOreRefineryComplete, opts ...grpc.CallOption) (*MsgStructOreRefineryStatusResponse, error)
	SubstationCreate(ctx context.Context, in *MsgSubstationCreate, opts ...grpc.CallOption) (*MsgSubstationCreateResponse, error)
	SubstationDelete(ctx context.Context, in *MsgSubstationDelete, opts ...grpc.CallOption) (*MsgSubstationDeleteResponse, error)
	SubstationAllocationConnect(ctx context.Context, in *MsgSubstationAllocationConnect, opts ...grpc.CallOption) (*MsgSubstationAllocationConnectResponse, error)
	SubstationAllocationDisconnect(ctx context.Context, in *MsgSubstationAllocationDisconnect, opts ...grpc.CallOption) (*MsgSubstationAllocationDisconnectResponse, error)
	SubstationPlayerConnect(ctx context.Context, in *MsgSubstationPlayerConnect, opts ...grpc.CallOption) (*MsgSubstationPlayerConnectResponse, error)
	SubstationPlayerDisconnect(ctx context.Context, in *MsgSubstationPlayerDisconnect, opts ...grpc.CallOption) (*MsgSubstationPlayerDisconnectResponse, error)
	SubstationPlayerMigrate(ctx context.Context, in *MsgSubstationPlayerMigrate, opts ...grpc.CallOption) (*MsgSubstationPlayerMigrateResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddressRegister(ctx context.Context, in *MsgAddressRegister, opts ...grpc.CallOption) (*MsgAddressRegisterResponse, error) {
	out := new(MsgAddressRegisterResponse)
	err := c.cc.Invoke(ctx, Msg_AddressRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddressRevoke(ctx context.Context, in *MsgAddressRevoke, opts ...grpc.CallOption) (*MsgAddressRevokeResponse, error) {
	out := new(MsgAddressRevokeResponse)
	err := c.cc.Invoke(ctx, Msg_AddressRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreementOpen(ctx context.Context, in *MsgAgreementOpen, opts ...grpc.CallOption) (*MsgAgreementResponse, error) {
	out := new(MsgAgreementResponse)
	err := c.cc.Invoke(ctx, Msg_AgreementOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreementClose(ctx context.Context, in *MsgAgreementClose, opts ...grpc.CallOption) (*MsgAgreementResponse, error) {
	out := new(MsgAgreementResponse)
	err := c.cc.Invoke(ctx, Msg_AgreementClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreementCapacityIncrease(ctx context.Context, in *MsgAgreementCapacityIncrease, opts ...grpc.CallOption) (*MsgAgreementResponse, error) {
	out := new(MsgAgreementResponse)
	err := c.cc.Invoke(ctx, Msg_AgreementCapacityIncrease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreementCapacityDecrease(ctx context.Context, in *MsgAgreementCapacityDecrease, opts ...grpc.CallOption) (*MsgAgreementResponse, error) {
	out := new(MsgAgreementResponse)
	err := c.cc.Invoke(ctx, Msg_AgreementCapacityDecrease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AgreementDurationIncrease(ctx context.Context, in *MsgAgreementDurationIncrease, opts ...grpc.CallOption) (*MsgAgreementResponse, error) {
	out := new(MsgAgreementResponse)
	err := c.cc.Invoke(ctx, Msg_AgreementDurationIncrease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocationCreate(ctx context.Context, in *MsgAllocationCreate, opts ...grpc.CallOption) (*MsgAllocationCreateResponse, error) {
	out := new(MsgAllocationCreateResponse)
	err := c.cc.Invoke(ctx, Msg_AllocationCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocationDelete(ctx context.Context, in *MsgAllocationDelete, opts ...grpc.CallOption) (*MsgAllocationDeleteResponse, error) {
	out := new(MsgAllocationDeleteResponse)
	err := c.cc.Invoke(ctx, Msg_AllocationDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocationUpdate(ctx context.Context, in *MsgAllocationUpdate, opts ...grpc.CallOption) (*MsgAllocationUpdateResponse, error) {
	out := new(MsgAllocationUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_AllocationUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocationTransfer(ctx context.Context, in *MsgAllocationTransfer, opts ...grpc.CallOption) (*MsgAllocationTransferResponse, error) {
	out := new(MsgAllocationTransferResponse)
	err := c.cc.Invoke(ctx, Msg_AllocationTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FleetMove(ctx context.Context, in *MsgFleetMove, opts ...grpc.CallOption) (*MsgFleetMoveResponse, error) {
	out := new(MsgFleetMoveResponse)
	err := c.cc.Invoke(ctx, Msg_FleetMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildCreate(ctx context.Context, in *MsgGuildCreate, opts ...grpc.CallOption) (*MsgGuildCreateResponse, error) {
	out := new(MsgGuildCreateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateOwnerId(ctx context.Context, in *MsgGuildUpdateOwnerId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateOwnerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateEntrySubstationId(ctx context.Context, in *MsgGuildUpdateEntrySubstationId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateEntrySubstationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateEndpoint(ctx context.Context, in *MsgGuildUpdateEndpoint, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateJoinInfusionMinimum(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimum, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateJoinInfusionMinimum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateJoinInfusionMinimumBypassByInvite(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByInvite, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateJoinInfusionMinimumBypassByRequest(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByRequest, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInvite(ctx context.Context, in *MsgGuildMembershipInvite, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInviteApprove(ctx context.Context, in *MsgGuildMembershipInviteApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInviteApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInviteDeny(ctx context.Context, in *MsgGuildMembershipInviteDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInviteDeny_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInviteRevoke(ctx context.Context, in *MsgGuildMembershipInviteRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInviteRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipJoin(ctx context.Context, in *MsgGuildMembershipJoin, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipJoinProxy(ctx context.Context, in *MsgGuildMembershipJoinProxy, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipJoinProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipKick(ctx context.Context, in *MsgGuildMembershipKick, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipKick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequest(ctx context.Context, in *MsgGuildMembershipRequest, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequestApprove(ctx context.Context, in *MsgGuildMembershipRequestApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequestApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequestDeny(ctx context.Context, in *MsgGuildMembershipRequestDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequestDeny_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequestRevoke(ctx context.Context, in *MsgGuildMembershipRequestRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequestRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionGrantOnAddress(ctx context.Context, in *MsgPermissionGrantOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionGrantOnAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionGrantOnObject(ctx context.Context, in *MsgPermissionGrantOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionGrantOnObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionRevokeOnAddress(ctx context.Context, in *MsgPermissionRevokeOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionRevokeOnAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionRevokeOnObject(ctx context.Context, in *MsgPermissionRevokeOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionRevokeOnObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionSetOnAddress(ctx context.Context, in *MsgPermissionSetOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionSetOnAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionSetOnObject(ctx context.Context, in *MsgPermissionSetOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionSetOnObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlanetExplore(ctx context.Context, in *MsgPlanetExplore, opts ...grpc.CallOption) (*MsgPlanetExploreResponse, error) {
	out := new(MsgPlanetExploreResponse)
	err := c.cc.Invoke(ctx, Msg_PlanetExplore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlanetRaidComplete(ctx context.Context, in *MsgPlanetRaidComplete, opts ...grpc.CallOption) (*MsgPlanetRaidCompleteResponse, error) {
	out := new(MsgPlanetRaidCompleteResponse)
	err := c.cc.Invoke(ctx, Msg_PlanetRaidComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlayerUpdatePrimaryAddress(ctx context.Context, in *MsgPlayerUpdatePrimaryAddress, opts ...grpc.CallOption) (*MsgPlayerUpdatePrimaryAddressResponse, error) {
	out := new(MsgPlayerUpdatePrimaryAddressResponse)
	err := c.cc.Invoke(ctx, Msg_PlayerUpdatePrimaryAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderCreate(ctx context.Context, in *MsgProviderCreate, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderWithdrawBalance(ctx context.Context, in *MsgProviderWithdrawBalance, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderWithdrawBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderUpdateCapacityMinimum(ctx context.Context, in *MsgProviderUpdateCapacityMinimum, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderUpdateCapacityMinimum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderUpdateCapacityMaximum(ctx context.Context, in *MsgProviderUpdateCapacityMaximum, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderUpdateCapacityMaximum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderUpdateDurationMinimum(ctx context.Context, in *MsgProviderUpdateDurationMinimum, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderUpdateDurationMinimum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderUpdateDurationMaximum(ctx context.Context, in *MsgProviderUpdateDurationMaximum, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderUpdateDurationMaximum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderUpdateAccessPolicy(ctx context.Context, in *MsgProviderUpdateAccessPolicy, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderUpdateAccessPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderGuildGrant(ctx context.Context, in *MsgProviderGuildGrant, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderGuildGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderGuildRevoke(ctx context.Context, in *MsgProviderGuildRevoke, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderGuildRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProviderDelete(ctx context.Context, in *MsgProviderDelete, opts ...grpc.CallOption) (*MsgProviderResponse, error) {
	out := new(MsgProviderResponse)
	err := c.cc.Invoke(ctx, Msg_ProviderDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructActivate(ctx context.Context, in *MsgStructActivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructActivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructDeactivate(ctx context.Context, in *MsgStructDeactivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructDeactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructBuildInitiate(ctx context.Context, in *MsgStructBuildInitiate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructBuildInitiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructBuildComplete(ctx context.Context, in *MsgStructBuildComplete, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructBuildComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructBuildCancel(ctx context.Context, in *MsgStructBuildCancel, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructBuildCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructDefenseSet(ctx context.Context, in *MsgStructDefenseSet, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructDefenseSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructDefenseClear(ctx context.Context, in *MsgStructDefenseClear, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructDefenseClear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructMove(ctx context.Context, in *MsgStructMove, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructMove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructAttack(ctx context.Context, in *MsgStructAttack, opts ...grpc.CallOption) (*MsgStructAttackResponse, error) {
	out := new(MsgStructAttackResponse)
	err := c.cc.Invoke(ctx, Msg_StructAttack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructStealthActivate(ctx context.Context, in *MsgStructStealthActivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructStealthActivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructStealthDeactivate(ctx context.Context, in *MsgStructStealthDeactivate, opts ...grpc.CallOption) (*MsgStructStatusResponse, error) {
	out := new(MsgStructStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructStealthDeactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructGeneratorInfuse(ctx context.Context, in *MsgStructGeneratorInfuse, opts ...grpc.CallOption) (*MsgStructGeneratorStatusResponse, error) {
	out := new(MsgStructGeneratorStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructGeneratorInfuse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructOreMinerComplete(ctx context.Context, in *MsgStructOreMinerComplete, opts ...grpc.CallOption) (*MsgStructOreMinerStatusResponse, error) {
	out := new(MsgStructOreMinerStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructOreMinerComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructOreRefineryComplete(ctx context.Context, in *MsgStructOreRefineryComplete, opts ...grpc.CallOption) (*MsgStructOreRefineryStatusResponse, error) {
	out := new(MsgStructOreRefineryStatusResponse)
	err := c.cc.Invoke(ctx, Msg_StructOreRefineryComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationCreate(ctx context.Context, in *MsgSubstationCreate, opts ...grpc.CallOption) (*MsgSubstationCreateResponse, error) {
	out := new(MsgSubstationCreateResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationDelete(ctx context.Context, in *MsgSubstationDelete, opts ...grpc.CallOption) (*MsgSubstationDeleteResponse, error) {
	out := new(MsgSubstationDeleteResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationAllocationConnect(ctx context.Context, in *MsgSubstationAllocationConnect, opts ...grpc.CallOption) (*MsgSubstationAllocationConnectResponse, error) {
	out := new(MsgSubstationAllocationConnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationAllocationConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationAllocationDisconnect(ctx context.Context, in *MsgSubstationAllocationDisconnect, opts ...grpc.CallOption) (*MsgSubstationAllocationDisconnectResponse, error) {
	out := new(MsgSubstationAllocationDisconnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationAllocationDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationPlayerConnect(ctx context.Context, in *MsgSubstationPlayerConnect, opts ...grpc.CallOption) (*MsgSubstationPlayerConnectResponse, error) {
	out := new(MsgSubstationPlayerConnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationPlayerConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationPlayerDisconnect(ctx context.Context, in *MsgSubstationPlayerDisconnect, opts ...grpc.CallOption) (*MsgSubstationPlayerDisconnectResponse, error) {
	out := new(MsgSubstationPlayerDisconnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationPlayerDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationPlayerMigrate(ctx context.Context, in *MsgSubstationPlayerMigrate, opts ...grpc.CallOption) (*MsgSubstationPlayerMigrateResponse, error) {
	out := new(MsgSubstationPlayerMigrateResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationPlayerMigrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	AddressRegister(context.Context, *MsgAddressRegister) (*MsgAddressRegisterResponse, error)
	AddressRevoke(context.Context, *MsgAddressRevoke) (*MsgAddressRevokeResponse, error)
	AgreementOpen(context.Context, *MsgAgreementOpen) (*MsgAgreementResponse, error)
	AgreementClose(context.Context, *MsgAgreementClose) (*MsgAgreementResponse, error)
	AgreementCapacityIncrease(context.Context, *MsgAgreementCapacityIncrease) (*MsgAgreementResponse, error)
	AgreementCapacityDecrease(context.Context, *MsgAgreementCapacityDecrease) (*MsgAgreementResponse, error)
	AgreementDurationIncrease(context.Context, *MsgAgreementDurationIncrease) (*MsgAgreementResponse, error)
	AllocationCreate(context.Context, *MsgAllocationCreate) (*MsgAllocationCreateResponse, error)
	AllocationDelete(context.Context, *MsgAllocationDelete) (*MsgAllocationDeleteResponse, error)
	AllocationUpdate(context.Context, *MsgAllocationUpdate) (*MsgAllocationUpdateResponse, error)
	AllocationTransfer(context.Context, *MsgAllocationTransfer) (*MsgAllocationTransferResponse, error)
	FleetMove(context.Context, *MsgFleetMove) (*MsgFleetMoveResponse, error)
	GuildCreate(context.Context, *MsgGuildCreate) (*MsgGuildCreateResponse, error)
	GuildUpdateOwnerId(context.Context, *MsgGuildUpdateOwnerId) (*MsgGuildUpdateResponse, error)
	GuildUpdateEntrySubstationId(context.Context, *MsgGuildUpdateEntrySubstationId) (*MsgGuildUpdateResponse, error)
	GuildUpdateEndpoint(context.Context, *MsgGuildUpdateEndpoint) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimum(context.Context, *MsgGuildUpdateJoinInfusionMinimum) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByInvite(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByInvite) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByRequest(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByRequest) (*MsgGuildUpdateResponse, error)
	GuildMembershipInvite(context.Context, *MsgGuildMembershipInvite) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteApprove(context.Context, *MsgGuildMembershipInviteApprove) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteDeny(context.Context, *MsgGuildMembershipInviteDeny) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteRevoke(context.Context, *MsgGuildMembershipInviteRevoke) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoin(context.Context, *MsgGuildMembershipJoin) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoinProxy(context.Context, *MsgGuildMembershipJoinProxy) (*MsgGuildMembershipResponse, error)
	GuildMembershipKick(context.Context, *MsgGuildMembershipKick) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequest(context.Context, *MsgGuildMembershipRequest) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestApprove(context.Context, *MsgGuildMembershipRequestApprove) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestDeny(context.Context, *MsgGuildMembershipRequestDeny) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestRevoke(context.Context, *MsgGuildMembershipRequestRevoke) (*MsgGuildMembershipResponse, error)
	PermissionGrantOnAddress(context.Context, *MsgPermissionGrantOnAddress) (*MsgPermissionResponse, error)
	PermissionGrantOnObject(context.Context, *MsgPermissionGrantOnObject) (*MsgPermissionResponse, error)
	PermissionRevokeOnAddress(context.Context, *MsgPermissionRevokeOnAddress) (*MsgPermissionResponse, error)
	PermissionRevokeOnObject(context.Context, *MsgPermissionRevokeOnObject) (*MsgPermissionResponse, error)
	PermissionSetOnAddress(context.Context, *MsgPermissionSetOnAddress) (*MsgPermissionResponse, error)
	PermissionSetOnObject(context.Context, *MsgPermissionSetOnObject) (*MsgPermissionResponse, error)
	PlanetExplore(context.Context, *MsgPlanetExplore) (*MsgPlanetExploreResponse, error)
	PlanetRaidComplete(context.Context, *MsgPlanetRaidComplete) (*MsgPlanetRaidCompleteResponse, error)
	PlayerUpdatePrimaryAddress(context.Context, *MsgPlayerUpdatePrimaryAddress) (*MsgPlayerUpdatePrimaryAddressResponse, error)
	ProviderCreate(context.Context, *MsgProviderCreate) (*MsgProviderResponse, error)
	ProviderWithdrawBalance(context.Context, *MsgProviderWithdrawBalance) (*MsgProviderResponse, error)
	ProviderUpdateCapacityMinimum(context.Context, *MsgProviderUpdateCapacityMinimum) (*MsgProviderResponse, error)
	ProviderUpdateCapacityMaximum(context.Context, *MsgProviderUpdateCapacityMaximum) (*MsgProviderResponse, error)
	ProviderUpdateDurationMinimum(context.Context, *MsgProviderUpdateDurationMinimum) (*MsgProviderResponse, error)
	ProviderUpdateDurationMaximum(context.Context, *MsgProviderUpdateDurationMaximum) (*MsgProviderResponse, error)
	ProviderUpdateAccessPolicy(context.Context, *MsgProviderUpdateAccessPolicy) (*MsgProviderResponse, error)
	ProviderGuildGrant(context.Context, *MsgProviderGuildGrant) (*MsgProviderResponse, error)
	ProviderGuildRevoke(context.Context, *MsgProviderGuildRevoke) (*MsgProviderResponse, error)
	ProviderDelete(context.Context, *MsgProviderDelete) (*MsgProviderResponse, error)
	StructActivate(context.Context, *MsgStructActivate) (*MsgStructStatusResponse, error)
	StructDeactivate(context.Context, *MsgStructDeactivate) (*MsgStructStatusResponse, error)
	StructBuildInitiate(context.Context, *MsgStructBuildInitiate) (*MsgStructStatusResponse, error)
	StructBuildComplete(context.Context, *MsgStructBuildComplete) (*MsgStructStatusResponse, error)
	StructBuildCancel(context.Context, *MsgStructBuildCancel) (*MsgStructStatusResponse, error)
	StructDefenseSet(context.Context, *MsgStructDefenseSet) (*MsgStructStatusResponse, error)
	StructDefenseClear(context.Context, *MsgStructDefenseClear) (*MsgStructStatusResponse, error)
	StructMove(context.Context, *MsgStructMove) (*MsgStructStatusResponse, error)
	StructAttack(context.Context, *MsgStructAttack) (*MsgStructAttackResponse, error)
	StructStealthActivate(context.Context, *MsgStructStealthActivate) (*MsgStructStatusResponse, error)
	StructStealthDeactivate(context.Context, *MsgStructStealthDeactivate) (*MsgStructStatusResponse, error)
	StructGeneratorInfuse(context.Context, *MsgStructGeneratorInfuse) (*MsgStructGeneratorStatusResponse, error)
	StructOreMinerComplete(context.Context, *MsgStructOreMinerComplete) (*MsgStructOreMinerStatusResponse, error)
	StructOreRefineryComplete(context.Context, *MsgStructOreRefineryComplete) (*MsgStructOreRefineryStatusResponse, error)
	SubstationCreate(context.Context, *MsgSubstationCreate) (*MsgSubstationCreateResponse, error)
	SubstationDelete(context.Context, *MsgSubstationDelete) (*MsgSubstationDeleteResponse, error)
	SubstationAllocationConnect(context.Context, *MsgSubstationAllocationConnect) (*MsgSubstationAllocationConnectResponse, error)
	SubstationAllocationDisconnect(context.Context, *MsgSubstationAllocationDisconnect) (*MsgSubstationAllocationDisconnectResponse, error)
	SubstationPlayerConnect(context.Context, *MsgSubstationPlayerConnect) (*MsgSubstationPlayerConnectResponse, error)
	SubstationPlayerDisconnect(context.Context, *MsgSubstationPlayerDisconnect) (*MsgSubstationPlayerDisconnectResponse, error)
	SubstationPlayerMigrate(context.Context, *MsgSubstationPlayerMigrate) (*MsgSubstationPlayerMigrateResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddressRegister(context.Context, *MsgAddressRegister) (*MsgAddressRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressRegister not implemented")
}
func (UnimplementedMsgServer) AddressRevoke(context.Context, *MsgAddressRevoke) (*MsgAddressRevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressRevoke not implemented")
}
func (UnimplementedMsgServer) AgreementOpen(context.Context, *MsgAgreementOpen) (*MsgAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreementOpen not implemented")
}
func (UnimplementedMsgServer) AgreementClose(context.Context, *MsgAgreementClose) (*MsgAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreementClose not implemented")
}
func (UnimplementedMsgServer) AgreementCapacityIncrease(context.Context, *MsgAgreementCapacityIncrease) (*MsgAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreementCapacityIncrease not implemented")
}
func (UnimplementedMsgServer) AgreementCapacityDecrease(context.Context, *MsgAgreementCapacityDecrease) (*MsgAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreementCapacityDecrease not implemented")
}
func (UnimplementedMsgServer) AgreementDurationIncrease(context.Context, *MsgAgreementDurationIncrease) (*MsgAgreementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgreementDurationIncrease not implemented")
}
func (UnimplementedMsgServer) AllocationCreate(context.Context, *MsgAllocationCreate) (*MsgAllocationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationCreate not implemented")
}
func (UnimplementedMsgServer) AllocationDelete(context.Context, *MsgAllocationDelete) (*MsgAllocationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationDelete not implemented")
}
func (UnimplementedMsgServer) AllocationUpdate(context.Context, *MsgAllocationUpdate) (*MsgAllocationUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationUpdate not implemented")
}
func (UnimplementedMsgServer) AllocationTransfer(context.Context, *MsgAllocationTransfer) (*MsgAllocationTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationTransfer not implemented")
}
func (UnimplementedMsgServer) FleetMove(context.Context, *MsgFleetMove) (*MsgFleetMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FleetMove not implemented")
}
func (UnimplementedMsgServer) GuildCreate(context.Context, *MsgGuildCreate) (*MsgGuildCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildCreate not implemented")
}
func (UnimplementedMsgServer) GuildUpdateOwnerId(context.Context, *MsgGuildUpdateOwnerId) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateOwnerId not implemented")
}
func (UnimplementedMsgServer) GuildUpdateEntrySubstationId(context.Context, *MsgGuildUpdateEntrySubstationId) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateEntrySubstationId not implemented")
}
func (UnimplementedMsgServer) GuildUpdateEndpoint(context.Context, *MsgGuildUpdateEndpoint) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateEndpoint not implemented")
}
func (UnimplementedMsgServer) GuildUpdateJoinInfusionMinimum(context.Context, *MsgGuildUpdateJoinInfusionMinimum) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateJoinInfusionMinimum not implemented")
}
func (UnimplementedMsgServer) GuildUpdateJoinInfusionMinimumBypassByInvite(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByInvite) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateJoinInfusionMinimumBypassByInvite not implemented")
}
func (UnimplementedMsgServer) GuildUpdateJoinInfusionMinimumBypassByRequest(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByRequest) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateJoinInfusionMinimumBypassByRequest not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInvite(context.Context, *MsgGuildMembershipInvite) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInvite not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInviteApprove(context.Context, *MsgGuildMembershipInviteApprove) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInviteApprove not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInviteDeny(context.Context, *MsgGuildMembershipInviteDeny) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInviteDeny not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInviteRevoke(context.Context, *MsgGuildMembershipInviteRevoke) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInviteRevoke not implemented")
}
func (UnimplementedMsgServer) GuildMembershipJoin(context.Context, *MsgGuildMembershipJoin) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipJoin not implemented")
}
func (UnimplementedMsgServer) GuildMembershipJoinProxy(context.Context, *MsgGuildMembershipJoinProxy) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipJoinProxy not implemented")
}
func (UnimplementedMsgServer) GuildMembershipKick(context.Context, *MsgGuildMembershipKick) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipKick not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequest(context.Context, *MsgGuildMembershipRequest) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequest not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequestApprove(context.Context, *MsgGuildMembershipRequestApprove) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequestApprove not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequestDeny(context.Context, *MsgGuildMembershipRequestDeny) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequestDeny not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequestRevoke(context.Context, *MsgGuildMembershipRequestRevoke) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequestRevoke not implemented")
}
func (UnimplementedMsgServer) PermissionGrantOnAddress(context.Context, *MsgPermissionGrantOnAddress) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionGrantOnAddress not implemented")
}
func (UnimplementedMsgServer) PermissionGrantOnObject(context.Context, *MsgPermissionGrantOnObject) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionGrantOnObject not implemented")
}
func (UnimplementedMsgServer) PermissionRevokeOnAddress(context.Context, *MsgPermissionRevokeOnAddress) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionRevokeOnAddress not implemented")
}
func (UnimplementedMsgServer) PermissionRevokeOnObject(context.Context, *MsgPermissionRevokeOnObject) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionRevokeOnObject not implemented")
}
func (UnimplementedMsgServer) PermissionSetOnAddress(context.Context, *MsgPermissionSetOnAddress) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionSetOnAddress not implemented")
}
func (UnimplementedMsgServer) PermissionSetOnObject(context.Context, *MsgPermissionSetOnObject) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionSetOnObject not implemented")
}
func (UnimplementedMsgServer) PlanetExplore(context.Context, *MsgPlanetExplore) (*MsgPlanetExploreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetExplore not implemented")
}
func (UnimplementedMsgServer) PlanetRaidComplete(context.Context, *MsgPlanetRaidComplete) (*MsgPlanetRaidCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetRaidComplete not implemented")
}
func (UnimplementedMsgServer) PlayerUpdatePrimaryAddress(context.Context, *MsgPlayerUpdatePrimaryAddress) (*MsgPlayerUpdatePrimaryAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerUpdatePrimaryAddress not implemented")
}
func (UnimplementedMsgServer) ProviderCreate(context.Context, *MsgProviderCreate) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderCreate not implemented")
}
func (UnimplementedMsgServer) ProviderWithdrawBalance(context.Context, *MsgProviderWithdrawBalance) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderWithdrawBalance not implemented")
}
func (UnimplementedMsgServer) ProviderUpdateCapacityMinimum(context.Context, *MsgProviderUpdateCapacityMinimum) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderUpdateCapacityMinimum not implemented")
}
func (UnimplementedMsgServer) ProviderUpdateCapacityMaximum(context.Context, *MsgProviderUpdateCapacityMaximum) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderUpdateCapacityMaximum not implemented")
}
func (UnimplementedMsgServer) ProviderUpdateDurationMinimum(context.Context, *MsgProviderUpdateDurationMinimum) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderUpdateDurationMinimum not implemented")
}
func (UnimplementedMsgServer) ProviderUpdateDurationMaximum(context.Context, *MsgProviderUpdateDurationMaximum) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderUpdateDurationMaximum not implemented")
}
func (UnimplementedMsgServer) ProviderUpdateAccessPolicy(context.Context, *MsgProviderUpdateAccessPolicy) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderUpdateAccessPolicy not implemented")
}
func (UnimplementedMsgServer) ProviderGuildGrant(context.Context, *MsgProviderGuildGrant) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderGuildGrant not implemented")
}
func (UnimplementedMsgServer) ProviderGuildRevoke(context.Context, *MsgProviderGuildRevoke) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderGuildRevoke not implemented")
}
func (UnimplementedMsgServer) ProviderDelete(context.Context, *MsgProviderDelete) (*MsgProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderDelete not implemented")
}
func (UnimplementedMsgServer) StructActivate(context.Context, *MsgStructActivate) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructActivate not implemented")
}
func (UnimplementedMsgServer) StructDeactivate(context.Context, *MsgStructDeactivate) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructDeactivate not implemented")
}
func (UnimplementedMsgServer) StructBuildInitiate(context.Context, *MsgStructBuildInitiate) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBuildInitiate not implemented")
}
func (UnimplementedMsgServer) StructBuildComplete(context.Context, *MsgStructBuildComplete) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBuildComplete not implemented")
}
func (UnimplementedMsgServer) StructBuildCancel(context.Context, *MsgStructBuildCancel) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBuildCancel not implemented")
}
func (UnimplementedMsgServer) StructDefenseSet(context.Context, *MsgStructDefenseSet) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructDefenseSet not implemented")
}
func (UnimplementedMsgServer) StructDefenseClear(context.Context, *MsgStructDefenseClear) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructDefenseClear not implemented")
}
func (UnimplementedMsgServer) StructMove(context.Context, *MsgStructMove) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructMove not implemented")
}
func (UnimplementedMsgServer) StructAttack(context.Context, *MsgStructAttack) (*MsgStructAttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructAttack not implemented")
}
func (UnimplementedMsgServer) StructStealthActivate(context.Context, *MsgStructStealthActivate) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructStealthActivate not implemented")
}
func (UnimplementedMsgServer) StructStealthDeactivate(context.Context, *MsgStructStealthDeactivate) (*MsgStructStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructStealthDeactivate not implemented")
}
func (UnimplementedMsgServer) StructGeneratorInfuse(context.Context, *MsgStructGeneratorInfuse) (*MsgStructGeneratorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructGeneratorInfuse not implemented")
}
func (UnimplementedMsgServer) StructOreMinerComplete(context.Context, *MsgStructOreMinerComplete) (*MsgStructOreMinerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructOreMinerComplete not implemented")
}
func (UnimplementedMsgServer) StructOreRefineryComplete(context.Context, *MsgStructOreRefineryComplete) (*MsgStructOreRefineryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructOreRefineryComplete not implemented")
}
func (UnimplementedMsgServer) SubstationCreate(context.Context, *MsgSubstationCreate) (*MsgSubstationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationCreate not implemented")
}
func (UnimplementedMsgServer) SubstationDelete(context.Context, *MsgSubstationDelete) (*MsgSubstationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationDelete not implemented")
}
func (UnimplementedMsgServer) SubstationAllocationConnect(context.Context, *MsgSubstationAllocationConnect) (*MsgSubstationAllocationConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationAllocationConnect not implemented")
}
func (UnimplementedMsgServer) SubstationAllocationDisconnect(context.Context, *MsgSubstationAllocationDisconnect) (*MsgSubstationAllocationDisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationAllocationDisconnect not implemented")
}
func (UnimplementedMsgServer) SubstationPlayerConnect(context.Context, *MsgSubstationPlayerConnect) (*MsgSubstationPlayerConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationPlayerConnect not implemented")
}
func (UnimplementedMsgServer) SubstationPlayerDisconnect(context.Context, *MsgSubstationPlayerDisconnect) (*MsgSubstationPlayerDisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationPlayerDisconnect not implemented")
}
func (UnimplementedMsgServer) SubstationPlayerMigrate(context.Context, *MsgSubstationPlayerMigrate) (*MsgSubstationPlayerMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationPlayerMigrate not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddressRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddressRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddressRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddressRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddressRegister(ctx, req.(*MsgAddressRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddressRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddressRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddressRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddressRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddressRevoke(ctx, req.(*MsgAddressRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreementOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreementOpen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreementOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AgreementOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreementOpen(ctx, req.(*MsgAgreementOpen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreementClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreementClose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreementClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AgreementClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreementClose(ctx, req.(*MsgAgreementClose))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreementCapacityIncrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreementCapacityIncrease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreementCapacityIncrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AgreementCapacityIncrease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreementCapacityIncrease(ctx, req.(*MsgAgreementCapacityIncrease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreementCapacityDecrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreementCapacityDecrease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreementCapacityDecrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AgreementCapacityDecrease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreementCapacityDecrease(ctx, req.(*MsgAgreementCapacityDecrease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AgreementDurationIncrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAgreementDurationIncrease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AgreementDurationIncrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AgreementDurationIncrease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AgreementDurationIncrease(ctx, req.(*MsgAgreementDurationIncrease))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AllocationCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationCreate(ctx, req.(*MsgAllocationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AllocationDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationDelete(ctx, req.(*MsgAllocationDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AllocationUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationUpdate(ctx, req.(*MsgAllocationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocationTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AllocationTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationTransfer(ctx, req.(*MsgAllocationTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FleetMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFleetMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FleetMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FleetMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FleetMove(ctx, req.(*MsgFleetMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildCreate(ctx, req.(*MsgGuildCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateOwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateOwnerId(ctx, req.(*MsgGuildUpdateOwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateEntrySubstationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateEntrySubstationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateEntrySubstationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateEntrySubstationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateEntrySubstationId(ctx, req.(*MsgGuildUpdateEntrySubstationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateEndpoint(ctx, req.(*MsgGuildUpdateEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateJoinInfusionMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateJoinInfusionMinimum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateJoinInfusionMinimum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimum(ctx, req.(*MsgGuildUpdateJoinInfusionMinimum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateJoinInfusionMinimumBypassByInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByInvite(ctx, req.(*MsgGuildUpdateJoinInfusionMinimumBypassByInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateJoinInfusionMinimumBypassByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByRequest(ctx, req.(*MsgGuildUpdateJoinInfusionMinimumBypassByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInvite(ctx, req.(*MsgGuildMembershipInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInviteApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInviteApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInviteApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInviteApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInviteApprove(ctx, req.(*MsgGuildMembershipInviteApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInviteDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInviteDeny)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInviteDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInviteDeny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInviteDeny(ctx, req.(*MsgGuildMembershipInviteDeny))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInviteRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInviteRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInviteRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInviteRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInviteRevoke(ctx, req.(*MsgGuildMembershipInviteRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipJoin(ctx, req.(*MsgGuildMembershipJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipJoinProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipJoinProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipJoinProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipJoinProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipJoinProxy(ctx, req.(*MsgGuildMembershipJoinProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipKick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipKick(ctx, req.(*MsgGuildMembershipKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequest(ctx, req.(*MsgGuildMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequestApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequestApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequestApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequestApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequestApprove(ctx, req.(*MsgGuildMembershipRequestApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequestDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequestDeny)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequestDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequestDeny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequestDeny(ctx, req.(*MsgGuildMembershipRequestDeny))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequestRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequestRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequestRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequestRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequestRevoke(ctx, req.(*MsgGuildMembershipRequestRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionGrantOnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionGrantOnAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionGrantOnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionGrantOnAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionGrantOnAddress(ctx, req.(*MsgPermissionGrantOnAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionGrantOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionGrantOnObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionGrantOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionGrantOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionGrantOnObject(ctx, req.(*MsgPermissionGrantOnObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionRevokeOnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionRevokeOnAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionRevokeOnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionRevokeOnAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionRevokeOnAddress(ctx, req.(*MsgPermissionRevokeOnAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionRevokeOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionRevokeOnObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionRevokeOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionRevokeOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionRevokeOnObject(ctx, req.(*MsgPermissionRevokeOnObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionSetOnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionSetOnAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionSetOnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionSetOnAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionSetOnAddress(ctx, req.(*MsgPermissionSetOnAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionSetOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionSetOnObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionSetOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionSetOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionSetOnObject(ctx, req.(*MsgPermissionSetOnObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlanetExplore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlanetExplore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlanetExplore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PlanetExplore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlanetExplore(ctx, req.(*MsgPlanetExplore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlanetRaidComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlanetRaidComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlanetRaidComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PlanetRaidComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlanetRaidComplete(ctx, req.(*MsgPlanetRaidComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlayerUpdatePrimaryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlayerUpdatePrimaryAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlayerUpdatePrimaryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PlayerUpdatePrimaryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlayerUpdatePrimaryAddress(ctx, req.(*MsgPlayerUpdatePrimaryAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderCreate(ctx, req.(*MsgProviderCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderWithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderWithdrawBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderWithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderWithdrawBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderWithdrawBalance(ctx, req.(*MsgProviderWithdrawBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderUpdateCapacityMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderUpdateCapacityMinimum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderUpdateCapacityMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderUpdateCapacityMinimum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderUpdateCapacityMinimum(ctx, req.(*MsgProviderUpdateCapacityMinimum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderUpdateCapacityMaximum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderUpdateCapacityMaximum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderUpdateCapacityMaximum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderUpdateCapacityMaximum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderUpdateCapacityMaximum(ctx, req.(*MsgProviderUpdateCapacityMaximum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderUpdateDurationMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderUpdateDurationMinimum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderUpdateDurationMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderUpdateDurationMinimum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderUpdateDurationMinimum(ctx, req.(*MsgProviderUpdateDurationMinimum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderUpdateDurationMaximum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderUpdateDurationMaximum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderUpdateDurationMaximum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderUpdateDurationMaximum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderUpdateDurationMaximum(ctx, req.(*MsgProviderUpdateDurationMaximum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderUpdateAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderUpdateAccessPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderUpdateAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderUpdateAccessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderUpdateAccessPolicy(ctx, req.(*MsgProviderUpdateAccessPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderGuildGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderGuildGrant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderGuildGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderGuildGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderGuildGrant(ctx, req.(*MsgProviderGuildGrant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderGuildRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderGuildRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderGuildRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderGuildRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderGuildRevoke(ctx, req.(*MsgProviderGuildRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProviderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProviderDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProviderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProviderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProviderDelete(ctx, req.(*MsgProviderDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructActivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructActivate(ctx, req.(*MsgStructActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructDeactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructDeactivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructDeactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructDeactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructDeactivate(ctx, req.(*MsgStructDeactivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructBuildInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructBuildInitiate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructBuildInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructBuildInitiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructBuildInitiate(ctx, req.(*MsgStructBuildInitiate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructBuildComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructBuildComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructBuildComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructBuildComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructBuildComplete(ctx, req.(*MsgStructBuildComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructBuildCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructBuildCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructBuildCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructBuildCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructBuildCancel(ctx, req.(*MsgStructBuildCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructDefenseSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructDefenseSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructDefenseSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructDefenseSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructDefenseSet(ctx, req.(*MsgStructDefenseSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructDefenseClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructDefenseClear)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructDefenseClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructDefenseClear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructDefenseClear(ctx, req.(*MsgStructDefenseClear))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructMove(ctx, req.(*MsgStructMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructAttack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructAttack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructAttack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructAttack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructAttack(ctx, req.(*MsgStructAttack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructStealthActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructStealthActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructStealthActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructStealthActivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructStealthActivate(ctx, req.(*MsgStructStealthActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructStealthDeactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructStealthDeactivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructStealthDeactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructStealthDeactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructStealthDeactivate(ctx, req.(*MsgStructStealthDeactivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructGeneratorInfuse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructGeneratorInfuse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructGeneratorInfuse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructGeneratorInfuse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructGeneratorInfuse(ctx, req.(*MsgStructGeneratorInfuse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructOreMinerComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructOreMinerComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructOreMinerComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructOreMinerComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructOreMinerComplete(ctx, req.(*MsgStructOreMinerComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructOreRefineryComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructOreRefineryComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructOreRefineryComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructOreRefineryComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructOreRefineryComplete(ctx, req.(*MsgStructOreRefineryComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationCreate(ctx, req.(*MsgSubstationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationDelete(ctx, req.(*MsgSubstationDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationAllocationConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationAllocationConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationAllocationConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationAllocationConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationAllocationConnect(ctx, req.(*MsgSubstationAllocationConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationAllocationDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationAllocationDisconnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationAllocationDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationAllocationDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationAllocationDisconnect(ctx, req.(*MsgSubstationAllocationDisconnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationPlayerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationPlayerConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationPlayerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationPlayerConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationPlayerConnect(ctx, req.(*MsgSubstationPlayerConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationPlayerDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationPlayerDisconnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationPlayerDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationPlayerDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationPlayerDisconnect(ctx, req.(*MsgSubstationPlayerDisconnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationPlayerMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationPlayerMigrate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationPlayerMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationPlayerMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationPlayerMigrate(ctx, req.(*MsgSubstationPlayerMigrate))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structs.structs.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddressRegister",
			Handler:    _Msg_AddressRegister_Handler,
		},
		{
			MethodName: "AddressRevoke",
			Handler:    _Msg_AddressRevoke_Handler,
		},
		{
			MethodName: "AgreementOpen",
			Handler:    _Msg_AgreementOpen_Handler,
		},
		{
			MethodName: "AgreementClose",
			Handler:    _Msg_AgreementClose_Handler,
		},
		{
			MethodName: "AgreementCapacityIncrease",
			Handler:    _Msg_AgreementCapacityIncrease_Handler,
		},
		{
			MethodName: "AgreementCapacityDecrease",
			Handler:    _Msg_AgreementCapacityDecrease_Handler,
		},
		{
			MethodName: "AgreementDurationIncrease",
			Handler:    _Msg_AgreementDurationIncrease_Handler,
		},
		{
			MethodName: "AllocationCreate",
			Handler:    _Msg_AllocationCreate_Handler,
		},
		{
			MethodName: "AllocationDelete",
			Handler:    _Msg_AllocationDelete_Handler,
		},
		{
			MethodName: "AllocationUpdate",
			Handler:    _Msg_AllocationUpdate_Handler,
		},
		{
			MethodName: "AllocationTransfer",
			Handler:    _Msg_AllocationTransfer_Handler,
		},
		{
			MethodName: "FleetMove",
			Handler:    _Msg_FleetMove_Handler,
		},
		{
			MethodName: "GuildCreate",
			Handler:    _Msg_GuildCreate_Handler,
		},
		{
			MethodName: "GuildUpdateOwnerId",
			Handler:    _Msg_GuildUpdateOwnerId_Handler,
		},
		{
			MethodName: "GuildUpdateEntrySubstationId",
			Handler:    _Msg_GuildUpdateEntrySubstationId_Handler,
		},
		{
			MethodName: "GuildUpdateEndpoint",
			Handler:    _Msg_GuildUpdateEndpoint_Handler,
		},
		{
			MethodName: "GuildUpdateJoinInfusionMinimum",
			Handler:    _Msg_GuildUpdateJoinInfusionMinimum_Handler,
		},
		{
			MethodName: "GuildUpdateJoinInfusionMinimumBypassByInvite",
			Handler:    _Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_Handler,
		},
		{
			MethodName: "GuildUpdateJoinInfusionMinimumBypassByRequest",
			Handler:    _Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_Handler,
		},
		{
			MethodName: "GuildMembershipInvite",
			Handler:    _Msg_GuildMembershipInvite_Handler,
		},
		{
			MethodName: "GuildMembershipInviteApprove",
			Handler:    _Msg_GuildMembershipInviteApprove_Handler,
		},
		{
			MethodName: "GuildMembershipInviteDeny",
			Handler:    _Msg_GuildMembershipInviteDeny_Handler,
		},
		{
			MethodName: "GuildMembershipInviteRevoke",
			Handler:    _Msg_GuildMembershipInviteRevoke_Handler,
		},
		{
			MethodName: "GuildMembershipJoin",
			Handler:    _Msg_GuildMembershipJoin_Handler,
		},
		{
			MethodName: "GuildMembershipJoinProxy",
			Handler:    _Msg_GuildMembershipJoinProxy_Handler,
		},
		{
			MethodName: "GuildMembershipKick",
			Handler:    _Msg_GuildMembershipKick_Handler,
		},
		{
			MethodName: "GuildMembershipRequest",
			Handler:    _Msg_GuildMembershipRequest_Handler,
		},
		{
			MethodName: "GuildMembershipRequestApprove",
			Handler:    _Msg_GuildMembershipRequestApprove_Handler,
		},
		{
			MethodName: "GuildMembershipRequestDeny",
			Handler:    _Msg_GuildMembershipRequestDeny_Handler,
		},
		{
			MethodName: "GuildMembershipRequestRevoke",
			Handler:    _Msg_GuildMembershipRequestRevoke_Handler,
		},
		{
			MethodName: "PermissionGrantOnAddress",
			Handler:    _Msg_PermissionGrantOnAddress_Handler,
		},
		{
			MethodName: "PermissionGrantOnObject",
			Handler:    _Msg_PermissionGrantOnObject_Handler,
		},
		{
			MethodName: "PermissionRevokeOnAddress",
			Handler:    _Msg_PermissionRevokeOnAddress_Handler,
		},
		{
			MethodName: "PermissionRevokeOnObject",
			Handler:    _Msg_PermissionRevokeOnObject_Handler,
		},
		{
			MethodName: "PermissionSetOnAddress",
			Handler:    _Msg_PermissionSetOnAddress_Handler,
		},
		{
			MethodName: "PermissionSetOnObject",
			Handler:    _Msg_PermissionSetOnObject_Handler,
		},
		{
			MethodName: "PlanetExplore",
			Handler:    _Msg_PlanetExplore_Handler,
		},
		{
			MethodName: "PlanetRaidComplete",
			Handler:    _Msg_PlanetRaidComplete_Handler,
		},
		{
			MethodName: "PlayerUpdatePrimaryAddress",
			Handler:    _Msg_PlayerUpdatePrimaryAddress_Handler,
		},
		{
			MethodName: "ProviderCreate",
			Handler:    _Msg_ProviderCreate_Handler,
		},
		{
			MethodName: "ProviderWithdrawBalance",
			Handler:    _Msg_ProviderWithdrawBalance_Handler,
		},
		{
			MethodName: "ProviderUpdateCapacityMinimum",
			Handler:    _Msg_ProviderUpdateCapacityMinimum_Handler,
		},
		{
			MethodName: "ProviderUpdateCapacityMaximum",
			Handler:    _Msg_ProviderUpdateCapacityMaximum_Handler,
		},
		{
			MethodName: "ProviderUpdateDurationMinimum",
			Handler:    _Msg_ProviderUpdateDurationMinimum_Handler,
		},
		{
			MethodName: "ProviderUpdateDurationMaximum",
			Handler:    _Msg_ProviderUpdateDurationMaximum_Handler,
		},
		{
			MethodName: "ProviderUpdateAccessPolicy",
			Handler:    _Msg_ProviderUpdateAccessPolicy_Handler,
		},
		{
			MethodName: "ProviderGuildGrant",
			Handler:    _Msg_ProviderGuildGrant_Handler,
		},
		{
			MethodName: "ProviderGuildRevoke",
			Handler:    _Msg_ProviderGuildRevoke_Handler,
		},
		{
			MethodName: "ProviderDelete",
			Handler:    _Msg_ProviderDelete_Handler,
		},
		{
			MethodName: "StructActivate",
			Handler:    _Msg_StructActivate_Handler,
		},
		{
			MethodName: "StructDeactivate",
			Handler:    _Msg_StructDeactivate_Handler,
		},
		{
			MethodName: "StructBuildInitiate",
			Handler:    _Msg_StructBuildInitiate_Handler,
		},
		{
			MethodName: "StructBuildComplete",
			Handler:    _Msg_StructBuildComplete_Handler,
		},
		{
			MethodName: "StructBuildCancel",
			Handler:    _Msg_StructBuildCancel_Handler,
		},
		{
			MethodName: "StructDefenseSet",
			Handler:    _Msg_StructDefenseSet_Handler,
		},
		{
			MethodName: "StructDefenseClear",
			Handler:    _Msg_StructDefenseClear_Handler,
		},
		{
			MethodName: "StructMove",
			Handler:    _Msg_StructMove_Handler,
		},
		{
			MethodName: "StructAttack",
			Handler:    _Msg_StructAttack_Handler,
		},
		{
			MethodName: "StructStealthActivate",
			Handler:    _Msg_StructStealthActivate_Handler,
		},
		{
			MethodName: "StructStealthDeactivate",
			Handler:    _Msg_StructStealthDeactivate_Handler,
		},
		{
			MethodName: "StructGeneratorInfuse",
			Handler:    _Msg_StructGeneratorInfuse_Handler,
		},
		{
			MethodName: "StructOreMinerComplete",
			Handler:    _Msg_StructOreMinerComplete_Handler,
		},
		{
			MethodName: "StructOreRefineryComplete",
			Handler:    _Msg_StructOreRefineryComplete_Handler,
		},
		{
			MethodName: "SubstationCreate",
			Handler:    _Msg_SubstationCreate_Handler,
		},
		{
			MethodName: "SubstationDelete",
			Handler:    _Msg_SubstationDelete_Handler,
		},
		{
			MethodName: "SubstationAllocationConnect",
			Handler:    _Msg_SubstationAllocationConnect_Handler,
		},
		{
			MethodName: "SubstationAllocationDisconnect",
			Handler:    _Msg_SubstationAllocationDisconnect_Handler,
		},
		{
			MethodName: "SubstationPlayerConnect",
			Handler:    _Msg_SubstationPlayerConnect_Handler,
		},
		{
			MethodName: "SubstationPlayerDisconnect",
			Handler:    _Msg_SubstationPlayerDisconnect_Handler,
		},
		{
			MethodName: "SubstationPlayerMigrate",
			Handler:    _Msg_SubstationPlayerMigrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structs/structs/tx.proto",
}
