// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: structs/structs/tx.proto

package structs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                                  = "/structs.structs.Msg/UpdateParams"
	Msg_AddressRegister_FullMethodName                               = "/structs.structs.Msg/AddressRegister"
	Msg_AddressApproveRegister_FullMethodName                        = "/structs.structs.Msg/AddressApproveRegister"
	Msg_AddressRevoke_FullMethodName                                 = "/structs.structs.Msg/AddressRevoke"
	Msg_AllocationCreate_FullMethodName                              = "/structs.structs.Msg/AllocationCreate"
	Msg_GuildCreate_FullMethodName                                   = "/structs.structs.Msg/GuildCreate"
	Msg_GuildUpdateOwnerId_FullMethodName                            = "/structs.structs.Msg/GuildUpdateOwnerId"
	Msg_GuildUpdateEntrySubstationId_FullMethodName                  = "/structs.structs.Msg/GuildUpdateEntrySubstationId"
	Msg_GuildUpdateEndpoint_FullMethodName                           = "/structs.structs.Msg/GuildUpdateEndpoint"
	Msg_GuildUpdateJoinInfusionMinimum_FullMethodName                = "/structs.structs.Msg/GuildUpdateJoinInfusionMinimum"
	Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_FullMethodName  = "/structs.structs.Msg/GuildUpdateJoinInfusionMinimumBypassByInvite"
	Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_FullMethodName = "/structs.structs.Msg/GuildUpdateJoinInfusionMinimumBypassByRequest"
	Msg_GuildMembershipInvite_FullMethodName                         = "/structs.structs.Msg/GuildMembershipInvite"
	Msg_GuildMembershipInviteApprove_FullMethodName                  = "/structs.structs.Msg/GuildMembershipInviteApprove"
	Msg_GuildMembershipInviteDeny_FullMethodName                     = "/structs.structs.Msg/GuildMembershipInviteDeny"
	Msg_GuildMembershipInviteRevoke_FullMethodName                   = "/structs.structs.Msg/GuildMembershipInviteRevoke"
	Msg_GuildMembershipJoin_FullMethodName                           = "/structs.structs.Msg/GuildMembershipJoin"
	Msg_GuildMembershipJoinProxy_FullMethodName                      = "/structs.structs.Msg/GuildMembershipJoinProxy"
	Msg_GuildMembershipKick_FullMethodName                           = "/structs.structs.Msg/GuildMembershipKick"
	Msg_GuildMembershipRequest_FullMethodName                        = "/structs.structs.Msg/GuildMembershipRequest"
	Msg_GuildMembershipRequestApprove_FullMethodName                 = "/structs.structs.Msg/GuildMembershipRequestApprove"
	Msg_GuildMembershipRequestDeny_FullMethodName                    = "/structs.structs.Msg/GuildMembershipRequestDeny"
	Msg_GuildMembershipRequestRevoke_FullMethodName                  = "/structs.structs.Msg/GuildMembershipRequestRevoke"
	Msg_PermissionGrantOnAddress_FullMethodName                      = "/structs.structs.Msg/PermissionGrantOnAddress"
	Msg_PermissionGrantOnObject_FullMethodName                       = "/structs.structs.Msg/PermissionGrantOnObject"
	Msg_PermissionRevokeOnAddress_FullMethodName                     = "/structs.structs.Msg/PermissionRevokeOnAddress"
	Msg_PermissionRevokeOnObject_FullMethodName                      = "/structs.structs.Msg/PermissionRevokeOnObject"
	Msg_PlanetExplore_FullMethodName                                 = "/structs.structs.Msg/PlanetExplore"
	Msg_PlayerUpdatePrimaryAddress_FullMethodName                    = "/structs.structs.Msg/PlayerUpdatePrimaryAddress"
	Msg_StructActivate_FullMethodName                                = "/structs.structs.Msg/StructActivate"
	Msg_StructBuildInitiate_FullMethodName                           = "/structs.structs.Msg/StructBuildInitiate"
	Msg_StructBuildComplete_FullMethodName                           = "/structs.structs.Msg/StructBuildComplete"
	Msg_StructMineActivate_FullMethodName                            = "/structs.structs.Msg/StructMineActivate"
	Msg_StructMineDeactivate_FullMethodName                          = "/structs.structs.Msg/StructMineDeactivate"
	Msg_StructMine_FullMethodName                                    = "/structs.structs.Msg/StructMine"
	Msg_StructRefineActivate_FullMethodName                          = "/structs.structs.Msg/StructRefineActivate"
	Msg_StructRefineDeactivate_FullMethodName                        = "/structs.structs.Msg/StructRefineDeactivate"
	Msg_StructRefine_FullMethodName                                  = "/structs.structs.Msg/StructRefine"
	Msg_StructInfuse_FullMethodName                                  = "/structs.structs.Msg/StructInfuse"
	Msg_SubstationCreate_FullMethodName                              = "/structs.structs.Msg/SubstationCreate"
	Msg_SubstationDelete_FullMethodName                              = "/structs.structs.Msg/SubstationDelete"
	Msg_SubstationAllocationConnect_FullMethodName                   = "/structs.structs.Msg/SubstationAllocationConnect"
	Msg_SubstationAllocationDisconnect_FullMethodName                = "/structs.structs.Msg/SubstationAllocationDisconnect"
	Msg_SubstationPlayerConnect_FullMethodName                       = "/structs.structs.Msg/SubstationPlayerConnect"
	Msg_SubstationPlayerDisconnect_FullMethodName                    = "/structs.structs.Msg/SubstationPlayerDisconnect"
	Msg_SubstationPlayerMigrate_FullMethodName                       = "/structs.structs.Msg/SubstationPlayerMigrate"
	Msg_Sabotage_FullMethodName                                      = "/structs.structs.Msg/Sabotage"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddressRegister(ctx context.Context, in *MsgAddressRegister, opts ...grpc.CallOption) (*MsgAddressRegisterResponse, error)
	AddressApproveRegister(ctx context.Context, in *MsgAddressApproveRegister, opts ...grpc.CallOption) (*MsgAddressRegisterResponse, error)
	AddressRevoke(ctx context.Context, in *MsgAddressRevoke, opts ...grpc.CallOption) (*MsgAddressRevokeResponse, error)
	AllocationCreate(ctx context.Context, in *MsgAllocationCreate, opts ...grpc.CallOption) (*MsgAllocationCreateResponse, error)
	GuildCreate(ctx context.Context, in *MsgGuildCreate, opts ...grpc.CallOption) (*MsgGuildCreateResponse, error)
	GuildUpdateOwnerId(ctx context.Context, in *MsgGuildUpdateOwnerId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateEntrySubstationId(ctx context.Context, in *MsgGuildUpdateEntrySubstationId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateEndpoint(ctx context.Context, in *MsgGuildUpdateEndpoint, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimum(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimum, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByInvite(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByInvite, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByRequest(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByRequest, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error)
	GuildMembershipInvite(ctx context.Context, in *MsgGuildMembershipInvite, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteApprove(ctx context.Context, in *MsgGuildMembershipInviteApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteDeny(ctx context.Context, in *MsgGuildMembershipInviteDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteRevoke(ctx context.Context, in *MsgGuildMembershipInviteRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoin(ctx context.Context, in *MsgGuildMembershipJoin, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoinProxy(ctx context.Context, in *MsgGuildMembershipJoinProxy, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipKick(ctx context.Context, in *MsgGuildMembershipKick, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequest(ctx context.Context, in *MsgGuildMembershipRequest, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestApprove(ctx context.Context, in *MsgGuildMembershipRequestApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestDeny(ctx context.Context, in *MsgGuildMembershipRequestDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestRevoke(ctx context.Context, in *MsgGuildMembershipRequestRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error)
	PermissionGrantOnAddress(ctx context.Context, in *MsgPermissionGrantOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionGrantOnObject(ctx context.Context, in *MsgPermissionGrantOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionRevokeOnAddress(ctx context.Context, in *MsgPermissionRevokeOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PermissionRevokeOnObject(ctx context.Context, in *MsgPermissionRevokeOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error)
	PlanetExplore(ctx context.Context, in *MsgPlanetExplore, opts ...grpc.CallOption) (*MsgPlanetExploreResponse, error)
	PlayerUpdatePrimaryAddress(ctx context.Context, in *MsgPlayerUpdatePrimaryAddress, opts ...grpc.CallOption) (*MsgPlayerUpdatePrimaryAddressResponse, error)
	StructActivate(ctx context.Context, in *MsgStructActivate, opts ...grpc.CallOption) (*MsgStructActivateResponse, error)
	StructBuildInitiate(ctx context.Context, in *MsgStructBuildInitiate, opts ...grpc.CallOption) (*MsgStructBuildInitiateResponse, error)
	StructBuildComplete(ctx context.Context, in *MsgStructBuildComplete, opts ...grpc.CallOption) (*MsgStructBuildCompleteResponse, error)
	StructMineActivate(ctx context.Context, in *MsgStructMineActivate, opts ...grpc.CallOption) (*MsgStructMineActivateResponse, error)
	StructMineDeactivate(ctx context.Context, in *MsgStructMineDeactivate, opts ...grpc.CallOption) (*MsgStructMineDeactivateResponse, error)
	StructMine(ctx context.Context, in *MsgStructMine, opts ...grpc.CallOption) (*MsgStructMineResponse, error)
	StructRefineActivate(ctx context.Context, in *MsgStructRefineActivate, opts ...grpc.CallOption) (*MsgStructRefineActivateResponse, error)
	StructRefineDeactivate(ctx context.Context, in *MsgStructRefineDeactivate, opts ...grpc.CallOption) (*MsgStructRefineDeactivateResponse, error)
	StructRefine(ctx context.Context, in *MsgStructRefine, opts ...grpc.CallOption) (*MsgStructRefineResponse, error)
	StructInfuse(ctx context.Context, in *MsgStructInfuse, opts ...grpc.CallOption) (*MsgStructInfuseResponse, error)
	SubstationCreate(ctx context.Context, in *MsgSubstationCreate, opts ...grpc.CallOption) (*MsgSubstationCreateResponse, error)
	SubstationDelete(ctx context.Context, in *MsgSubstationDelete, opts ...grpc.CallOption) (*MsgSubstationDeleteResponse, error)
	SubstationAllocationConnect(ctx context.Context, in *MsgSubstationAllocationConnect, opts ...grpc.CallOption) (*MsgSubstationAllocationConnectResponse, error)
	SubstationAllocationDisconnect(ctx context.Context, in *MsgSubstationAllocationDisconnect, opts ...grpc.CallOption) (*MsgSubstationAllocationDisconnectResponse, error)
	SubstationPlayerConnect(ctx context.Context, in *MsgSubstationPlayerConnect, opts ...grpc.CallOption) (*MsgSubstationPlayerConnectResponse, error)
	SubstationPlayerDisconnect(ctx context.Context, in *MsgSubstationPlayerDisconnect, opts ...grpc.CallOption) (*MsgSubstationPlayerDisconnectResponse, error)
	SubstationPlayerMigrate(ctx context.Context, in *MsgSubstationPlayerMigrate, opts ...grpc.CallOption) (*MsgSubstationPlayerMigrateResponse, error)
	// To Remove after battle mechanics added
	Sabotage(ctx context.Context, in *MsgSabotage, opts ...grpc.CallOption) (*MsgSabotageResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddressRegister(ctx context.Context, in *MsgAddressRegister, opts ...grpc.CallOption) (*MsgAddressRegisterResponse, error) {
	out := new(MsgAddressRegisterResponse)
	err := c.cc.Invoke(ctx, Msg_AddressRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddressApproveRegister(ctx context.Context, in *MsgAddressApproveRegister, opts ...grpc.CallOption) (*MsgAddressRegisterResponse, error) {
	out := new(MsgAddressRegisterResponse)
	err := c.cc.Invoke(ctx, Msg_AddressApproveRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddressRevoke(ctx context.Context, in *MsgAddressRevoke, opts ...grpc.CallOption) (*MsgAddressRevokeResponse, error) {
	out := new(MsgAddressRevokeResponse)
	err := c.cc.Invoke(ctx, Msg_AddressRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllocationCreate(ctx context.Context, in *MsgAllocationCreate, opts ...grpc.CallOption) (*MsgAllocationCreateResponse, error) {
	out := new(MsgAllocationCreateResponse)
	err := c.cc.Invoke(ctx, Msg_AllocationCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildCreate(ctx context.Context, in *MsgGuildCreate, opts ...grpc.CallOption) (*MsgGuildCreateResponse, error) {
	out := new(MsgGuildCreateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateOwnerId(ctx context.Context, in *MsgGuildUpdateOwnerId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateOwnerId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateEntrySubstationId(ctx context.Context, in *MsgGuildUpdateEntrySubstationId, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateEntrySubstationId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateEndpoint(ctx context.Context, in *MsgGuildUpdateEndpoint, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateJoinInfusionMinimum(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimum, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateJoinInfusionMinimum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateJoinInfusionMinimumBypassByInvite(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByInvite, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildUpdateJoinInfusionMinimumBypassByRequest(ctx context.Context, in *MsgGuildUpdateJoinInfusionMinimumBypassByRequest, opts ...grpc.CallOption) (*MsgGuildUpdateResponse, error) {
	out := new(MsgGuildUpdateResponse)
	err := c.cc.Invoke(ctx, Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInvite(ctx context.Context, in *MsgGuildMembershipInvite, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInviteApprove(ctx context.Context, in *MsgGuildMembershipInviteApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInviteApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInviteDeny(ctx context.Context, in *MsgGuildMembershipInviteDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInviteDeny_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipInviteRevoke(ctx context.Context, in *MsgGuildMembershipInviteRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipInviteRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipJoin(ctx context.Context, in *MsgGuildMembershipJoin, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipJoinProxy(ctx context.Context, in *MsgGuildMembershipJoinProxy, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipJoinProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipKick(ctx context.Context, in *MsgGuildMembershipKick, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipKick_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequest(ctx context.Context, in *MsgGuildMembershipRequest, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequestApprove(ctx context.Context, in *MsgGuildMembershipRequestApprove, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequestApprove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequestDeny(ctx context.Context, in *MsgGuildMembershipRequestDeny, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequestDeny_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GuildMembershipRequestRevoke(ctx context.Context, in *MsgGuildMembershipRequestRevoke, opts ...grpc.CallOption) (*MsgGuildMembershipResponse, error) {
	out := new(MsgGuildMembershipResponse)
	err := c.cc.Invoke(ctx, Msg_GuildMembershipRequestRevoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionGrantOnAddress(ctx context.Context, in *MsgPermissionGrantOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionGrantOnAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionGrantOnObject(ctx context.Context, in *MsgPermissionGrantOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionGrantOnObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionRevokeOnAddress(ctx context.Context, in *MsgPermissionRevokeOnAddress, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionRevokeOnAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PermissionRevokeOnObject(ctx context.Context, in *MsgPermissionRevokeOnObject, opts ...grpc.CallOption) (*MsgPermissionResponse, error) {
	out := new(MsgPermissionResponse)
	err := c.cc.Invoke(ctx, Msg_PermissionRevokeOnObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlanetExplore(ctx context.Context, in *MsgPlanetExplore, opts ...grpc.CallOption) (*MsgPlanetExploreResponse, error) {
	out := new(MsgPlanetExploreResponse)
	err := c.cc.Invoke(ctx, Msg_PlanetExplore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlayerUpdatePrimaryAddress(ctx context.Context, in *MsgPlayerUpdatePrimaryAddress, opts ...grpc.CallOption) (*MsgPlayerUpdatePrimaryAddressResponse, error) {
	out := new(MsgPlayerUpdatePrimaryAddressResponse)
	err := c.cc.Invoke(ctx, Msg_PlayerUpdatePrimaryAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructActivate(ctx context.Context, in *MsgStructActivate, opts ...grpc.CallOption) (*MsgStructActivateResponse, error) {
	out := new(MsgStructActivateResponse)
	err := c.cc.Invoke(ctx, Msg_StructActivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructBuildInitiate(ctx context.Context, in *MsgStructBuildInitiate, opts ...grpc.CallOption) (*MsgStructBuildInitiateResponse, error) {
	out := new(MsgStructBuildInitiateResponse)
	err := c.cc.Invoke(ctx, Msg_StructBuildInitiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructBuildComplete(ctx context.Context, in *MsgStructBuildComplete, opts ...grpc.CallOption) (*MsgStructBuildCompleteResponse, error) {
	out := new(MsgStructBuildCompleteResponse)
	err := c.cc.Invoke(ctx, Msg_StructBuildComplete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructMineActivate(ctx context.Context, in *MsgStructMineActivate, opts ...grpc.CallOption) (*MsgStructMineActivateResponse, error) {
	out := new(MsgStructMineActivateResponse)
	err := c.cc.Invoke(ctx, Msg_StructMineActivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructMineDeactivate(ctx context.Context, in *MsgStructMineDeactivate, opts ...grpc.CallOption) (*MsgStructMineDeactivateResponse, error) {
	out := new(MsgStructMineDeactivateResponse)
	err := c.cc.Invoke(ctx, Msg_StructMineDeactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructMine(ctx context.Context, in *MsgStructMine, opts ...grpc.CallOption) (*MsgStructMineResponse, error) {
	out := new(MsgStructMineResponse)
	err := c.cc.Invoke(ctx, Msg_StructMine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructRefineActivate(ctx context.Context, in *MsgStructRefineActivate, opts ...grpc.CallOption) (*MsgStructRefineActivateResponse, error) {
	out := new(MsgStructRefineActivateResponse)
	err := c.cc.Invoke(ctx, Msg_StructRefineActivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructRefineDeactivate(ctx context.Context, in *MsgStructRefineDeactivate, opts ...grpc.CallOption) (*MsgStructRefineDeactivateResponse, error) {
	out := new(MsgStructRefineDeactivateResponse)
	err := c.cc.Invoke(ctx, Msg_StructRefineDeactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructRefine(ctx context.Context, in *MsgStructRefine, opts ...grpc.CallOption) (*MsgStructRefineResponse, error) {
	out := new(MsgStructRefineResponse)
	err := c.cc.Invoke(ctx, Msg_StructRefine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StructInfuse(ctx context.Context, in *MsgStructInfuse, opts ...grpc.CallOption) (*MsgStructInfuseResponse, error) {
	out := new(MsgStructInfuseResponse)
	err := c.cc.Invoke(ctx, Msg_StructInfuse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationCreate(ctx context.Context, in *MsgSubstationCreate, opts ...grpc.CallOption) (*MsgSubstationCreateResponse, error) {
	out := new(MsgSubstationCreateResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationDelete(ctx context.Context, in *MsgSubstationDelete, opts ...grpc.CallOption) (*MsgSubstationDeleteResponse, error) {
	out := new(MsgSubstationDeleteResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationAllocationConnect(ctx context.Context, in *MsgSubstationAllocationConnect, opts ...grpc.CallOption) (*MsgSubstationAllocationConnectResponse, error) {
	out := new(MsgSubstationAllocationConnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationAllocationConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationAllocationDisconnect(ctx context.Context, in *MsgSubstationAllocationDisconnect, opts ...grpc.CallOption) (*MsgSubstationAllocationDisconnectResponse, error) {
	out := new(MsgSubstationAllocationDisconnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationAllocationDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationPlayerConnect(ctx context.Context, in *MsgSubstationPlayerConnect, opts ...grpc.CallOption) (*MsgSubstationPlayerConnectResponse, error) {
	out := new(MsgSubstationPlayerConnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationPlayerConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationPlayerDisconnect(ctx context.Context, in *MsgSubstationPlayerDisconnect, opts ...grpc.CallOption) (*MsgSubstationPlayerDisconnectResponse, error) {
	out := new(MsgSubstationPlayerDisconnectResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationPlayerDisconnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubstationPlayerMigrate(ctx context.Context, in *MsgSubstationPlayerMigrate, opts ...grpc.CallOption) (*MsgSubstationPlayerMigrateResponse, error) {
	out := new(MsgSubstationPlayerMigrateResponse)
	err := c.cc.Invoke(ctx, Msg_SubstationPlayerMigrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Sabotage(ctx context.Context, in *MsgSabotage, opts ...grpc.CallOption) (*MsgSabotageResponse, error) {
	out := new(MsgSabotageResponse)
	err := c.cc.Invoke(ctx, Msg_Sabotage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	AddressRegister(context.Context, *MsgAddressRegister) (*MsgAddressRegisterResponse, error)
	AddressApproveRegister(context.Context, *MsgAddressApproveRegister) (*MsgAddressRegisterResponse, error)
	AddressRevoke(context.Context, *MsgAddressRevoke) (*MsgAddressRevokeResponse, error)
	AllocationCreate(context.Context, *MsgAllocationCreate) (*MsgAllocationCreateResponse, error)
	GuildCreate(context.Context, *MsgGuildCreate) (*MsgGuildCreateResponse, error)
	GuildUpdateOwnerId(context.Context, *MsgGuildUpdateOwnerId) (*MsgGuildUpdateResponse, error)
	GuildUpdateEntrySubstationId(context.Context, *MsgGuildUpdateEntrySubstationId) (*MsgGuildUpdateResponse, error)
	GuildUpdateEndpoint(context.Context, *MsgGuildUpdateEndpoint) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimum(context.Context, *MsgGuildUpdateJoinInfusionMinimum) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByInvite(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByInvite) (*MsgGuildUpdateResponse, error)
	GuildUpdateJoinInfusionMinimumBypassByRequest(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByRequest) (*MsgGuildUpdateResponse, error)
	GuildMembershipInvite(context.Context, *MsgGuildMembershipInvite) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteApprove(context.Context, *MsgGuildMembershipInviteApprove) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteDeny(context.Context, *MsgGuildMembershipInviteDeny) (*MsgGuildMembershipResponse, error)
	GuildMembershipInviteRevoke(context.Context, *MsgGuildMembershipInviteRevoke) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoin(context.Context, *MsgGuildMembershipJoin) (*MsgGuildMembershipResponse, error)
	GuildMembershipJoinProxy(context.Context, *MsgGuildMembershipJoinProxy) (*MsgGuildMembershipResponse, error)
	GuildMembershipKick(context.Context, *MsgGuildMembershipKick) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequest(context.Context, *MsgGuildMembershipRequest) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestApprove(context.Context, *MsgGuildMembershipRequestApprove) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestDeny(context.Context, *MsgGuildMembershipRequestDeny) (*MsgGuildMembershipResponse, error)
	GuildMembershipRequestRevoke(context.Context, *MsgGuildMembershipRequestRevoke) (*MsgGuildMembershipResponse, error)
	PermissionGrantOnAddress(context.Context, *MsgPermissionGrantOnAddress) (*MsgPermissionResponse, error)
	PermissionGrantOnObject(context.Context, *MsgPermissionGrantOnObject) (*MsgPermissionResponse, error)
	PermissionRevokeOnAddress(context.Context, *MsgPermissionRevokeOnAddress) (*MsgPermissionResponse, error)
	PermissionRevokeOnObject(context.Context, *MsgPermissionRevokeOnObject) (*MsgPermissionResponse, error)
	PlanetExplore(context.Context, *MsgPlanetExplore) (*MsgPlanetExploreResponse, error)
	PlayerUpdatePrimaryAddress(context.Context, *MsgPlayerUpdatePrimaryAddress) (*MsgPlayerUpdatePrimaryAddressResponse, error)
	StructActivate(context.Context, *MsgStructActivate) (*MsgStructActivateResponse, error)
	StructBuildInitiate(context.Context, *MsgStructBuildInitiate) (*MsgStructBuildInitiateResponse, error)
	StructBuildComplete(context.Context, *MsgStructBuildComplete) (*MsgStructBuildCompleteResponse, error)
	StructMineActivate(context.Context, *MsgStructMineActivate) (*MsgStructMineActivateResponse, error)
	StructMineDeactivate(context.Context, *MsgStructMineDeactivate) (*MsgStructMineDeactivateResponse, error)
	StructMine(context.Context, *MsgStructMine) (*MsgStructMineResponse, error)
	StructRefineActivate(context.Context, *MsgStructRefineActivate) (*MsgStructRefineActivateResponse, error)
	StructRefineDeactivate(context.Context, *MsgStructRefineDeactivate) (*MsgStructRefineDeactivateResponse, error)
	StructRefine(context.Context, *MsgStructRefine) (*MsgStructRefineResponse, error)
	StructInfuse(context.Context, *MsgStructInfuse) (*MsgStructInfuseResponse, error)
	SubstationCreate(context.Context, *MsgSubstationCreate) (*MsgSubstationCreateResponse, error)
	SubstationDelete(context.Context, *MsgSubstationDelete) (*MsgSubstationDeleteResponse, error)
	SubstationAllocationConnect(context.Context, *MsgSubstationAllocationConnect) (*MsgSubstationAllocationConnectResponse, error)
	SubstationAllocationDisconnect(context.Context, *MsgSubstationAllocationDisconnect) (*MsgSubstationAllocationDisconnectResponse, error)
	SubstationPlayerConnect(context.Context, *MsgSubstationPlayerConnect) (*MsgSubstationPlayerConnectResponse, error)
	SubstationPlayerDisconnect(context.Context, *MsgSubstationPlayerDisconnect) (*MsgSubstationPlayerDisconnectResponse, error)
	SubstationPlayerMigrate(context.Context, *MsgSubstationPlayerMigrate) (*MsgSubstationPlayerMigrateResponse, error)
	// To Remove after battle mechanics added
	Sabotage(context.Context, *MsgSabotage) (*MsgSabotageResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddressRegister(context.Context, *MsgAddressRegister) (*MsgAddressRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressRegister not implemented")
}
func (UnimplementedMsgServer) AddressApproveRegister(context.Context, *MsgAddressApproveRegister) (*MsgAddressRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressApproveRegister not implemented")
}
func (UnimplementedMsgServer) AddressRevoke(context.Context, *MsgAddressRevoke) (*MsgAddressRevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressRevoke not implemented")
}
func (UnimplementedMsgServer) AllocationCreate(context.Context, *MsgAllocationCreate) (*MsgAllocationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationCreate not implemented")
}
func (UnimplementedMsgServer) GuildCreate(context.Context, *MsgGuildCreate) (*MsgGuildCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildCreate not implemented")
}
func (UnimplementedMsgServer) GuildUpdateOwnerId(context.Context, *MsgGuildUpdateOwnerId) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateOwnerId not implemented")
}
func (UnimplementedMsgServer) GuildUpdateEntrySubstationId(context.Context, *MsgGuildUpdateEntrySubstationId) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateEntrySubstationId not implemented")
}
func (UnimplementedMsgServer) GuildUpdateEndpoint(context.Context, *MsgGuildUpdateEndpoint) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateEndpoint not implemented")
}
func (UnimplementedMsgServer) GuildUpdateJoinInfusionMinimum(context.Context, *MsgGuildUpdateJoinInfusionMinimum) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateJoinInfusionMinimum not implemented")
}
func (UnimplementedMsgServer) GuildUpdateJoinInfusionMinimumBypassByInvite(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByInvite) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateJoinInfusionMinimumBypassByInvite not implemented")
}
func (UnimplementedMsgServer) GuildUpdateJoinInfusionMinimumBypassByRequest(context.Context, *MsgGuildUpdateJoinInfusionMinimumBypassByRequest) (*MsgGuildUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdateJoinInfusionMinimumBypassByRequest not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInvite(context.Context, *MsgGuildMembershipInvite) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInvite not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInviteApprove(context.Context, *MsgGuildMembershipInviteApprove) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInviteApprove not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInviteDeny(context.Context, *MsgGuildMembershipInviteDeny) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInviteDeny not implemented")
}
func (UnimplementedMsgServer) GuildMembershipInviteRevoke(context.Context, *MsgGuildMembershipInviteRevoke) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipInviteRevoke not implemented")
}
func (UnimplementedMsgServer) GuildMembershipJoin(context.Context, *MsgGuildMembershipJoin) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipJoin not implemented")
}
func (UnimplementedMsgServer) GuildMembershipJoinProxy(context.Context, *MsgGuildMembershipJoinProxy) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipJoinProxy not implemented")
}
func (UnimplementedMsgServer) GuildMembershipKick(context.Context, *MsgGuildMembershipKick) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipKick not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequest(context.Context, *MsgGuildMembershipRequest) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequest not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequestApprove(context.Context, *MsgGuildMembershipRequestApprove) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequestApprove not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequestDeny(context.Context, *MsgGuildMembershipRequestDeny) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequestDeny not implemented")
}
func (UnimplementedMsgServer) GuildMembershipRequestRevoke(context.Context, *MsgGuildMembershipRequestRevoke) (*MsgGuildMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipRequestRevoke not implemented")
}
func (UnimplementedMsgServer) PermissionGrantOnAddress(context.Context, *MsgPermissionGrantOnAddress) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionGrantOnAddress not implemented")
}
func (UnimplementedMsgServer) PermissionGrantOnObject(context.Context, *MsgPermissionGrantOnObject) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionGrantOnObject not implemented")
}
func (UnimplementedMsgServer) PermissionRevokeOnAddress(context.Context, *MsgPermissionRevokeOnAddress) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionRevokeOnAddress not implemented")
}
func (UnimplementedMsgServer) PermissionRevokeOnObject(context.Context, *MsgPermissionRevokeOnObject) (*MsgPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionRevokeOnObject not implemented")
}
func (UnimplementedMsgServer) PlanetExplore(context.Context, *MsgPlanetExplore) (*MsgPlanetExploreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetExplore not implemented")
}
func (UnimplementedMsgServer) PlayerUpdatePrimaryAddress(context.Context, *MsgPlayerUpdatePrimaryAddress) (*MsgPlayerUpdatePrimaryAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerUpdatePrimaryAddress not implemented")
}
func (UnimplementedMsgServer) StructActivate(context.Context, *MsgStructActivate) (*MsgStructActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructActivate not implemented")
}
func (UnimplementedMsgServer) StructBuildInitiate(context.Context, *MsgStructBuildInitiate) (*MsgStructBuildInitiateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBuildInitiate not implemented")
}
func (UnimplementedMsgServer) StructBuildComplete(context.Context, *MsgStructBuildComplete) (*MsgStructBuildCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBuildComplete not implemented")
}
func (UnimplementedMsgServer) StructMineActivate(context.Context, *MsgStructMineActivate) (*MsgStructMineActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructMineActivate not implemented")
}
func (UnimplementedMsgServer) StructMineDeactivate(context.Context, *MsgStructMineDeactivate) (*MsgStructMineDeactivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructMineDeactivate not implemented")
}
func (UnimplementedMsgServer) StructMine(context.Context, *MsgStructMine) (*MsgStructMineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructMine not implemented")
}
func (UnimplementedMsgServer) StructRefineActivate(context.Context, *MsgStructRefineActivate) (*MsgStructRefineActivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructRefineActivate not implemented")
}
func (UnimplementedMsgServer) StructRefineDeactivate(context.Context, *MsgStructRefineDeactivate) (*MsgStructRefineDeactivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructRefineDeactivate not implemented")
}
func (UnimplementedMsgServer) StructRefine(context.Context, *MsgStructRefine) (*MsgStructRefineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructRefine not implemented")
}
func (UnimplementedMsgServer) StructInfuse(context.Context, *MsgStructInfuse) (*MsgStructInfuseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructInfuse not implemented")
}
func (UnimplementedMsgServer) SubstationCreate(context.Context, *MsgSubstationCreate) (*MsgSubstationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationCreate not implemented")
}
func (UnimplementedMsgServer) SubstationDelete(context.Context, *MsgSubstationDelete) (*MsgSubstationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationDelete not implemented")
}
func (UnimplementedMsgServer) SubstationAllocationConnect(context.Context, *MsgSubstationAllocationConnect) (*MsgSubstationAllocationConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationAllocationConnect not implemented")
}
func (UnimplementedMsgServer) SubstationAllocationDisconnect(context.Context, *MsgSubstationAllocationDisconnect) (*MsgSubstationAllocationDisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationAllocationDisconnect not implemented")
}
func (UnimplementedMsgServer) SubstationPlayerConnect(context.Context, *MsgSubstationPlayerConnect) (*MsgSubstationPlayerConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationPlayerConnect not implemented")
}
func (UnimplementedMsgServer) SubstationPlayerDisconnect(context.Context, *MsgSubstationPlayerDisconnect) (*MsgSubstationPlayerDisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationPlayerDisconnect not implemented")
}
func (UnimplementedMsgServer) SubstationPlayerMigrate(context.Context, *MsgSubstationPlayerMigrate) (*MsgSubstationPlayerMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationPlayerMigrate not implemented")
}
func (UnimplementedMsgServer) Sabotage(context.Context, *MsgSabotage) (*MsgSabotageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sabotage not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddressRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddressRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddressRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddressRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddressRegister(ctx, req.(*MsgAddressRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddressApproveRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddressApproveRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddressApproveRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddressApproveRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddressApproveRegister(ctx, req.(*MsgAddressApproveRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddressRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddressRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddressRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddressRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddressRevoke(ctx, req.(*MsgAddressRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllocationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllocationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllocationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AllocationCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllocationCreate(ctx, req.(*MsgAllocationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildCreate(ctx, req.(*MsgGuildCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateOwnerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateOwnerId(ctx, req.(*MsgGuildUpdateOwnerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateEntrySubstationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateEntrySubstationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateEntrySubstationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateEntrySubstationId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateEntrySubstationId(ctx, req.(*MsgGuildUpdateEntrySubstationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateEndpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateEndpoint(ctx, req.(*MsgGuildUpdateEndpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateJoinInfusionMinimum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateJoinInfusionMinimum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateJoinInfusionMinimum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimum(ctx, req.(*MsgGuildUpdateJoinInfusionMinimum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateJoinInfusionMinimumBypassByInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByInvite(ctx, req.(*MsgGuildUpdateJoinInfusionMinimumBypassByInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildUpdateJoinInfusionMinimumBypassByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildUpdateJoinInfusionMinimumBypassByRequest(ctx, req.(*MsgGuildUpdateJoinInfusionMinimumBypassByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInvite(ctx, req.(*MsgGuildMembershipInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInviteApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInviteApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInviteApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInviteApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInviteApprove(ctx, req.(*MsgGuildMembershipInviteApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInviteDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInviteDeny)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInviteDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInviteDeny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInviteDeny(ctx, req.(*MsgGuildMembershipInviteDeny))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipInviteRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipInviteRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipInviteRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipInviteRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipInviteRevoke(ctx, req.(*MsgGuildMembershipInviteRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipJoin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipJoin(ctx, req.(*MsgGuildMembershipJoin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipJoinProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipJoinProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipJoinProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipJoinProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipJoinProxy(ctx, req.(*MsgGuildMembershipJoinProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipKick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipKick(ctx, req.(*MsgGuildMembershipKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequest(ctx, req.(*MsgGuildMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequestApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequestApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequestApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequestApprove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequestApprove(ctx, req.(*MsgGuildMembershipRequestApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequestDeny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequestDeny)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequestDeny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequestDeny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequestDeny(ctx, req.(*MsgGuildMembershipRequestDeny))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GuildMembershipRequestRevoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGuildMembershipRequestRevoke)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GuildMembershipRequestRevoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_GuildMembershipRequestRevoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GuildMembershipRequestRevoke(ctx, req.(*MsgGuildMembershipRequestRevoke))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionGrantOnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionGrantOnAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionGrantOnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionGrantOnAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionGrantOnAddress(ctx, req.(*MsgPermissionGrantOnAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionGrantOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionGrantOnObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionGrantOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionGrantOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionGrantOnObject(ctx, req.(*MsgPermissionGrantOnObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionRevokeOnAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionRevokeOnAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionRevokeOnAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionRevokeOnAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionRevokeOnAddress(ctx, req.(*MsgPermissionRevokeOnAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PermissionRevokeOnObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPermissionRevokeOnObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PermissionRevokeOnObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PermissionRevokeOnObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PermissionRevokeOnObject(ctx, req.(*MsgPermissionRevokeOnObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlanetExplore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlanetExplore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlanetExplore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PlanetExplore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlanetExplore(ctx, req.(*MsgPlanetExplore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlayerUpdatePrimaryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlayerUpdatePrimaryAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlayerUpdatePrimaryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PlayerUpdatePrimaryAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlayerUpdatePrimaryAddress(ctx, req.(*MsgPlayerUpdatePrimaryAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructActivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructActivate(ctx, req.(*MsgStructActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructBuildInitiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructBuildInitiate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructBuildInitiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructBuildInitiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructBuildInitiate(ctx, req.(*MsgStructBuildInitiate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructBuildComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructBuildComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructBuildComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructBuildComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructBuildComplete(ctx, req.(*MsgStructBuildComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructMineActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructMineActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructMineActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructMineActivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructMineActivate(ctx, req.(*MsgStructMineActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructMineDeactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructMineDeactivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructMineDeactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructMineDeactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructMineDeactivate(ctx, req.(*MsgStructMineDeactivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructMine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructMine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructMine(ctx, req.(*MsgStructMine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructRefineActivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructRefineActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructRefineActivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructRefineActivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructRefineActivate(ctx, req.(*MsgStructRefineActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructRefineDeactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructRefineDeactivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructRefineDeactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructRefineDeactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructRefineDeactivate(ctx, req.(*MsgStructRefineDeactivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructRefine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructRefine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructRefine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructRefine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructRefine(ctx, req.(*MsgStructRefine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StructInfuse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStructInfuse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StructInfuse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_StructInfuse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StructInfuse(ctx, req.(*MsgStructInfuse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationCreate(ctx, req.(*MsgSubstationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationDelete(ctx, req.(*MsgSubstationDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationAllocationConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationAllocationConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationAllocationConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationAllocationConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationAllocationConnect(ctx, req.(*MsgSubstationAllocationConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationAllocationDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationAllocationDisconnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationAllocationDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationAllocationDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationAllocationDisconnect(ctx, req.(*MsgSubstationAllocationDisconnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationPlayerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationPlayerConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationPlayerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationPlayerConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationPlayerConnect(ctx, req.(*MsgSubstationPlayerConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationPlayerDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationPlayerDisconnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationPlayerDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationPlayerDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationPlayerDisconnect(ctx, req.(*MsgSubstationPlayerDisconnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubstationPlayerMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubstationPlayerMigrate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubstationPlayerMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SubstationPlayerMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubstationPlayerMigrate(ctx, req.(*MsgSubstationPlayerMigrate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Sabotage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSabotage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Sabotage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Sabotage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Sabotage(ctx, req.(*MsgSabotage))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structs.structs.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddressRegister",
			Handler:    _Msg_AddressRegister_Handler,
		},
		{
			MethodName: "AddressApproveRegister",
			Handler:    _Msg_AddressApproveRegister_Handler,
		},
		{
			MethodName: "AddressRevoke",
			Handler:    _Msg_AddressRevoke_Handler,
		},
		{
			MethodName: "AllocationCreate",
			Handler:    _Msg_AllocationCreate_Handler,
		},
		{
			MethodName: "GuildCreate",
			Handler:    _Msg_GuildCreate_Handler,
		},
		{
			MethodName: "GuildUpdateOwnerId",
			Handler:    _Msg_GuildUpdateOwnerId_Handler,
		},
		{
			MethodName: "GuildUpdateEntrySubstationId",
			Handler:    _Msg_GuildUpdateEntrySubstationId_Handler,
		},
		{
			MethodName: "GuildUpdateEndpoint",
			Handler:    _Msg_GuildUpdateEndpoint_Handler,
		},
		{
			MethodName: "GuildUpdateJoinInfusionMinimum",
			Handler:    _Msg_GuildUpdateJoinInfusionMinimum_Handler,
		},
		{
			MethodName: "GuildUpdateJoinInfusionMinimumBypassByInvite",
			Handler:    _Msg_GuildUpdateJoinInfusionMinimumBypassByInvite_Handler,
		},
		{
			MethodName: "GuildUpdateJoinInfusionMinimumBypassByRequest",
			Handler:    _Msg_GuildUpdateJoinInfusionMinimumBypassByRequest_Handler,
		},
		{
			MethodName: "GuildMembershipInvite",
			Handler:    _Msg_GuildMembershipInvite_Handler,
		},
		{
			MethodName: "GuildMembershipInviteApprove",
			Handler:    _Msg_GuildMembershipInviteApprove_Handler,
		},
		{
			MethodName: "GuildMembershipInviteDeny",
			Handler:    _Msg_GuildMembershipInviteDeny_Handler,
		},
		{
			MethodName: "GuildMembershipInviteRevoke",
			Handler:    _Msg_GuildMembershipInviteRevoke_Handler,
		},
		{
			MethodName: "GuildMembershipJoin",
			Handler:    _Msg_GuildMembershipJoin_Handler,
		},
		{
			MethodName: "GuildMembershipJoinProxy",
			Handler:    _Msg_GuildMembershipJoinProxy_Handler,
		},
		{
			MethodName: "GuildMembershipKick",
			Handler:    _Msg_GuildMembershipKick_Handler,
		},
		{
			MethodName: "GuildMembershipRequest",
			Handler:    _Msg_GuildMembershipRequest_Handler,
		},
		{
			MethodName: "GuildMembershipRequestApprove",
			Handler:    _Msg_GuildMembershipRequestApprove_Handler,
		},
		{
			MethodName: "GuildMembershipRequestDeny",
			Handler:    _Msg_GuildMembershipRequestDeny_Handler,
		},
		{
			MethodName: "GuildMembershipRequestRevoke",
			Handler:    _Msg_GuildMembershipRequestRevoke_Handler,
		},
		{
			MethodName: "PermissionGrantOnAddress",
			Handler:    _Msg_PermissionGrantOnAddress_Handler,
		},
		{
			MethodName: "PermissionGrantOnObject",
			Handler:    _Msg_PermissionGrantOnObject_Handler,
		},
		{
			MethodName: "PermissionRevokeOnAddress",
			Handler:    _Msg_PermissionRevokeOnAddress_Handler,
		},
		{
			MethodName: "PermissionRevokeOnObject",
			Handler:    _Msg_PermissionRevokeOnObject_Handler,
		},
		{
			MethodName: "PlanetExplore",
			Handler:    _Msg_PlanetExplore_Handler,
		},
		{
			MethodName: "PlayerUpdatePrimaryAddress",
			Handler:    _Msg_PlayerUpdatePrimaryAddress_Handler,
		},
		{
			MethodName: "StructActivate",
			Handler:    _Msg_StructActivate_Handler,
		},
		{
			MethodName: "StructBuildInitiate",
			Handler:    _Msg_StructBuildInitiate_Handler,
		},
		{
			MethodName: "StructBuildComplete",
			Handler:    _Msg_StructBuildComplete_Handler,
		},
		{
			MethodName: "StructMineActivate",
			Handler:    _Msg_StructMineActivate_Handler,
		},
		{
			MethodName: "StructMineDeactivate",
			Handler:    _Msg_StructMineDeactivate_Handler,
		},
		{
			MethodName: "StructMine",
			Handler:    _Msg_StructMine_Handler,
		},
		{
			MethodName: "StructRefineActivate",
			Handler:    _Msg_StructRefineActivate_Handler,
		},
		{
			MethodName: "StructRefineDeactivate",
			Handler:    _Msg_StructRefineDeactivate_Handler,
		},
		{
			MethodName: "StructRefine",
			Handler:    _Msg_StructRefine_Handler,
		},
		{
			MethodName: "StructInfuse",
			Handler:    _Msg_StructInfuse_Handler,
		},
		{
			MethodName: "SubstationCreate",
			Handler:    _Msg_SubstationCreate_Handler,
		},
		{
			MethodName: "SubstationDelete",
			Handler:    _Msg_SubstationDelete_Handler,
		},
		{
			MethodName: "SubstationAllocationConnect",
			Handler:    _Msg_SubstationAllocationConnect_Handler,
		},
		{
			MethodName: "SubstationAllocationDisconnect",
			Handler:    _Msg_SubstationAllocationDisconnect_Handler,
		},
		{
			MethodName: "SubstationPlayerConnect",
			Handler:    _Msg_SubstationPlayerConnect_Handler,
		},
		{
			MethodName: "SubstationPlayerDisconnect",
			Handler:    _Msg_SubstationPlayerDisconnect_Handler,
		},
		{
			MethodName: "SubstationPlayerMigrate",
			Handler:    _Msg_SubstationPlayerMigrate_Handler,
		},
		{
			MethodName: "Sabotage",
			Handler:    _Msg_Sabotage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structs/structs/tx.proto",
}
