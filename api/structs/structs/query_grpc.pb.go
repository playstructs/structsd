// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: structs/structs/query.proto

package structs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_GetBlockHeight_FullMethodName                = "/structs.structs.Query/GetBlockHeight"
	Query_Params_FullMethodName                        = "/structs.structs.Query/Params"
	Query_Address_FullMethodName                       = "/structs.structs.Query/Address"
	Query_AddressAll_FullMethodName                    = "/structs.structs.Query/AddressAll"
	Query_AddressAllByPlayer_FullMethodName            = "/structs.structs.Query/AddressAllByPlayer"
	Query_Allocation_FullMethodName                    = "/structs.structs.Query/Allocation"
	Query_AllocationAll_FullMethodName                 = "/structs.structs.Query/AllocationAll"
	Query_Grid_FullMethodName                          = "/structs.structs.Query/Grid"
	Query_GridAll_FullMethodName                       = "/structs.structs.Query/GridAll"
	Query_Guild_FullMethodName                         = "/structs.structs.Query/Guild"
	Query_GuildAll_FullMethodName                      = "/structs.structs.Query/GuildAll"
	Query_GuildMembershipApplication_FullMethodName    = "/structs.structs.Query/GuildMembershipApplication"
	Query_GuildMembershipApplicationAll_FullMethodName = "/structs.structs.Query/GuildMembershipApplicationAll"
	Query_Infusion_FullMethodName                      = "/structs.structs.Query/Infusion"
	Query_InfusionAll_FullMethodName                   = "/structs.structs.Query/InfusionAll"
	Query_Permission_FullMethodName                    = "/structs.structs.Query/Permission"
	Query_PermissionByObject_FullMethodName            = "/structs.structs.Query/PermissionByObject"
	Query_PermissionByPlayer_FullMethodName            = "/structs.structs.Query/PermissionByPlayer"
	Query_PermissionAll_FullMethodName                 = "/structs.structs.Query/PermissionAll"
	Query_Player_FullMethodName                        = "/structs.structs.Query/Player"
	Query_PlayerAll_FullMethodName                     = "/structs.structs.Query/PlayerAll"
	Query_Planet_FullMethodName                        = "/structs.structs.Query/Planet"
	Query_PlanetAll_FullMethodName                     = "/structs.structs.Query/PlanetAll"
	Query_PlanetAllByPlayer_FullMethodName             = "/structs.structs.Query/PlanetAllByPlayer"
	Query_Reactor_FullMethodName                       = "/structs.structs.Query/Reactor"
	Query_ReactorAll_FullMethodName                    = "/structs.structs.Query/ReactorAll"
	Query_Struct_FullMethodName                        = "/structs.structs.Query/Struct"
	Query_StructAll_FullMethodName                     = "/structs.structs.Query/StructAll"
	Query_Substation_FullMethodName                    = "/structs.structs.Query/Substation"
	Query_SubstationAll_FullMethodName                 = "/structs.structs.Query/SubstationAll"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	GetBlockHeight(ctx context.Context, in *QueryBlockHeight, opts ...grpc.CallOption) (*QueryBlockHeightResponse, error)
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries for Addresses.
	Address(ctx context.Context, in *QueryGetAddressRequest, opts ...grpc.CallOption) (*QueryAddressResponse, error)
	AddressAll(ctx context.Context, in *QueryAllAddressRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error)
	AddressAllByPlayer(ctx context.Context, in *QueryAllAddressByPlayerRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error)
	// Queries a list of Allocation items.
	Allocation(ctx context.Context, in *QueryGetAllocationRequest, opts ...grpc.CallOption) (*QueryGetAllocationResponse, error)
	AllocationAll(ctx context.Context, in *QueryAllAllocationRequest, opts ...grpc.CallOption) (*QueryAllAllocationResponse, error)
	// Queries a specific Grid details
	Grid(ctx context.Context, in *QueryGetGridRequest, opts ...grpc.CallOption) (*QueryGetGridResponse, error)
	// Queries a list of all Grid details
	GridAll(ctx context.Context, in *QueryAllGridRequest, opts ...grpc.CallOption) (*QueryAllGridResponse, error)
	// Queries a list of Guild items.
	Guild(ctx context.Context, in *QueryGetGuildRequest, opts ...grpc.CallOption) (*QueryGetGuildResponse, error)
	GuildAll(ctx context.Context, in *QueryAllGuildRequest, opts ...grpc.CallOption) (*QueryAllGuildResponse, error)
	GuildMembershipApplication(ctx context.Context, in *QueryGetGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryGetGuildMembershipApplicationResponse, error)
	GuildMembershipApplicationAll(ctx context.Context, in *QueryAllGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryAllGuildMembershipApplicationResponse, error)
	// Queries a list of Infusions.
	Infusion(ctx context.Context, in *QueryGetInfusionRequest, opts ...grpc.CallOption) (*QueryGetInfusionResponse, error)
	InfusionAll(ctx context.Context, in *QueryAllInfusionRequest, opts ...grpc.CallOption) (*QueryAllInfusionResponse, error)
	// Queries a specific Permission
	Permission(ctx context.Context, in *QueryGetPermissionRequest, opts ...grpc.CallOption) (*QueryGetPermissionResponse, error)
	// Queries a list of Permissions based on Object
	PermissionByObject(ctx context.Context, in *QueryAllPermissionByObjectRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a list of Permissions based on the Player with the permissions
	PermissionByPlayer(ctx context.Context, in *QueryAllPermissionByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a list of all Permissions
	PermissionAll(ctx context.Context, in *QueryAllPermissionRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error)
	// Queries a list of Player items.
	Player(ctx context.Context, in *QueryGetPlayerRequest, opts ...grpc.CallOption) (*QueryGetPlayerResponse, error)
	PlayerAll(ctx context.Context, in *QueryAllPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlayerResponse, error)
	// Queries a list of Planet items.
	Planet(ctx context.Context, in *QueryGetPlanetRequest, opts ...grpc.CallOption) (*QueryGetPlanetResponse, error)
	PlanetAll(ctx context.Context, in *QueryAllPlanetRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error)
	PlanetAllByPlayer(ctx context.Context, in *QueryAllPlanetByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error)
	// Queries a list of Reactor items.
	Reactor(ctx context.Context, in *QueryGetReactorRequest, opts ...grpc.CallOption) (*QueryGetReactorResponse, error)
	ReactorAll(ctx context.Context, in *QueryAllReactorRequest, opts ...grpc.CallOption) (*QueryAllReactorResponse, error)
	// Queries a list of Structs items.
	Struct(ctx context.Context, in *QueryGetStructRequest, opts ...grpc.CallOption) (*QueryGetStructResponse, error)
	StructAll(ctx context.Context, in *QueryAllStructRequest, opts ...grpc.CallOption) (*QueryAllStructResponse, error)
	// Queries a list of Substation items.
	Substation(ctx context.Context, in *QueryGetSubstationRequest, opts ...grpc.CallOption) (*QueryGetSubstationResponse, error)
	SubstationAll(ctx context.Context, in *QueryAllSubstationRequest, opts ...grpc.CallOption) (*QueryAllSubstationResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetBlockHeight(ctx context.Context, in *QueryBlockHeight, opts ...grpc.CallOption) (*QueryBlockHeightResponse, error) {
	out := new(QueryBlockHeightResponse)
	err := c.cc.Invoke(ctx, Query_GetBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Address(ctx context.Context, in *QueryGetAddressRequest, opts ...grpc.CallOption) (*QueryAddressResponse, error) {
	out := new(QueryAddressResponse)
	err := c.cc.Invoke(ctx, Query_Address_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressAll(ctx context.Context, in *QueryAllAddressRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error) {
	out := new(QueryAllAddressResponse)
	err := c.cc.Invoke(ctx, Query_AddressAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressAllByPlayer(ctx context.Context, in *QueryAllAddressByPlayerRequest, opts ...grpc.CallOption) (*QueryAllAddressResponse, error) {
	out := new(QueryAllAddressResponse)
	err := c.cc.Invoke(ctx, Query_AddressAllByPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Allocation(ctx context.Context, in *QueryGetAllocationRequest, opts ...grpc.CallOption) (*QueryGetAllocationResponse, error) {
	out := new(QueryGetAllocationResponse)
	err := c.cc.Invoke(ctx, Query_Allocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllocationAll(ctx context.Context, in *QueryAllAllocationRequest, opts ...grpc.CallOption) (*QueryAllAllocationResponse, error) {
	out := new(QueryAllAllocationResponse)
	err := c.cc.Invoke(ctx, Query_AllocationAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Grid(ctx context.Context, in *QueryGetGridRequest, opts ...grpc.CallOption) (*QueryGetGridResponse, error) {
	out := new(QueryGetGridResponse)
	err := c.cc.Invoke(ctx, Query_Grid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GridAll(ctx context.Context, in *QueryAllGridRequest, opts ...grpc.CallOption) (*QueryAllGridResponse, error) {
	out := new(QueryAllGridResponse)
	err := c.cc.Invoke(ctx, Query_GridAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Guild(ctx context.Context, in *QueryGetGuildRequest, opts ...grpc.CallOption) (*QueryGetGuildResponse, error) {
	out := new(QueryGetGuildResponse)
	err := c.cc.Invoke(ctx, Query_Guild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuildAll(ctx context.Context, in *QueryAllGuildRequest, opts ...grpc.CallOption) (*QueryAllGuildResponse, error) {
	out := new(QueryAllGuildResponse)
	err := c.cc.Invoke(ctx, Query_GuildAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuildMembershipApplication(ctx context.Context, in *QueryGetGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryGetGuildMembershipApplicationResponse, error) {
	out := new(QueryGetGuildMembershipApplicationResponse)
	err := c.cc.Invoke(ctx, Query_GuildMembershipApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GuildMembershipApplicationAll(ctx context.Context, in *QueryAllGuildMembershipApplicationRequest, opts ...grpc.CallOption) (*QueryAllGuildMembershipApplicationResponse, error) {
	out := new(QueryAllGuildMembershipApplicationResponse)
	err := c.cc.Invoke(ctx, Query_GuildMembershipApplicationAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Infusion(ctx context.Context, in *QueryGetInfusionRequest, opts ...grpc.CallOption) (*QueryGetInfusionResponse, error) {
	out := new(QueryGetInfusionResponse)
	err := c.cc.Invoke(ctx, Query_Infusion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InfusionAll(ctx context.Context, in *QueryAllInfusionRequest, opts ...grpc.CallOption) (*QueryAllInfusionResponse, error) {
	out := new(QueryAllInfusionResponse)
	err := c.cc.Invoke(ctx, Query_InfusionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Permission(ctx context.Context, in *QueryGetPermissionRequest, opts ...grpc.CallOption) (*QueryGetPermissionResponse, error) {
	out := new(QueryGetPermissionResponse)
	err := c.cc.Invoke(ctx, Query_Permission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionByObject(ctx context.Context, in *QueryAllPermissionByObjectRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, Query_PermissionByObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionByPlayer(ctx context.Context, in *QueryAllPermissionByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, Query_PermissionByPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PermissionAll(ctx context.Context, in *QueryAllPermissionRequest, opts ...grpc.CallOption) (*QueryAllPermissionResponse, error) {
	out := new(QueryAllPermissionResponse)
	err := c.cc.Invoke(ctx, Query_PermissionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Player(ctx context.Context, in *QueryGetPlayerRequest, opts ...grpc.CallOption) (*QueryGetPlayerResponse, error) {
	out := new(QueryGetPlayerResponse)
	err := c.cc.Invoke(ctx, Query_Player_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlayerAll(ctx context.Context, in *QueryAllPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlayerResponse, error) {
	out := new(QueryAllPlayerResponse)
	err := c.cc.Invoke(ctx, Query_PlayerAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Planet(ctx context.Context, in *QueryGetPlanetRequest, opts ...grpc.CallOption) (*QueryGetPlanetResponse, error) {
	out := new(QueryGetPlanetResponse)
	err := c.cc.Invoke(ctx, Query_Planet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlanetAll(ctx context.Context, in *QueryAllPlanetRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error) {
	out := new(QueryAllPlanetResponse)
	err := c.cc.Invoke(ctx, Query_PlanetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlanetAllByPlayer(ctx context.Context, in *QueryAllPlanetByPlayerRequest, opts ...grpc.CallOption) (*QueryAllPlanetResponse, error) {
	out := new(QueryAllPlanetResponse)
	err := c.cc.Invoke(ctx, Query_PlanetAllByPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reactor(ctx context.Context, in *QueryGetReactorRequest, opts ...grpc.CallOption) (*QueryGetReactorResponse, error) {
	out := new(QueryGetReactorResponse)
	err := c.cc.Invoke(ctx, Query_Reactor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReactorAll(ctx context.Context, in *QueryAllReactorRequest, opts ...grpc.CallOption) (*QueryAllReactorResponse, error) {
	out := new(QueryAllReactorResponse)
	err := c.cc.Invoke(ctx, Query_ReactorAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Struct(ctx context.Context, in *QueryGetStructRequest, opts ...grpc.CallOption) (*QueryGetStructResponse, error) {
	out := new(QueryGetStructResponse)
	err := c.cc.Invoke(ctx, Query_Struct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructAll(ctx context.Context, in *QueryAllStructRequest, opts ...grpc.CallOption) (*QueryAllStructResponse, error) {
	out := new(QueryAllStructResponse)
	err := c.cc.Invoke(ctx, Query_StructAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Substation(ctx context.Context, in *QueryGetSubstationRequest, opts ...grpc.CallOption) (*QueryGetSubstationResponse, error) {
	out := new(QueryGetSubstationResponse)
	err := c.cc.Invoke(ctx, Query_Substation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubstationAll(ctx context.Context, in *QueryAllSubstationRequest, opts ...grpc.CallOption) (*QueryAllSubstationResponse, error) {
	out := new(QueryAllSubstationResponse)
	err := c.cc.Invoke(ctx, Query_SubstationAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	GetBlockHeight(context.Context, *QueryBlockHeight) (*QueryBlockHeightResponse, error)
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries for Addresses.
	Address(context.Context, *QueryGetAddressRequest) (*QueryAddressResponse, error)
	AddressAll(context.Context, *QueryAllAddressRequest) (*QueryAllAddressResponse, error)
	AddressAllByPlayer(context.Context, *QueryAllAddressByPlayerRequest) (*QueryAllAddressResponse, error)
	// Queries a list of Allocation items.
	Allocation(context.Context, *QueryGetAllocationRequest) (*QueryGetAllocationResponse, error)
	AllocationAll(context.Context, *QueryAllAllocationRequest) (*QueryAllAllocationResponse, error)
	// Queries a specific Grid details
	Grid(context.Context, *QueryGetGridRequest) (*QueryGetGridResponse, error)
	// Queries a list of all Grid details
	GridAll(context.Context, *QueryAllGridRequest) (*QueryAllGridResponse, error)
	// Queries a list of Guild items.
	Guild(context.Context, *QueryGetGuildRequest) (*QueryGetGuildResponse, error)
	GuildAll(context.Context, *QueryAllGuildRequest) (*QueryAllGuildResponse, error)
	GuildMembershipApplication(context.Context, *QueryGetGuildMembershipApplicationRequest) (*QueryGetGuildMembershipApplicationResponse, error)
	GuildMembershipApplicationAll(context.Context, *QueryAllGuildMembershipApplicationRequest) (*QueryAllGuildMembershipApplicationResponse, error)
	// Queries a list of Infusions.
	Infusion(context.Context, *QueryGetInfusionRequest) (*QueryGetInfusionResponse, error)
	InfusionAll(context.Context, *QueryAllInfusionRequest) (*QueryAllInfusionResponse, error)
	// Queries a specific Permission
	Permission(context.Context, *QueryGetPermissionRequest) (*QueryGetPermissionResponse, error)
	// Queries a list of Permissions based on Object
	PermissionByObject(context.Context, *QueryAllPermissionByObjectRequest) (*QueryAllPermissionResponse, error)
	// Queries a list of Permissions based on the Player with the permissions
	PermissionByPlayer(context.Context, *QueryAllPermissionByPlayerRequest) (*QueryAllPermissionResponse, error)
	// Queries a list of all Permissions
	PermissionAll(context.Context, *QueryAllPermissionRequest) (*QueryAllPermissionResponse, error)
	// Queries a list of Player items.
	Player(context.Context, *QueryGetPlayerRequest) (*QueryGetPlayerResponse, error)
	PlayerAll(context.Context, *QueryAllPlayerRequest) (*QueryAllPlayerResponse, error)
	// Queries a list of Planet items.
	Planet(context.Context, *QueryGetPlanetRequest) (*QueryGetPlanetResponse, error)
	PlanetAll(context.Context, *QueryAllPlanetRequest) (*QueryAllPlanetResponse, error)
	PlanetAllByPlayer(context.Context, *QueryAllPlanetByPlayerRequest) (*QueryAllPlanetResponse, error)
	// Queries a list of Reactor items.
	Reactor(context.Context, *QueryGetReactorRequest) (*QueryGetReactorResponse, error)
	ReactorAll(context.Context, *QueryAllReactorRequest) (*QueryAllReactorResponse, error)
	// Queries a list of Structs items.
	Struct(context.Context, *QueryGetStructRequest) (*QueryGetStructResponse, error)
	StructAll(context.Context, *QueryAllStructRequest) (*QueryAllStructResponse, error)
	// Queries a list of Substation items.
	Substation(context.Context, *QueryGetSubstationRequest) (*QueryGetSubstationResponse, error)
	SubstationAll(context.Context, *QueryAllSubstationRequest) (*QueryAllSubstationResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetBlockHeight(context.Context, *QueryBlockHeight) (*QueryBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeight not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Address(context.Context, *QueryGetAddressRequest) (*QueryAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (UnimplementedQueryServer) AddressAll(context.Context, *QueryAllAddressRequest) (*QueryAllAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressAll not implemented")
}
func (UnimplementedQueryServer) AddressAllByPlayer(context.Context, *QueryAllAddressByPlayerRequest) (*QueryAllAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressAllByPlayer not implemented")
}
func (UnimplementedQueryServer) Allocation(context.Context, *QueryGetAllocationRequest) (*QueryGetAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocation not implemented")
}
func (UnimplementedQueryServer) AllocationAll(context.Context, *QueryAllAllocationRequest) (*QueryAllAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationAll not implemented")
}
func (UnimplementedQueryServer) Grid(context.Context, *QueryGetGridRequest) (*QueryGetGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grid not implemented")
}
func (UnimplementedQueryServer) GridAll(context.Context, *QueryAllGridRequest) (*QueryAllGridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GridAll not implemented")
}
func (UnimplementedQueryServer) Guild(context.Context, *QueryGetGuildRequest) (*QueryGetGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guild not implemented")
}
func (UnimplementedQueryServer) GuildAll(context.Context, *QueryAllGuildRequest) (*QueryAllGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildAll not implemented")
}
func (UnimplementedQueryServer) GuildMembershipApplication(context.Context, *QueryGetGuildMembershipApplicationRequest) (*QueryGetGuildMembershipApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipApplication not implemented")
}
func (UnimplementedQueryServer) GuildMembershipApplicationAll(context.Context, *QueryAllGuildMembershipApplicationRequest) (*QueryAllGuildMembershipApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMembershipApplicationAll not implemented")
}
func (UnimplementedQueryServer) Infusion(context.Context, *QueryGetInfusionRequest) (*QueryGetInfusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Infusion not implemented")
}
func (UnimplementedQueryServer) InfusionAll(context.Context, *QueryAllInfusionRequest) (*QueryAllInfusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfusionAll not implemented")
}
func (UnimplementedQueryServer) Permission(context.Context, *QueryGetPermissionRequest) (*QueryGetPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permission not implemented")
}
func (UnimplementedQueryServer) PermissionByObject(context.Context, *QueryAllPermissionByObjectRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionByObject not implemented")
}
func (UnimplementedQueryServer) PermissionByPlayer(context.Context, *QueryAllPermissionByPlayerRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionByPlayer not implemented")
}
func (UnimplementedQueryServer) PermissionAll(context.Context, *QueryAllPermissionRequest) (*QueryAllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionAll not implemented")
}
func (UnimplementedQueryServer) Player(context.Context, *QueryGetPlayerRequest) (*QueryGetPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Player not implemented")
}
func (UnimplementedQueryServer) PlayerAll(context.Context, *QueryAllPlayerRequest) (*QueryAllPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerAll not implemented")
}
func (UnimplementedQueryServer) Planet(context.Context, *QueryGetPlanetRequest) (*QueryGetPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Planet not implemented")
}
func (UnimplementedQueryServer) PlanetAll(context.Context, *QueryAllPlanetRequest) (*QueryAllPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetAll not implemented")
}
func (UnimplementedQueryServer) PlanetAllByPlayer(context.Context, *QueryAllPlanetByPlayerRequest) (*QueryAllPlanetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlanetAllByPlayer not implemented")
}
func (UnimplementedQueryServer) Reactor(context.Context, *QueryGetReactorRequest) (*QueryGetReactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reactor not implemented")
}
func (UnimplementedQueryServer) ReactorAll(context.Context, *QueryAllReactorRequest) (*QueryAllReactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactorAll not implemented")
}
func (UnimplementedQueryServer) Struct(context.Context, *QueryGetStructRequest) (*QueryGetStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Struct not implemented")
}
func (UnimplementedQueryServer) StructAll(context.Context, *QueryAllStructRequest) (*QueryAllStructResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructAll not implemented")
}
func (UnimplementedQueryServer) Substation(context.Context, *QueryGetSubstationRequest) (*QueryGetSubstationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Substation not implemented")
}
func (UnimplementedQueryServer) SubstationAll(context.Context, *QueryAllSubstationRequest) (*QueryAllSubstationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubstationAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBlockHeight(ctx, req.(*QueryBlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Address_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Address(ctx, req.(*QueryGetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AddressAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressAll(ctx, req.(*QueryAllAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressAllByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAddressByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressAllByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AddressAllByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressAllByPlayer(ctx, req.(*QueryAllAddressByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Allocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Allocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Allocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Allocation(ctx, req.(*QueryGetAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllocationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllocationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllocationAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllocationAll(ctx, req.(*QueryAllAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Grid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Grid(ctx, req.(*QueryGetGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GridAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GridAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GridAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GridAll(ctx, req.(*QueryAllGridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Guild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Guild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Guild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Guild(ctx, req.(*QueryGetGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuildAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuildAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GuildAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuildAll(ctx, req.(*QueryAllGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuildMembershipApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGuildMembershipApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuildMembershipApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GuildMembershipApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuildMembershipApplication(ctx, req.(*QueryGetGuildMembershipApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GuildMembershipApplicationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGuildMembershipApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GuildMembershipApplicationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GuildMembershipApplicationAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GuildMembershipApplicationAll(ctx, req.(*QueryAllGuildMembershipApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Infusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInfusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Infusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Infusion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Infusion(ctx, req.(*QueryGetInfusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InfusionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInfusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InfusionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InfusionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InfusionAll(ctx, req.(*QueryAllInfusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Permission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Permission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Permission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Permission(ctx, req.(*QueryGetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionByObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionByObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionByObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PermissionByObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionByObject(ctx, req.(*QueryAllPermissionByObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PermissionByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionByPlayer(ctx, req.(*QueryAllPermissionByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PermissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PermissionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionAll(ctx, req.(*QueryAllPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Player_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Player(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Player_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Player(ctx, req.(*QueryGetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlayerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlayerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PlayerAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlayerAll(ctx, req.(*QueryAllPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Planet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Planet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Planet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Planet(ctx, req.(*QueryGetPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlanetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlanetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PlanetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlanetAll(ctx, req.(*QueryAllPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlanetAllByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlanetByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlanetAllByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PlanetAllByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlanetAllByPlayer(ctx, req.(*QueryAllPlanetByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Reactor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reactor(ctx, req.(*QueryGetReactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReactorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReactorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ReactorAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReactorAll(ctx, req.(*QueryAllReactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Struct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Struct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Struct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Struct(ctx, req.(*QueryGetStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStructRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StructAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructAll(ctx, req.(*QueryAllStructRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Substation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubstationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Substation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Substation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Substation(ctx, req.(*QueryGetSubstationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubstationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSubstationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubstationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubstationAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubstationAll(ctx, req.(*QueryAllSubstationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "structs.structs.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockHeight",
			Handler:    _Query_GetBlockHeight_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Address",
			Handler:    _Query_Address_Handler,
		},
		{
			MethodName: "AddressAll",
			Handler:    _Query_AddressAll_Handler,
		},
		{
			MethodName: "AddressAllByPlayer",
			Handler:    _Query_AddressAllByPlayer_Handler,
		},
		{
			MethodName: "Allocation",
			Handler:    _Query_Allocation_Handler,
		},
		{
			MethodName: "AllocationAll",
			Handler:    _Query_AllocationAll_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _Query_Grid_Handler,
		},
		{
			MethodName: "GridAll",
			Handler:    _Query_GridAll_Handler,
		},
		{
			MethodName: "Guild",
			Handler:    _Query_Guild_Handler,
		},
		{
			MethodName: "GuildAll",
			Handler:    _Query_GuildAll_Handler,
		},
		{
			MethodName: "GuildMembershipApplication",
			Handler:    _Query_GuildMembershipApplication_Handler,
		},
		{
			MethodName: "GuildMembershipApplicationAll",
			Handler:    _Query_GuildMembershipApplicationAll_Handler,
		},
		{
			MethodName: "Infusion",
			Handler:    _Query_Infusion_Handler,
		},
		{
			MethodName: "InfusionAll",
			Handler:    _Query_InfusionAll_Handler,
		},
		{
			MethodName: "Permission",
			Handler:    _Query_Permission_Handler,
		},
		{
			MethodName: "PermissionByObject",
			Handler:    _Query_PermissionByObject_Handler,
		},
		{
			MethodName: "PermissionByPlayer",
			Handler:    _Query_PermissionByPlayer_Handler,
		},
		{
			MethodName: "PermissionAll",
			Handler:    _Query_PermissionAll_Handler,
		},
		{
			MethodName: "Player",
			Handler:    _Query_Player_Handler,
		},
		{
			MethodName: "PlayerAll",
			Handler:    _Query_PlayerAll_Handler,
		},
		{
			MethodName: "Planet",
			Handler:    _Query_Planet_Handler,
		},
		{
			MethodName: "PlanetAll",
			Handler:    _Query_PlanetAll_Handler,
		},
		{
			MethodName: "PlanetAllByPlayer",
			Handler:    _Query_PlanetAllByPlayer_Handler,
		},
		{
			MethodName: "Reactor",
			Handler:    _Query_Reactor_Handler,
		},
		{
			MethodName: "ReactorAll",
			Handler:    _Query_ReactorAll_Handler,
		},
		{
			MethodName: "Struct",
			Handler:    _Query_Struct_Handler,
		},
		{
			MethodName: "StructAll",
			Handler:    _Query_StructAll_Handler,
		},
		{
			MethodName: "Substation",
			Handler:    _Query_Substation_Handler,
		},
		{
			MethodName: "SubstationAll",
			Handler:    _Query_SubstationAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structs/structs/query.proto",
}
