// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package structs

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_GenesisState_3_list)(nil)

type _GenesisState_3_list struct {
	list *[]*Allocation
}

func (x *_GenesisState_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Allocation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Allocation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_3_list) AppendMutable() protoreflect.Value {
	v := new(Allocation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_3_list) NewElement() protoreflect.Value {
	v := new(Allocation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*Agreement
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Agreement)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Agreement)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(Agreement)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(Agreement)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*Infusion
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Infusion)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Infusion)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(Infusion)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(Infusion)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*Guild
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Guild)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Guild)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(Guild)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(Guild)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_8_list)(nil)

type _GenesisState_8_list struct {
	list *[]*Planet
}

func (x *_GenesisState_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Planet)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Planet)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_8_list) AppendMutable() protoreflect.Value {
	v := new(Planet)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_8_list) NewElement() protoreflect.Value {
	v := new(Planet)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_10_list)(nil)

type _GenesisState_10_list struct {
	list *[]*Player
}

func (x *_GenesisState_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Player)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Player)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_10_list) AppendMutable() protoreflect.Value {
	v := new(Player)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_10_list) NewElement() protoreflect.Value {
	v := new(Player)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_11_list)(nil)

type _GenesisState_11_list struct {
	list *[]string
}

func (x *_GenesisState_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_GenesisState_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_11_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message GenesisState at list field PlayerHalted as it is not of Message kind"))
}

func (x *_GenesisState_11_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_11_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_GenesisState_11_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_13_list)(nil)

type _GenesisState_13_list struct {
	list *[]*Provider
}

func (x *_GenesisState_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Provider)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Provider)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_13_list) AppendMutable() protoreflect.Value {
	v := new(Provider)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_13_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_13_list) NewElement() protoreflect.Value {
	v := new(Provider)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_13_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_15_list)(nil)

type _GenesisState_15_list struct {
	list *[]*Reactor
}

func (x *_GenesisState_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Reactor)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Reactor)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_15_list) AppendMutable() protoreflect.Value {
	v := new(Reactor)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_15_list) NewElement() protoreflect.Value {
	v := new(Reactor)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_15_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_17_list)(nil)

type _GenesisState_17_list struct {
	list *[]*Struct
}

func (x *_GenesisState_17_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_17_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_17_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Struct)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_17_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Struct)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_17_list) AppendMutable() protoreflect.Value {
	v := new(Struct)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_17_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_17_list) NewElement() protoreflect.Value {
	v := new(Struct)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_17_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_19_list)(nil)

type _GenesisState_19_list struct {
	list *[]*Substation
}

func (x *_GenesisState_19_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_19_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_19_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Substation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_19_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Substation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_19_list) AppendMutable() protoreflect.Value {
	v := new(Substation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_19_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_19_list) NewElement() protoreflect.Value {
	v := new(Substation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_19_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_21_list)(nil)

type _GenesisState_21_list struct {
	list *[]*PermissionRecord
}

func (x *_GenesisState_21_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_21_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_21_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PermissionRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_21_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PermissionRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_21_list) AppendMutable() protoreflect.Value {
	v := new(PermissionRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_21_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_21_list) NewElement() protoreflect.Value {
	v := new(PermissionRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_21_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_22_list)(nil)

type _GenesisState_22_list struct {
	list *[]*GridRecord
}

func (x *_GenesisState_22_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_22_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_22_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*GridRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_22_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*GridRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_22_list) AppendMutable() protoreflect.Value {
	v := new(GridRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_22_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_22_list) NewElement() protoreflect.Value {
	v := new(GridRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_22_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_23_list)(nil)

type _GenesisState_23_list struct {
	list *[]*AddressRecord
}

func (x *_GenesisState_23_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_23_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_23_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AddressRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_23_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AddressRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_23_list) AppendMutable() protoreflect.Value {
	v := new(AddressRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_23_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_23_list) NewElement() protoreflect.Value {
	v := new(AddressRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_23_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                 protoreflect.MessageDescriptor
	fd_GenesisState_params          protoreflect.FieldDescriptor
	fd_GenesisState_port_id         protoreflect.FieldDescriptor
	fd_GenesisState_allocationList  protoreflect.FieldDescriptor
	fd_GenesisState_agreementList   protoreflect.FieldDescriptor
	fd_GenesisState_infusionList    protoreflect.FieldDescriptor
	fd_GenesisState_guildList       protoreflect.FieldDescriptor
	fd_GenesisState_guildCount      protoreflect.FieldDescriptor
	fd_GenesisState_planetList      protoreflect.FieldDescriptor
	fd_GenesisState_planetCount     protoreflect.FieldDescriptor
	fd_GenesisState_playerList      protoreflect.FieldDescriptor
	fd_GenesisState_playerHalted    protoreflect.FieldDescriptor
	fd_GenesisState_playerCount     protoreflect.FieldDescriptor
	fd_GenesisState_providerList    protoreflect.FieldDescriptor
	fd_GenesisState_providerCount   protoreflect.FieldDescriptor
	fd_GenesisState_reactorList     protoreflect.FieldDescriptor
	fd_GenesisState_reactorCount    protoreflect.FieldDescriptor
	fd_GenesisState_structList      protoreflect.FieldDescriptor
	fd_GenesisState_structCount     protoreflect.FieldDescriptor
	fd_GenesisState_substationList  protoreflect.FieldDescriptor
	fd_GenesisState_substationCount protoreflect.FieldDescriptor
	fd_GenesisState_permissionList  protoreflect.FieldDescriptor
	fd_GenesisState_gridList        protoreflect.FieldDescriptor
	fd_GenesisState_addressList     protoreflect.FieldDescriptor
)

func init() {
	file_structs_structs_genesis_proto_init()
	md_GenesisState = File_structs_structs_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_port_id = md_GenesisState.Fields().ByName("port_id")
	fd_GenesisState_allocationList = md_GenesisState.Fields().ByName("allocationList")
	fd_GenesisState_agreementList = md_GenesisState.Fields().ByName("agreementList")
	fd_GenesisState_infusionList = md_GenesisState.Fields().ByName("infusionList")
	fd_GenesisState_guildList = md_GenesisState.Fields().ByName("guildList")
	fd_GenesisState_guildCount = md_GenesisState.Fields().ByName("guildCount")
	fd_GenesisState_planetList = md_GenesisState.Fields().ByName("planetList")
	fd_GenesisState_planetCount = md_GenesisState.Fields().ByName("planetCount")
	fd_GenesisState_playerList = md_GenesisState.Fields().ByName("playerList")
	fd_GenesisState_playerHalted = md_GenesisState.Fields().ByName("playerHalted")
	fd_GenesisState_playerCount = md_GenesisState.Fields().ByName("playerCount")
	fd_GenesisState_providerList = md_GenesisState.Fields().ByName("providerList")
	fd_GenesisState_providerCount = md_GenesisState.Fields().ByName("providerCount")
	fd_GenesisState_reactorList = md_GenesisState.Fields().ByName("reactorList")
	fd_GenesisState_reactorCount = md_GenesisState.Fields().ByName("reactorCount")
	fd_GenesisState_structList = md_GenesisState.Fields().ByName("structList")
	fd_GenesisState_structCount = md_GenesisState.Fields().ByName("structCount")
	fd_GenesisState_substationList = md_GenesisState.Fields().ByName("substationList")
	fd_GenesisState_substationCount = md_GenesisState.Fields().ByName("substationCount")
	fd_GenesisState_permissionList = md_GenesisState.Fields().ByName("permissionList")
	fd_GenesisState_gridList = md_GenesisState.Fields().ByName("gridList")
	fd_GenesisState_addressList = md_GenesisState.Fields().ByName("addressList")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_structs_structs_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if x.PortId != "" {
		value := protoreflect.ValueOfString(x.PortId)
		if !f(fd_GenesisState_port_id, value) {
			return
		}
	}
	if len(x.AllocationList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_3_list{list: &x.AllocationList})
		if !f(fd_GenesisState_allocationList, value) {
			return
		}
	}
	if len(x.AgreementList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.AgreementList})
		if !f(fd_GenesisState_agreementList, value) {
			return
		}
	}
	if len(x.InfusionList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.InfusionList})
		if !f(fd_GenesisState_infusionList, value) {
			return
		}
	}
	if len(x.GuildList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.GuildList})
		if !f(fd_GenesisState_guildList, value) {
			return
		}
	}
	if x.GuildCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GuildCount)
		if !f(fd_GenesisState_guildCount, value) {
			return
		}
	}
	if len(x.PlanetList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_8_list{list: &x.PlanetList})
		if !f(fd_GenesisState_planetList, value) {
			return
		}
	}
	if x.PlanetCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PlanetCount)
		if !f(fd_GenesisState_planetCount, value) {
			return
		}
	}
	if len(x.PlayerList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_10_list{list: &x.PlayerList})
		if !f(fd_GenesisState_playerList, value) {
			return
		}
	}
	if len(x.PlayerHalted) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_11_list{list: &x.PlayerHalted})
		if !f(fd_GenesisState_playerHalted, value) {
			return
		}
	}
	if x.PlayerCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PlayerCount)
		if !f(fd_GenesisState_playerCount, value) {
			return
		}
	}
	if len(x.ProviderList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_13_list{list: &x.ProviderList})
		if !f(fd_GenesisState_providerList, value) {
			return
		}
	}
	if x.ProviderCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ProviderCount)
		if !f(fd_GenesisState_providerCount, value) {
			return
		}
	}
	if len(x.ReactorList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_15_list{list: &x.ReactorList})
		if !f(fd_GenesisState_reactorList, value) {
			return
		}
	}
	if x.ReactorCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReactorCount)
		if !f(fd_GenesisState_reactorCount, value) {
			return
		}
	}
	if len(x.StructList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_17_list{list: &x.StructList})
		if !f(fd_GenesisState_structList, value) {
			return
		}
	}
	if x.StructCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StructCount)
		if !f(fd_GenesisState_structCount, value) {
			return
		}
	}
	if len(x.SubstationList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_19_list{list: &x.SubstationList})
		if !f(fd_GenesisState_substationList, value) {
			return
		}
	}
	if x.SubstationCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SubstationCount)
		if !f(fd_GenesisState_substationCount, value) {
			return
		}
	}
	if len(x.PermissionList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_21_list{list: &x.PermissionList})
		if !f(fd_GenesisState_permissionList, value) {
			return
		}
	}
	if len(x.GridList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_22_list{list: &x.GridList})
		if !f(fd_GenesisState_gridList, value) {
			return
		}
	}
	if len(x.AddressList) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_23_list{list: &x.AddressList})
		if !f(fd_GenesisState_addressList, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "structs.structs.GenesisState.params":
		return x.Params != nil
	case "structs.structs.GenesisState.port_id":
		return x.PortId != ""
	case "structs.structs.GenesisState.allocationList":
		return len(x.AllocationList) != 0
	case "structs.structs.GenesisState.agreementList":
		return len(x.AgreementList) != 0
	case "structs.structs.GenesisState.infusionList":
		return len(x.InfusionList) != 0
	case "structs.structs.GenesisState.guildList":
		return len(x.GuildList) != 0
	case "structs.structs.GenesisState.guildCount":
		return x.GuildCount != uint64(0)
	case "structs.structs.GenesisState.planetList":
		return len(x.PlanetList) != 0
	case "structs.structs.GenesisState.planetCount":
		return x.PlanetCount != uint64(0)
	case "structs.structs.GenesisState.playerList":
		return len(x.PlayerList) != 0
	case "structs.structs.GenesisState.playerHalted":
		return len(x.PlayerHalted) != 0
	case "structs.structs.GenesisState.playerCount":
		return x.PlayerCount != uint64(0)
	case "structs.structs.GenesisState.providerList":
		return len(x.ProviderList) != 0
	case "structs.structs.GenesisState.providerCount":
		return x.ProviderCount != uint64(0)
	case "structs.structs.GenesisState.reactorList":
		return len(x.ReactorList) != 0
	case "structs.structs.GenesisState.reactorCount":
		return x.ReactorCount != uint64(0)
	case "structs.structs.GenesisState.structList":
		return len(x.StructList) != 0
	case "structs.structs.GenesisState.structCount":
		return x.StructCount != uint64(0)
	case "structs.structs.GenesisState.substationList":
		return len(x.SubstationList) != 0
	case "structs.structs.GenesisState.substationCount":
		return x.SubstationCount != uint64(0)
	case "structs.structs.GenesisState.permissionList":
		return len(x.PermissionList) != 0
	case "structs.structs.GenesisState.gridList":
		return len(x.GridList) != 0
	case "structs.structs.GenesisState.addressList":
		return len(x.AddressList) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.GenesisState"))
		}
		panic(fmt.Errorf("message structs.structs.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "structs.structs.GenesisState.params":
		x.Params = nil
	case "structs.structs.GenesisState.port_id":
		x.PortId = ""
	case "structs.structs.GenesisState.allocationList":
		x.AllocationList = nil
	case "structs.structs.GenesisState.agreementList":
		x.AgreementList = nil
	case "structs.structs.GenesisState.infusionList":
		x.InfusionList = nil
	case "structs.structs.GenesisState.guildList":
		x.GuildList = nil
	case "structs.structs.GenesisState.guildCount":
		x.GuildCount = uint64(0)
	case "structs.structs.GenesisState.planetList":
		x.PlanetList = nil
	case "structs.structs.GenesisState.planetCount":
		x.PlanetCount = uint64(0)
	case "structs.structs.GenesisState.playerList":
		x.PlayerList = nil
	case "structs.structs.GenesisState.playerHalted":
		x.PlayerHalted = nil
	case "structs.structs.GenesisState.playerCount":
		x.PlayerCount = uint64(0)
	case "structs.structs.GenesisState.providerList":
		x.ProviderList = nil
	case "structs.structs.GenesisState.providerCount":
		x.ProviderCount = uint64(0)
	case "structs.structs.GenesisState.reactorList":
		x.ReactorList = nil
	case "structs.structs.GenesisState.reactorCount":
		x.ReactorCount = uint64(0)
	case "structs.structs.GenesisState.structList":
		x.StructList = nil
	case "structs.structs.GenesisState.structCount":
		x.StructCount = uint64(0)
	case "structs.structs.GenesisState.substationList":
		x.SubstationList = nil
	case "structs.structs.GenesisState.substationCount":
		x.SubstationCount = uint64(0)
	case "structs.structs.GenesisState.permissionList":
		x.PermissionList = nil
	case "structs.structs.GenesisState.gridList":
		x.GridList = nil
	case "structs.structs.GenesisState.addressList":
		x.AddressList = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.GenesisState"))
		}
		panic(fmt.Errorf("message structs.structs.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "structs.structs.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "structs.structs.GenesisState.port_id":
		value := x.PortId
		return protoreflect.ValueOfString(value)
	case "structs.structs.GenesisState.allocationList":
		if len(x.AllocationList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_3_list{})
		}
		listValue := &_GenesisState_3_list{list: &x.AllocationList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.agreementList":
		if len(x.AgreementList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.AgreementList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.infusionList":
		if len(x.InfusionList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.InfusionList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.guildList":
		if len(x.GuildList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.GuildList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.guildCount":
		value := x.GuildCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.planetList":
		if len(x.PlanetList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_8_list{})
		}
		listValue := &_GenesisState_8_list{list: &x.PlanetList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.planetCount":
		value := x.PlanetCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.playerList":
		if len(x.PlayerList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_10_list{})
		}
		listValue := &_GenesisState_10_list{list: &x.PlayerList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.playerHalted":
		if len(x.PlayerHalted) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_11_list{})
		}
		listValue := &_GenesisState_11_list{list: &x.PlayerHalted}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.playerCount":
		value := x.PlayerCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.providerList":
		if len(x.ProviderList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_13_list{})
		}
		listValue := &_GenesisState_13_list{list: &x.ProviderList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.providerCount":
		value := x.ProviderCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.reactorList":
		if len(x.ReactorList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_15_list{})
		}
		listValue := &_GenesisState_15_list{list: &x.ReactorList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.reactorCount":
		value := x.ReactorCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.structList":
		if len(x.StructList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_17_list{})
		}
		listValue := &_GenesisState_17_list{list: &x.StructList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.structCount":
		value := x.StructCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.substationList":
		if len(x.SubstationList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_19_list{})
		}
		listValue := &_GenesisState_19_list{list: &x.SubstationList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.substationCount":
		value := x.SubstationCount
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.GenesisState.permissionList":
		if len(x.PermissionList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_21_list{})
		}
		listValue := &_GenesisState_21_list{list: &x.PermissionList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.gridList":
		if len(x.GridList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_22_list{})
		}
		listValue := &_GenesisState_22_list{list: &x.GridList}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.GenesisState.addressList":
		if len(x.AddressList) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_23_list{})
		}
		listValue := &_GenesisState_23_list{list: &x.AddressList}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.GenesisState"))
		}
		panic(fmt.Errorf("message structs.structs.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "structs.structs.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "structs.structs.GenesisState.port_id":
		x.PortId = value.Interface().(string)
	case "structs.structs.GenesisState.allocationList":
		lv := value.List()
		clv := lv.(*_GenesisState_3_list)
		x.AllocationList = *clv.list
	case "structs.structs.GenesisState.agreementList":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.AgreementList = *clv.list
	case "structs.structs.GenesisState.infusionList":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.InfusionList = *clv.list
	case "structs.structs.GenesisState.guildList":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.GuildList = *clv.list
	case "structs.structs.GenesisState.guildCount":
		x.GuildCount = value.Uint()
	case "structs.structs.GenesisState.planetList":
		lv := value.List()
		clv := lv.(*_GenesisState_8_list)
		x.PlanetList = *clv.list
	case "structs.structs.GenesisState.planetCount":
		x.PlanetCount = value.Uint()
	case "structs.structs.GenesisState.playerList":
		lv := value.List()
		clv := lv.(*_GenesisState_10_list)
		x.PlayerList = *clv.list
	case "structs.structs.GenesisState.playerHalted":
		lv := value.List()
		clv := lv.(*_GenesisState_11_list)
		x.PlayerHalted = *clv.list
	case "structs.structs.GenesisState.playerCount":
		x.PlayerCount = value.Uint()
	case "structs.structs.GenesisState.providerList":
		lv := value.List()
		clv := lv.(*_GenesisState_13_list)
		x.ProviderList = *clv.list
	case "structs.structs.GenesisState.providerCount":
		x.ProviderCount = value.Uint()
	case "structs.structs.GenesisState.reactorList":
		lv := value.List()
		clv := lv.(*_GenesisState_15_list)
		x.ReactorList = *clv.list
	case "structs.structs.GenesisState.reactorCount":
		x.ReactorCount = value.Uint()
	case "structs.structs.GenesisState.structList":
		lv := value.List()
		clv := lv.(*_GenesisState_17_list)
		x.StructList = *clv.list
	case "structs.structs.GenesisState.structCount":
		x.StructCount = value.Uint()
	case "structs.structs.GenesisState.substationList":
		lv := value.List()
		clv := lv.(*_GenesisState_19_list)
		x.SubstationList = *clv.list
	case "structs.structs.GenesisState.substationCount":
		x.SubstationCount = value.Uint()
	case "structs.structs.GenesisState.permissionList":
		lv := value.List()
		clv := lv.(*_GenesisState_21_list)
		x.PermissionList = *clv.list
	case "structs.structs.GenesisState.gridList":
		lv := value.List()
		clv := lv.(*_GenesisState_22_list)
		x.GridList = *clv.list
	case "structs.structs.GenesisState.addressList":
		lv := value.List()
		clv := lv.(*_GenesisState_23_list)
		x.AddressList = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.GenesisState"))
		}
		panic(fmt.Errorf("message structs.structs.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "structs.structs.GenesisState.allocationList":
		if x.AllocationList == nil {
			x.AllocationList = []*Allocation{}
		}
		value := &_GenesisState_3_list{list: &x.AllocationList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.agreementList":
		if x.AgreementList == nil {
			x.AgreementList = []*Agreement{}
		}
		value := &_GenesisState_4_list{list: &x.AgreementList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.infusionList":
		if x.InfusionList == nil {
			x.InfusionList = []*Infusion{}
		}
		value := &_GenesisState_5_list{list: &x.InfusionList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.guildList":
		if x.GuildList == nil {
			x.GuildList = []*Guild{}
		}
		value := &_GenesisState_6_list{list: &x.GuildList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.planetList":
		if x.PlanetList == nil {
			x.PlanetList = []*Planet{}
		}
		value := &_GenesisState_8_list{list: &x.PlanetList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.playerList":
		if x.PlayerList == nil {
			x.PlayerList = []*Player{}
		}
		value := &_GenesisState_10_list{list: &x.PlayerList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.playerHalted":
		if x.PlayerHalted == nil {
			x.PlayerHalted = []string{}
		}
		value := &_GenesisState_11_list{list: &x.PlayerHalted}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.providerList":
		if x.ProviderList == nil {
			x.ProviderList = []*Provider{}
		}
		value := &_GenesisState_13_list{list: &x.ProviderList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.reactorList":
		if x.ReactorList == nil {
			x.ReactorList = []*Reactor{}
		}
		value := &_GenesisState_15_list{list: &x.ReactorList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.structList":
		if x.StructList == nil {
			x.StructList = []*Struct{}
		}
		value := &_GenesisState_17_list{list: &x.StructList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.substationList":
		if x.SubstationList == nil {
			x.SubstationList = []*Substation{}
		}
		value := &_GenesisState_19_list{list: &x.SubstationList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.permissionList":
		if x.PermissionList == nil {
			x.PermissionList = []*PermissionRecord{}
		}
		value := &_GenesisState_21_list{list: &x.PermissionList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.gridList":
		if x.GridList == nil {
			x.GridList = []*GridRecord{}
		}
		value := &_GenesisState_22_list{list: &x.GridList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.addressList":
		if x.AddressList == nil {
			x.AddressList = []*AddressRecord{}
		}
		value := &_GenesisState_23_list{list: &x.AddressList}
		return protoreflect.ValueOfList(value)
	case "structs.structs.GenesisState.port_id":
		panic(fmt.Errorf("field port_id of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.guildCount":
		panic(fmt.Errorf("field guildCount of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.planetCount":
		panic(fmt.Errorf("field planetCount of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.playerCount":
		panic(fmt.Errorf("field playerCount of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.providerCount":
		panic(fmt.Errorf("field providerCount of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.reactorCount":
		panic(fmt.Errorf("field reactorCount of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.structCount":
		panic(fmt.Errorf("field structCount of message structs.structs.GenesisState is not mutable"))
	case "structs.structs.GenesisState.substationCount":
		panic(fmt.Errorf("field substationCount of message structs.structs.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.GenesisState"))
		}
		panic(fmt.Errorf("message structs.structs.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "structs.structs.GenesisState.port_id":
		return protoreflect.ValueOfString("")
	case "structs.structs.GenesisState.allocationList":
		list := []*Allocation{}
		return protoreflect.ValueOfList(&_GenesisState_3_list{list: &list})
	case "structs.structs.GenesisState.agreementList":
		list := []*Agreement{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "structs.structs.GenesisState.infusionList":
		list := []*Infusion{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	case "structs.structs.GenesisState.guildList":
		list := []*Guild{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "structs.structs.GenesisState.guildCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.planetList":
		list := []*Planet{}
		return protoreflect.ValueOfList(&_GenesisState_8_list{list: &list})
	case "structs.structs.GenesisState.planetCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.playerList":
		list := []*Player{}
		return protoreflect.ValueOfList(&_GenesisState_10_list{list: &list})
	case "structs.structs.GenesisState.playerHalted":
		list := []string{}
		return protoreflect.ValueOfList(&_GenesisState_11_list{list: &list})
	case "structs.structs.GenesisState.playerCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.providerList":
		list := []*Provider{}
		return protoreflect.ValueOfList(&_GenesisState_13_list{list: &list})
	case "structs.structs.GenesisState.providerCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.reactorList":
		list := []*Reactor{}
		return protoreflect.ValueOfList(&_GenesisState_15_list{list: &list})
	case "structs.structs.GenesisState.reactorCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.structList":
		list := []*Struct{}
		return protoreflect.ValueOfList(&_GenesisState_17_list{list: &list})
	case "structs.structs.GenesisState.structCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.substationList":
		list := []*Substation{}
		return protoreflect.ValueOfList(&_GenesisState_19_list{list: &list})
	case "structs.structs.GenesisState.substationCount":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.GenesisState.permissionList":
		list := []*PermissionRecord{}
		return protoreflect.ValueOfList(&_GenesisState_21_list{list: &list})
	case "structs.structs.GenesisState.gridList":
		list := []*GridRecord{}
		return protoreflect.ValueOfList(&_GenesisState_22_list{list: &list})
	case "structs.structs.GenesisState.addressList":
		list := []*AddressRecord{}
		return protoreflect.ValueOfList(&_GenesisState_23_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.GenesisState"))
		}
		panic(fmt.Errorf("message structs.structs.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in structs.structs.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AllocationList) > 0 {
			for _, e := range x.AllocationList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AgreementList) > 0 {
			for _, e := range x.AgreementList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.InfusionList) > 0 {
			for _, e := range x.InfusionList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.GuildList) > 0 {
			for _, e := range x.GuildList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.GuildCount != 0 {
			n += 1 + runtime.Sov(uint64(x.GuildCount))
		}
		if len(x.PlanetList) > 0 {
			for _, e := range x.PlanetList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.PlanetCount != 0 {
			n += 1 + runtime.Sov(uint64(x.PlanetCount))
		}
		if len(x.PlayerList) > 0 {
			for _, e := range x.PlayerList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PlayerHalted) > 0 {
			for _, s := range x.PlayerHalted {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.PlayerCount != 0 {
			n += 1 + runtime.Sov(uint64(x.PlayerCount))
		}
		if len(x.ProviderList) > 0 {
			for _, e := range x.ProviderList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ProviderCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ProviderCount))
		}
		if len(x.ReactorList) > 0 {
			for _, e := range x.ReactorList {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ReactorCount != 0 {
			n += 2 + runtime.Sov(uint64(x.ReactorCount))
		}
		if len(x.StructList) > 0 {
			for _, e := range x.StructList {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.StructCount != 0 {
			n += 2 + runtime.Sov(uint64(x.StructCount))
		}
		if len(x.SubstationList) > 0 {
			for _, e := range x.SubstationList {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.SubstationCount != 0 {
			n += 2 + runtime.Sov(uint64(x.SubstationCount))
		}
		if len(x.PermissionList) > 0 {
			for _, e := range x.PermissionList {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.GridList) > 0 {
			for _, e := range x.GridList {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AddressList) > 0 {
			for _, e := range x.AddressList {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AddressList) > 0 {
			for iNdEx := len(x.AddressList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AddressList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.GridList) > 0 {
			for iNdEx := len(x.GridList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.GridList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xb2
			}
		}
		if len(x.PermissionList) > 0 {
			for iNdEx := len(x.PermissionList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PermissionList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xaa
			}
		}
		if x.SubstationCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SubstationCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if len(x.SubstationList) > 0 {
			for iNdEx := len(x.SubstationList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SubstationList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x9a
			}
		}
		if x.StructCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StructCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if len(x.StructList) > 0 {
			for iNdEx := len(x.StructList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StructList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x8a
			}
		}
		if x.ReactorCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReactorCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if len(x.ReactorList) > 0 {
			for iNdEx := len(x.ReactorList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ReactorList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if x.ProviderCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ProviderCount))
			i--
			dAtA[i] = 0x70
		}
		if len(x.ProviderList) > 0 {
			for iNdEx := len(x.ProviderList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ProviderList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x6a
			}
		}
		if x.PlayerCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PlayerCount))
			i--
			dAtA[i] = 0x60
		}
		if len(x.PlayerHalted) > 0 {
			for iNdEx := len(x.PlayerHalted) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.PlayerHalted[iNdEx])
				copy(dAtA[i:], x.PlayerHalted[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PlayerHalted[iNdEx])))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.PlayerList) > 0 {
			for iNdEx := len(x.PlayerList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PlayerList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.PlanetCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PlanetCount))
			i--
			dAtA[i] = 0x48
		}
		if len(x.PlanetList) > 0 {
			for iNdEx := len(x.PlanetList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PlanetList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.GuildCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GuildCount))
			i--
			dAtA[i] = 0x38
		}
		if len(x.GuildList) > 0 {
			for iNdEx := len(x.GuildList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.GuildList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.InfusionList) > 0 {
			for iNdEx := len(x.InfusionList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.InfusionList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.AgreementList) > 0 {
			for iNdEx := len(x.AgreementList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AgreementList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.AllocationList) > 0 {
			for iNdEx := len(x.AllocationList) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AllocationList[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.PortId) > 0 {
			i -= len(x.PortId)
			copy(dAtA[i:], x.PortId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortId)))
			i--
			dAtA[i] = 0x12
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AllocationList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AllocationList = append(x.AllocationList, &Allocation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AllocationList[len(x.AllocationList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AgreementList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AgreementList = append(x.AgreementList, &Agreement{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AgreementList[len(x.AgreementList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InfusionList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InfusionList = append(x.InfusionList, &Infusion{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.InfusionList[len(x.InfusionList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GuildList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GuildList = append(x.GuildList, &Guild{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.GuildList[len(x.GuildList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GuildCount", wireType)
				}
				x.GuildCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GuildCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanetList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PlanetList = append(x.PlanetList, &Planet{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PlanetList[len(x.PlanetList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanetCount", wireType)
				}
				x.PlanetCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PlanetCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlayerList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PlayerList = append(x.PlayerList, &Player{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PlayerList[len(x.PlayerList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlayerHalted", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PlayerHalted = append(x.PlayerHalted, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlayerCount", wireType)
				}
				x.PlayerCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PlayerCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProviderList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProviderList = append(x.ProviderList, &Provider{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ProviderList[len(x.ProviderList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProviderCount", wireType)
				}
				x.ProviderCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ProviderCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReactorList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReactorList = append(x.ReactorList, &Reactor{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReactorList[len(x.ReactorList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReactorCount", wireType)
				}
				x.ReactorCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReactorCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StructList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StructList = append(x.StructList, &Struct{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StructList[len(x.StructList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StructCount", wireType)
				}
				x.StructCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StructCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubstationList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SubstationList = append(x.SubstationList, &Substation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SubstationList[len(x.SubstationList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubstationCount", wireType)
				}
				x.SubstationCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SubstationCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PermissionList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PermissionList = append(x.PermissionList, &PermissionRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PermissionList[len(x.PermissionList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GridList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GridList = append(x.GridList, &GridRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.GridList[len(x.GridList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AddressList", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AddressList = append(x.AddressList, &AddressRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AddressList[len(x.AddressList)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: structs/structs/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the structs module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines all the parameters of the module.
	Params          *Params             `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	PortId          string              `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	AllocationList  []*Allocation       `protobuf:"bytes,3,rep,name=allocationList,proto3" json:"allocationList,omitempty"`
	AgreementList   []*Agreement        `protobuf:"bytes,4,rep,name=agreementList,proto3" json:"agreementList,omitempty"`
	InfusionList    []*Infusion         `protobuf:"bytes,5,rep,name=infusionList,proto3" json:"infusionList,omitempty"`
	GuildList       []*Guild            `protobuf:"bytes,6,rep,name=guildList,proto3" json:"guildList,omitempty"`
	GuildCount      uint64              `protobuf:"varint,7,opt,name=guildCount,proto3" json:"guildCount,omitempty"`
	PlanetList      []*Planet           `protobuf:"bytes,8,rep,name=planetList,proto3" json:"planetList,omitempty"`
	PlanetCount     uint64              `protobuf:"varint,9,opt,name=planetCount,proto3" json:"planetCount,omitempty"`
	PlayerList      []*Player           `protobuf:"bytes,10,rep,name=playerList,proto3" json:"playerList,omitempty"`
	PlayerHalted    []string            `protobuf:"bytes,11,rep,name=playerHalted,proto3" json:"playerHalted,omitempty"`
	PlayerCount     uint64              `protobuf:"varint,12,opt,name=playerCount,proto3" json:"playerCount,omitempty"`
	ProviderList    []*Provider         `protobuf:"bytes,13,rep,name=providerList,proto3" json:"providerList,omitempty"`
	ProviderCount   uint64              `protobuf:"varint,14,opt,name=providerCount,proto3" json:"providerCount,omitempty"`
	ReactorList     []*Reactor          `protobuf:"bytes,15,rep,name=reactorList,proto3" json:"reactorList,omitempty"`
	ReactorCount    uint64              `protobuf:"varint,16,opt,name=reactorCount,proto3" json:"reactorCount,omitempty"`
	StructList      []*Struct           `protobuf:"bytes,17,rep,name=structList,proto3" json:"structList,omitempty"`
	StructCount     uint64              `protobuf:"varint,18,opt,name=structCount,proto3" json:"structCount,omitempty"`
	SubstationList  []*Substation       `protobuf:"bytes,19,rep,name=substationList,proto3" json:"substationList,omitempty"`
	SubstationCount uint64              `protobuf:"varint,20,opt,name=substationCount,proto3" json:"substationCount,omitempty"`
	PermissionList  []*PermissionRecord `protobuf:"bytes,21,rep,name=permissionList,proto3" json:"permissionList,omitempty"`
	GridList        []*GridRecord       `protobuf:"bytes,22,rep,name=gridList,proto3" json:"gridList,omitempty"`
	AddressList     []*AddressRecord    `protobuf:"bytes,23,rep,name=addressList,proto3" json:"addressList,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_structs_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_structs_structs_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetPortId() string {
	if x != nil {
		return x.PortId
	}
	return ""
}

func (x *GenesisState) GetAllocationList() []*Allocation {
	if x != nil {
		return x.AllocationList
	}
	return nil
}

func (x *GenesisState) GetAgreementList() []*Agreement {
	if x != nil {
		return x.AgreementList
	}
	return nil
}

func (x *GenesisState) GetInfusionList() []*Infusion {
	if x != nil {
		return x.InfusionList
	}
	return nil
}

func (x *GenesisState) GetGuildList() []*Guild {
	if x != nil {
		return x.GuildList
	}
	return nil
}

func (x *GenesisState) GetGuildCount() uint64 {
	if x != nil {
		return x.GuildCount
	}
	return 0
}

func (x *GenesisState) GetPlanetList() []*Planet {
	if x != nil {
		return x.PlanetList
	}
	return nil
}

func (x *GenesisState) GetPlanetCount() uint64 {
	if x != nil {
		return x.PlanetCount
	}
	return 0
}

func (x *GenesisState) GetPlayerList() []*Player {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

func (x *GenesisState) GetPlayerHalted() []string {
	if x != nil {
		return x.PlayerHalted
	}
	return nil
}

func (x *GenesisState) GetPlayerCount() uint64 {
	if x != nil {
		return x.PlayerCount
	}
	return 0
}

func (x *GenesisState) GetProviderList() []*Provider {
	if x != nil {
		return x.ProviderList
	}
	return nil
}

func (x *GenesisState) GetProviderCount() uint64 {
	if x != nil {
		return x.ProviderCount
	}
	return 0
}

func (x *GenesisState) GetReactorList() []*Reactor {
	if x != nil {
		return x.ReactorList
	}
	return nil
}

func (x *GenesisState) GetReactorCount() uint64 {
	if x != nil {
		return x.ReactorCount
	}
	return 0
}

func (x *GenesisState) GetStructList() []*Struct {
	if x != nil {
		return x.StructList
	}
	return nil
}

func (x *GenesisState) GetStructCount() uint64 {
	if x != nil {
		return x.StructCount
	}
	return 0
}

func (x *GenesisState) GetSubstationList() []*Substation {
	if x != nil {
		return x.SubstationList
	}
	return nil
}

func (x *GenesisState) GetSubstationCount() uint64 {
	if x != nil {
		return x.SubstationCount
	}
	return 0
}

func (x *GenesisState) GetPermissionList() []*PermissionRecord {
	if x != nil {
		return x.PermissionList
	}
	return nil
}

func (x *GenesisState) GetGridList() []*GridRecord {
	if x != nil {
		return x.GridList
	}
	return nil
}

func (x *GenesisState) GetAddressList() []*AddressRecord {
	if x != nil {
		return x.AddressList
	}
	return nil
}

var File_structs_structs_genesis_proto protoreflect.FileDescriptor

var file_structs_structs_genesis_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x72, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x09, 0x0a, 0x0c,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0d,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x48,
	0x61, 0x6c, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0a,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x67, 0x72, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x67, 0x72,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0xa2, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xca, 0x02, 0x0f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1b, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x3a, 0x3a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_structs_structs_genesis_proto_rawDescOnce sync.Once
	file_structs_structs_genesis_proto_rawDescData = file_structs_structs_genesis_proto_rawDesc
)

func file_structs_structs_genesis_proto_rawDescGZIP() []byte {
	file_structs_structs_genesis_proto_rawDescOnce.Do(func() {
		file_structs_structs_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_structs_structs_genesis_proto_rawDescData)
	})
	return file_structs_structs_genesis_proto_rawDescData
}

var file_structs_structs_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_structs_structs_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),     // 0: structs.structs.GenesisState
	(*Params)(nil),           // 1: structs.structs.Params
	(*Allocation)(nil),       // 2: structs.structs.Allocation
	(*Agreement)(nil),        // 3: structs.structs.Agreement
	(*Infusion)(nil),         // 4: structs.structs.Infusion
	(*Guild)(nil),            // 5: structs.structs.Guild
	(*Planet)(nil),           // 6: structs.structs.Planet
	(*Player)(nil),           // 7: structs.structs.Player
	(*Provider)(nil),         // 8: structs.structs.Provider
	(*Reactor)(nil),          // 9: structs.structs.Reactor
	(*Struct)(nil),           // 10: structs.structs.Struct
	(*Substation)(nil),       // 11: structs.structs.Substation
	(*PermissionRecord)(nil), // 12: structs.structs.PermissionRecord
	(*GridRecord)(nil),       // 13: structs.structs.GridRecord
	(*AddressRecord)(nil),    // 14: structs.structs.AddressRecord
}
var file_structs_structs_genesis_proto_depIdxs = []int32{
	1,  // 0: structs.structs.GenesisState.params:type_name -> structs.structs.Params
	2,  // 1: structs.structs.GenesisState.allocationList:type_name -> structs.structs.Allocation
	3,  // 2: structs.structs.GenesisState.agreementList:type_name -> structs.structs.Agreement
	4,  // 3: structs.structs.GenesisState.infusionList:type_name -> structs.structs.Infusion
	5,  // 4: structs.structs.GenesisState.guildList:type_name -> structs.structs.Guild
	6,  // 5: structs.structs.GenesisState.planetList:type_name -> structs.structs.Planet
	7,  // 6: structs.structs.GenesisState.playerList:type_name -> structs.structs.Player
	8,  // 7: structs.structs.GenesisState.providerList:type_name -> structs.structs.Provider
	9,  // 8: structs.structs.GenesisState.reactorList:type_name -> structs.structs.Reactor
	10, // 9: structs.structs.GenesisState.structList:type_name -> structs.structs.Struct
	11, // 10: structs.structs.GenesisState.substationList:type_name -> structs.structs.Substation
	12, // 11: structs.structs.GenesisState.permissionList:type_name -> structs.structs.PermissionRecord
	13, // 12: structs.structs.GenesisState.gridList:type_name -> structs.structs.GridRecord
	14, // 13: structs.structs.GenesisState.addressList:type_name -> structs.structs.AddressRecord
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_structs_structs_genesis_proto_init() }
func file_structs_structs_genesis_proto_init() {
	if File_structs_structs_genesis_proto != nil {
		return
	}
	file_structs_structs_params_proto_init()
	file_structs_structs_address_proto_init()
	file_structs_structs_agreement_proto_init()
	file_structs_structs_allocation_proto_init()
	file_structs_structs_grid_proto_init()
	file_structs_structs_guild_proto_init()
	file_structs_structs_infusion_proto_init()
	file_structs_structs_keys_proto_init()
	file_structs_structs_permission_proto_init()
	file_structs_structs_player_proto_init()
	file_structs_structs_planet_proto_init()
	file_structs_structs_provider_proto_init()
	file_structs_structs_reactor_proto_init()
	file_structs_structs_struct_proto_init()
	file_structs_structs_substation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_structs_structs_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structs_structs_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structs_structs_genesis_proto_goTypes,
		DependencyIndexes: file_structs_structs_genesis_proto_depIdxs,
		MessageInfos:      file_structs_structs_genesis_proto_msgTypes,
	}.Build()
	File_structs_structs_genesis_proto = out.File
	file_structs_structs_genesis_proto_rawDesc = nil
	file_structs_structs_genesis_proto_goTypes = nil
	file_structs_structs_genesis_proto_depIdxs = nil
}
