// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package structs

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Fleet_8_list)(nil)

type _Fleet_8_list struct {
	list *[]string
}

func (x *_Fleet_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Fleet_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Fleet_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Fleet_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Fleet_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Fleet at list field Space as it is not of Message kind"))
}

func (x *_Fleet_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Fleet_8_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Fleet_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Fleet_9_list)(nil)

type _Fleet_9_list struct {
	list *[]string
}

func (x *_Fleet_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Fleet_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Fleet_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Fleet_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Fleet_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Fleet at list field Air as it is not of Message kind"))
}

func (x *_Fleet_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Fleet_9_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Fleet_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Fleet_10_list)(nil)

type _Fleet_10_list struct {
	list *[]string
}

func (x *_Fleet_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Fleet_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Fleet_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Fleet_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Fleet_10_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Fleet at list field Land as it is not of Message kind"))
}

func (x *_Fleet_10_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Fleet_10_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Fleet_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Fleet_11_list)(nil)

type _Fleet_11_list struct {
	list *[]string
}

func (x *_Fleet_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Fleet_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Fleet_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Fleet_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Fleet_11_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Fleet at list field Water as it is not of Message kind"))
}

func (x *_Fleet_11_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Fleet_11_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Fleet_11_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Fleet                      protoreflect.MessageDescriptor
	fd_Fleet_id                   protoreflect.FieldDescriptor
	fd_Fleet_owner                protoreflect.FieldDescriptor
	fd_Fleet_locationType         protoreflect.FieldDescriptor
	fd_Fleet_locationId           protoreflect.FieldDescriptor
	fd_Fleet_status               protoreflect.FieldDescriptor
	fd_Fleet_locationListForward  protoreflect.FieldDescriptor
	fd_Fleet_locationListBackward protoreflect.FieldDescriptor
	fd_Fleet_space                protoreflect.FieldDescriptor
	fd_Fleet_air                  protoreflect.FieldDescriptor
	fd_Fleet_land                 protoreflect.FieldDescriptor
	fd_Fleet_water                protoreflect.FieldDescriptor
	fd_Fleet_spaceSlots           protoreflect.FieldDescriptor
	fd_Fleet_airSlots             protoreflect.FieldDescriptor
	fd_Fleet_landSlots            protoreflect.FieldDescriptor
	fd_Fleet_waterSlots           protoreflect.FieldDescriptor
)

func init() {
	file_structs_structs_fleet_proto_init()
	md_Fleet = File_structs_structs_fleet_proto.Messages().ByName("Fleet")
	fd_Fleet_id = md_Fleet.Fields().ByName("id")
	fd_Fleet_owner = md_Fleet.Fields().ByName("owner")
	fd_Fleet_locationType = md_Fleet.Fields().ByName("locationType")
	fd_Fleet_locationId = md_Fleet.Fields().ByName("locationId")
	fd_Fleet_status = md_Fleet.Fields().ByName("status")
	fd_Fleet_locationListForward = md_Fleet.Fields().ByName("locationListForward")
	fd_Fleet_locationListBackward = md_Fleet.Fields().ByName("locationListBackward")
	fd_Fleet_space = md_Fleet.Fields().ByName("space")
	fd_Fleet_air = md_Fleet.Fields().ByName("air")
	fd_Fleet_land = md_Fleet.Fields().ByName("land")
	fd_Fleet_water = md_Fleet.Fields().ByName("water")
	fd_Fleet_spaceSlots = md_Fleet.Fields().ByName("spaceSlots")
	fd_Fleet_airSlots = md_Fleet.Fields().ByName("airSlots")
	fd_Fleet_landSlots = md_Fleet.Fields().ByName("landSlots")
	fd_Fleet_waterSlots = md_Fleet.Fields().ByName("waterSlots")
}

var _ protoreflect.Message = (*fastReflection_Fleet)(nil)

type fastReflection_Fleet Fleet

func (x *Fleet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Fleet)(x)
}

func (x *Fleet) slowProtoReflect() protoreflect.Message {
	mi := &file_structs_structs_fleet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Fleet_messageType fastReflection_Fleet_messageType
var _ protoreflect.MessageType = fastReflection_Fleet_messageType{}

type fastReflection_Fleet_messageType struct{}

func (x fastReflection_Fleet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Fleet)(nil)
}
func (x fastReflection_Fleet_messageType) New() protoreflect.Message {
	return new(fastReflection_Fleet)
}
func (x fastReflection_Fleet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Fleet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Fleet) Descriptor() protoreflect.MessageDescriptor {
	return md_Fleet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Fleet) Type() protoreflect.MessageType {
	return _fastReflection_Fleet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Fleet) New() protoreflect.Message {
	return new(fastReflection_Fleet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Fleet) Interface() protoreflect.ProtoMessage {
	return (*Fleet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Fleet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_Fleet_id, value) {
			return
		}
	}
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_Fleet_owner, value) {
			return
		}
	}
	if x.LocationType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.LocationType))
		if !f(fd_Fleet_locationType, value) {
			return
		}
	}
	if x.LocationId != "" {
		value := protoreflect.ValueOfString(x.LocationId)
		if !f(fd_Fleet_locationId, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Fleet_status, value) {
			return
		}
	}
	if x.LocationListForward != "" {
		value := protoreflect.ValueOfString(x.LocationListForward)
		if !f(fd_Fleet_locationListForward, value) {
			return
		}
	}
	if x.LocationListBackward != "" {
		value := protoreflect.ValueOfString(x.LocationListBackward)
		if !f(fd_Fleet_locationListBackward, value) {
			return
		}
	}
	if len(x.Space) != 0 {
		value := protoreflect.ValueOfList(&_Fleet_8_list{list: &x.Space})
		if !f(fd_Fleet_space, value) {
			return
		}
	}
	if len(x.Air) != 0 {
		value := protoreflect.ValueOfList(&_Fleet_9_list{list: &x.Air})
		if !f(fd_Fleet_air, value) {
			return
		}
	}
	if len(x.Land) != 0 {
		value := protoreflect.ValueOfList(&_Fleet_10_list{list: &x.Land})
		if !f(fd_Fleet_land, value) {
			return
		}
	}
	if len(x.Water) != 0 {
		value := protoreflect.ValueOfList(&_Fleet_11_list{list: &x.Water})
		if !f(fd_Fleet_water, value) {
			return
		}
	}
	if x.SpaceSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SpaceSlots)
		if !f(fd_Fleet_spaceSlots, value) {
			return
		}
	}
	if x.AirSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AirSlots)
		if !f(fd_Fleet_airSlots, value) {
			return
		}
	}
	if x.LandSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LandSlots)
		if !f(fd_Fleet_landSlots, value) {
			return
		}
	}
	if x.WaterSlots != uint64(0) {
		value := protoreflect.ValueOfUint64(x.WaterSlots)
		if !f(fd_Fleet_waterSlots, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Fleet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "structs.structs.Fleet.id":
		return x.Id != ""
	case "structs.structs.Fleet.owner":
		return x.Owner != ""
	case "structs.structs.Fleet.locationType":
		return x.LocationType != 0
	case "structs.structs.Fleet.locationId":
		return x.LocationId != ""
	case "structs.structs.Fleet.status":
		return x.Status != 0
	case "structs.structs.Fleet.locationListForward":
		return x.LocationListForward != ""
	case "structs.structs.Fleet.locationListBackward":
		return x.LocationListBackward != ""
	case "structs.structs.Fleet.space":
		return len(x.Space) != 0
	case "structs.structs.Fleet.air":
		return len(x.Air) != 0
	case "structs.structs.Fleet.land":
		return len(x.Land) != 0
	case "structs.structs.Fleet.water":
		return len(x.Water) != 0
	case "structs.structs.Fleet.spaceSlots":
		return x.SpaceSlots != uint64(0)
	case "structs.structs.Fleet.airSlots":
		return x.AirSlots != uint64(0)
	case "structs.structs.Fleet.landSlots":
		return x.LandSlots != uint64(0)
	case "structs.structs.Fleet.waterSlots":
		return x.WaterSlots != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Fleet"))
		}
		panic(fmt.Errorf("message structs.structs.Fleet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Fleet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "structs.structs.Fleet.id":
		x.Id = ""
	case "structs.structs.Fleet.owner":
		x.Owner = ""
	case "structs.structs.Fleet.locationType":
		x.LocationType = 0
	case "structs.structs.Fleet.locationId":
		x.LocationId = ""
	case "structs.structs.Fleet.status":
		x.Status = 0
	case "structs.structs.Fleet.locationListForward":
		x.LocationListForward = ""
	case "structs.structs.Fleet.locationListBackward":
		x.LocationListBackward = ""
	case "structs.structs.Fleet.space":
		x.Space = nil
	case "structs.structs.Fleet.air":
		x.Air = nil
	case "structs.structs.Fleet.land":
		x.Land = nil
	case "structs.structs.Fleet.water":
		x.Water = nil
	case "structs.structs.Fleet.spaceSlots":
		x.SpaceSlots = uint64(0)
	case "structs.structs.Fleet.airSlots":
		x.AirSlots = uint64(0)
	case "structs.structs.Fleet.landSlots":
		x.LandSlots = uint64(0)
	case "structs.structs.Fleet.waterSlots":
		x.WaterSlots = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Fleet"))
		}
		panic(fmt.Errorf("message structs.structs.Fleet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Fleet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "structs.structs.Fleet.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "structs.structs.Fleet.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "structs.structs.Fleet.locationType":
		value := x.LocationType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "structs.structs.Fleet.locationId":
		value := x.LocationId
		return protoreflect.ValueOfString(value)
	case "structs.structs.Fleet.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "structs.structs.Fleet.locationListForward":
		value := x.LocationListForward
		return protoreflect.ValueOfString(value)
	case "structs.structs.Fleet.locationListBackward":
		value := x.LocationListBackward
		return protoreflect.ValueOfString(value)
	case "structs.structs.Fleet.space":
		if len(x.Space) == 0 {
			return protoreflect.ValueOfList(&_Fleet_8_list{})
		}
		listValue := &_Fleet_8_list{list: &x.Space}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Fleet.air":
		if len(x.Air) == 0 {
			return protoreflect.ValueOfList(&_Fleet_9_list{})
		}
		listValue := &_Fleet_9_list{list: &x.Air}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Fleet.land":
		if len(x.Land) == 0 {
			return protoreflect.ValueOfList(&_Fleet_10_list{})
		}
		listValue := &_Fleet_10_list{list: &x.Land}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Fleet.water":
		if len(x.Water) == 0 {
			return protoreflect.ValueOfList(&_Fleet_11_list{})
		}
		listValue := &_Fleet_11_list{list: &x.Water}
		return protoreflect.ValueOfList(listValue)
	case "structs.structs.Fleet.spaceSlots":
		value := x.SpaceSlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Fleet.airSlots":
		value := x.AirSlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Fleet.landSlots":
		value := x.LandSlots
		return protoreflect.ValueOfUint64(value)
	case "structs.structs.Fleet.waterSlots":
		value := x.WaterSlots
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Fleet"))
		}
		panic(fmt.Errorf("message structs.structs.Fleet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Fleet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "structs.structs.Fleet.id":
		x.Id = value.Interface().(string)
	case "structs.structs.Fleet.owner":
		x.Owner = value.Interface().(string)
	case "structs.structs.Fleet.locationType":
		x.LocationType = (ObjectType)(value.Enum())
	case "structs.structs.Fleet.locationId":
		x.LocationId = value.Interface().(string)
	case "structs.structs.Fleet.status":
		x.Status = (FleetStatus)(value.Enum())
	case "structs.structs.Fleet.locationListForward":
		x.LocationListForward = value.Interface().(string)
	case "structs.structs.Fleet.locationListBackward":
		x.LocationListBackward = value.Interface().(string)
	case "structs.structs.Fleet.space":
		lv := value.List()
		clv := lv.(*_Fleet_8_list)
		x.Space = *clv.list
	case "structs.structs.Fleet.air":
		lv := value.List()
		clv := lv.(*_Fleet_9_list)
		x.Air = *clv.list
	case "structs.structs.Fleet.land":
		lv := value.List()
		clv := lv.(*_Fleet_10_list)
		x.Land = *clv.list
	case "structs.structs.Fleet.water":
		lv := value.List()
		clv := lv.(*_Fleet_11_list)
		x.Water = *clv.list
	case "structs.structs.Fleet.spaceSlots":
		x.SpaceSlots = value.Uint()
	case "structs.structs.Fleet.airSlots":
		x.AirSlots = value.Uint()
	case "structs.structs.Fleet.landSlots":
		x.LandSlots = value.Uint()
	case "structs.structs.Fleet.waterSlots":
		x.WaterSlots = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Fleet"))
		}
		panic(fmt.Errorf("message structs.structs.Fleet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Fleet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.Fleet.space":
		if x.Space == nil {
			x.Space = []string{}
		}
		value := &_Fleet_8_list{list: &x.Space}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Fleet.air":
		if x.Air == nil {
			x.Air = []string{}
		}
		value := &_Fleet_9_list{list: &x.Air}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Fleet.land":
		if x.Land == nil {
			x.Land = []string{}
		}
		value := &_Fleet_10_list{list: &x.Land}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Fleet.water":
		if x.Water == nil {
			x.Water = []string{}
		}
		value := &_Fleet_11_list{list: &x.Water}
		return protoreflect.ValueOfList(value)
	case "structs.structs.Fleet.id":
		panic(fmt.Errorf("field id of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.owner":
		panic(fmt.Errorf("field owner of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.locationType":
		panic(fmt.Errorf("field locationType of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.locationId":
		panic(fmt.Errorf("field locationId of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.status":
		panic(fmt.Errorf("field status of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.locationListForward":
		panic(fmt.Errorf("field locationListForward of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.locationListBackward":
		panic(fmt.Errorf("field locationListBackward of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.spaceSlots":
		panic(fmt.Errorf("field spaceSlots of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.airSlots":
		panic(fmt.Errorf("field airSlots of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.landSlots":
		panic(fmt.Errorf("field landSlots of message structs.structs.Fleet is not mutable"))
	case "structs.structs.Fleet.waterSlots":
		panic(fmt.Errorf("field waterSlots of message structs.structs.Fleet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Fleet"))
		}
		panic(fmt.Errorf("message structs.structs.Fleet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Fleet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.Fleet.id":
		return protoreflect.ValueOfString("")
	case "structs.structs.Fleet.owner":
		return protoreflect.ValueOfString("")
	case "structs.structs.Fleet.locationType":
		return protoreflect.ValueOfEnum(0)
	case "structs.structs.Fleet.locationId":
		return protoreflect.ValueOfString("")
	case "structs.structs.Fleet.status":
		return protoreflect.ValueOfEnum(0)
	case "structs.structs.Fleet.locationListForward":
		return protoreflect.ValueOfString("")
	case "structs.structs.Fleet.locationListBackward":
		return protoreflect.ValueOfString("")
	case "structs.structs.Fleet.space":
		list := []string{}
		return protoreflect.ValueOfList(&_Fleet_8_list{list: &list})
	case "structs.structs.Fleet.air":
		list := []string{}
		return protoreflect.ValueOfList(&_Fleet_9_list{list: &list})
	case "structs.structs.Fleet.land":
		list := []string{}
		return protoreflect.ValueOfList(&_Fleet_10_list{list: &list})
	case "structs.structs.Fleet.water":
		list := []string{}
		return protoreflect.ValueOfList(&_Fleet_11_list{list: &list})
	case "structs.structs.Fleet.spaceSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Fleet.airSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Fleet.landSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	case "structs.structs.Fleet.waterSlots":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.Fleet"))
		}
		panic(fmt.Errorf("message structs.structs.Fleet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Fleet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in structs.structs.Fleet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Fleet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Fleet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Fleet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Fleet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Fleet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LocationType != 0 {
			n += 1 + runtime.Sov(uint64(x.LocationType))
		}
		l = len(x.LocationId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.LocationListForward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LocationListBackward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Space) > 0 {
			for _, s := range x.Space {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Air) > 0 {
			for _, s := range x.Air {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Land) > 0 {
			for _, s := range x.Land {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Water) > 0 {
			for _, s := range x.Water {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.SpaceSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.SpaceSlots))
		}
		if x.AirSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.AirSlots))
		}
		if x.LandSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.LandSlots))
		}
		if x.WaterSlots != 0 {
			n += 1 + runtime.Sov(uint64(x.WaterSlots))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Fleet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.WaterSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WaterSlots))
			i--
			dAtA[i] = 0x78
		}
		if x.LandSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LandSlots))
			i--
			dAtA[i] = 0x70
		}
		if x.AirSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AirSlots))
			i--
			dAtA[i] = 0x68
		}
		if x.SpaceSlots != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SpaceSlots))
			i--
			dAtA[i] = 0x60
		}
		if len(x.Water) > 0 {
			for iNdEx := len(x.Water) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Water[iNdEx])
				copy(dAtA[i:], x.Water[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Water[iNdEx])))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.Land) > 0 {
			for iNdEx := len(x.Land) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Land[iNdEx])
				copy(dAtA[i:], x.Land[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Land[iNdEx])))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.Air) > 0 {
			for iNdEx := len(x.Air) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Air[iNdEx])
				copy(dAtA[i:], x.Air[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Air[iNdEx])))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.Space) > 0 {
			for iNdEx := len(x.Space) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Space[iNdEx])
				copy(dAtA[i:], x.Space[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Space[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.LocationListBackward) > 0 {
			i -= len(x.LocationListBackward)
			copy(dAtA[i:], x.LocationListBackward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LocationListBackward)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.LocationListForward) > 0 {
			i -= len(x.LocationListForward)
			copy(dAtA[i:], x.LocationListForward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LocationListForward)))
			i--
			dAtA[i] = 0x32
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if len(x.LocationId) > 0 {
			i -= len(x.LocationId)
			copy(dAtA[i:], x.LocationId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LocationId)))
			i--
			dAtA[i] = 0x22
		}
		if x.LocationType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LocationType))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Fleet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Fleet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Fleet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LocationType", wireType)
				}
				x.LocationType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LocationType |= ObjectType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LocationId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LocationId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= FleetStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LocationListForward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LocationListForward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LocationListBackward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LocationListBackward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Space = append(x.Space, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Air", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Air = append(x.Air, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Land", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Land = append(x.Land, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Water", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Water = append(x.Water, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SpaceSlots", wireType)
				}
				x.SpaceSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SpaceSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AirSlots", wireType)
				}
				x.AirSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AirSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LandSlots", wireType)
				}
				x.LandSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LandSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WaterSlots", wireType)
				}
				x.WaterSlots = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WaterSlots |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FleetAttributeRecord             protoreflect.MessageDescriptor
	fd_FleetAttributeRecord_attributeId protoreflect.FieldDescriptor
	fd_FleetAttributeRecord_value       protoreflect.FieldDescriptor
)

func init() {
	file_structs_structs_fleet_proto_init()
	md_FleetAttributeRecord = File_structs_structs_fleet_proto.Messages().ByName("FleetAttributeRecord")
	fd_FleetAttributeRecord_attributeId = md_FleetAttributeRecord.Fields().ByName("attributeId")
	fd_FleetAttributeRecord_value = md_FleetAttributeRecord.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_FleetAttributeRecord)(nil)

type fastReflection_FleetAttributeRecord FleetAttributeRecord

func (x *FleetAttributeRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FleetAttributeRecord)(x)
}

func (x *FleetAttributeRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_structs_structs_fleet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FleetAttributeRecord_messageType fastReflection_FleetAttributeRecord_messageType
var _ protoreflect.MessageType = fastReflection_FleetAttributeRecord_messageType{}

type fastReflection_FleetAttributeRecord_messageType struct{}

func (x fastReflection_FleetAttributeRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FleetAttributeRecord)(nil)
}
func (x fastReflection_FleetAttributeRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_FleetAttributeRecord)
}
func (x fastReflection_FleetAttributeRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FleetAttributeRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FleetAttributeRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_FleetAttributeRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FleetAttributeRecord) Type() protoreflect.MessageType {
	return _fastReflection_FleetAttributeRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FleetAttributeRecord) New() protoreflect.Message {
	return new(fastReflection_FleetAttributeRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FleetAttributeRecord) Interface() protoreflect.ProtoMessage {
	return (*FleetAttributeRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FleetAttributeRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AttributeId != "" {
		value := protoreflect.ValueOfString(x.AttributeId)
		if !f(fd_FleetAttributeRecord_attributeId, value) {
			return
		}
	}
	if x.Value != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Value)
		if !f(fd_FleetAttributeRecord_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FleetAttributeRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "structs.structs.FleetAttributeRecord.attributeId":
		return x.AttributeId != ""
	case "structs.structs.FleetAttributeRecord.value":
		return x.Value != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.FleetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.FleetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FleetAttributeRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "structs.structs.FleetAttributeRecord.attributeId":
		x.AttributeId = ""
	case "structs.structs.FleetAttributeRecord.value":
		x.Value = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.FleetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.FleetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FleetAttributeRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "structs.structs.FleetAttributeRecord.attributeId":
		value := x.AttributeId
		return protoreflect.ValueOfString(value)
	case "structs.structs.FleetAttributeRecord.value":
		value := x.Value
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.FleetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.FleetAttributeRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FleetAttributeRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "structs.structs.FleetAttributeRecord.attributeId":
		x.AttributeId = value.Interface().(string)
	case "structs.structs.FleetAttributeRecord.value":
		x.Value = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.FleetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.FleetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FleetAttributeRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.FleetAttributeRecord.attributeId":
		panic(fmt.Errorf("field attributeId of message structs.structs.FleetAttributeRecord is not mutable"))
	case "structs.structs.FleetAttributeRecord.value":
		panic(fmt.Errorf("field value of message structs.structs.FleetAttributeRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.FleetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.FleetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FleetAttributeRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "structs.structs.FleetAttributeRecord.attributeId":
		return protoreflect.ValueOfString("")
	case "structs.structs.FleetAttributeRecord.value":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: structs.structs.FleetAttributeRecord"))
		}
		panic(fmt.Errorf("message structs.structs.FleetAttributeRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FleetAttributeRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in structs.structs.FleetAttributeRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FleetAttributeRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FleetAttributeRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FleetAttributeRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FleetAttributeRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FleetAttributeRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AttributeId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Value != 0 {
			n += 1 + runtime.Sov(uint64(x.Value))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FleetAttributeRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Value != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Value))
			i--
			dAtA[i] = 0x10
		}
		if len(x.AttributeId) > 0 {
			i -= len(x.AttributeId)
			copy(dAtA[i:], x.AttributeId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AttributeId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FleetAttributeRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FleetAttributeRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FleetAttributeRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AttributeId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AttributeId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				x.Value = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Value |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: structs/structs/fleet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Fleet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner                string      `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	LocationType         ObjectType  `protobuf:"varint,3,opt,name=locationType,proto3,enum=structs.structs.ObjectType" json:"locationType,omitempty"`
	LocationId           string      `protobuf:"bytes,4,opt,name=locationId,proto3" json:"locationId,omitempty"`
	Status               FleetStatus `protobuf:"varint,5,opt,name=status,proto3,enum=structs.structs.FleetStatus" json:"status,omitempty"`
	LocationListForward  string      `protobuf:"bytes,6,opt,name=locationListForward,proto3" json:"locationListForward,omitempty"`   // Towards Planet
	LocationListBackward string      `protobuf:"bytes,7,opt,name=locationListBackward,proto3" json:"locationListBackward,omitempty"` // Towards End of List
	Space                []string    `protobuf:"bytes,8,rep,name=space,proto3" json:"space,omitempty"`
	Air                  []string    `protobuf:"bytes,9,rep,name=air,proto3" json:"air,omitempty"`
	Land                 []string    `protobuf:"bytes,10,rep,name=land,proto3" json:"land,omitempty"`
	Water                []string    `protobuf:"bytes,11,rep,name=water,proto3" json:"water,omitempty"`
	SpaceSlots           uint64      `protobuf:"varint,12,opt,name=spaceSlots,proto3" json:"spaceSlots,omitempty"`
	AirSlots             uint64      `protobuf:"varint,13,opt,name=airSlots,proto3" json:"airSlots,omitempty"`
	LandSlots            uint64      `protobuf:"varint,14,opt,name=landSlots,proto3" json:"landSlots,omitempty"`
	WaterSlots           uint64      `protobuf:"varint,15,opt,name=waterSlots,proto3" json:"waterSlots,omitempty"`
}

func (x *Fleet) Reset() {
	*x = Fleet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_structs_fleet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fleet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fleet) ProtoMessage() {}

// Deprecated: Use Fleet.ProtoReflect.Descriptor instead.
func (*Fleet) Descriptor() ([]byte, []int) {
	return file_structs_structs_fleet_proto_rawDescGZIP(), []int{0}
}

func (x *Fleet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fleet) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Fleet) GetLocationType() ObjectType {
	if x != nil {
		return x.LocationType
	}
	return ObjectType_guild
}

func (x *Fleet) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *Fleet) GetStatus() FleetStatus {
	if x != nil {
		return x.Status
	}
	return FleetStatus_onStation
}

func (x *Fleet) GetLocationListForward() string {
	if x != nil {
		return x.LocationListForward
	}
	return ""
}

func (x *Fleet) GetLocationListBackward() string {
	if x != nil {
		return x.LocationListBackward
	}
	return ""
}

func (x *Fleet) GetSpace() []string {
	if x != nil {
		return x.Space
	}
	return nil
}

func (x *Fleet) GetAir() []string {
	if x != nil {
		return x.Air
	}
	return nil
}

func (x *Fleet) GetLand() []string {
	if x != nil {
		return x.Land
	}
	return nil
}

func (x *Fleet) GetWater() []string {
	if x != nil {
		return x.Water
	}
	return nil
}

func (x *Fleet) GetSpaceSlots() uint64 {
	if x != nil {
		return x.SpaceSlots
	}
	return 0
}

func (x *Fleet) GetAirSlots() uint64 {
	if x != nil {
		return x.AirSlots
	}
	return 0
}

func (x *Fleet) GetLandSlots() uint64 {
	if x != nil {
		return x.LandSlots
	}
	return 0
}

func (x *Fleet) GetWaterSlots() uint64 {
	if x != nil {
		return x.WaterSlots
	}
	return 0
}

type FleetAttributeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeId string `protobuf:"bytes,1,opt,name=attributeId,proto3" json:"attributeId,omitempty"`
	Value       uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FleetAttributeRecord) Reset() {
	*x = FleetAttributeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structs_structs_fleet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FleetAttributeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FleetAttributeRecord) ProtoMessage() {}

// Deprecated: Use FleetAttributeRecord.ProtoReflect.Descriptor instead.
func (*FleetAttributeRecord) Descriptor() ([]byte, []int) {
	return file_structs_structs_fleet_proto_rawDescGZIP(), []int{1}
}

func (x *FleetAttributeRecord) GetAttributeId() string {
	if x != nil {
		return x.AttributeId
	}
	return ""
}

func (x *FleetAttributeRecord) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_structs_structs_fleet_proto protoreflect.FileDescriptor

var file_structs_structs_fleet_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x1a, 0x1a,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x03,
	0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x69, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x61, 0x69, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x6e,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x14, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xa0, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x42, 0x0a,
	0x46, 0x6c, 0x65, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x20, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xa2, 0x02,
	0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xca, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0xe2, 0x02, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x5c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x3a, 0x3a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_structs_structs_fleet_proto_rawDescOnce sync.Once
	file_structs_structs_fleet_proto_rawDescData = file_structs_structs_fleet_proto_rawDesc
)

func file_structs_structs_fleet_proto_rawDescGZIP() []byte {
	file_structs_structs_fleet_proto_rawDescOnce.Do(func() {
		file_structs_structs_fleet_proto_rawDescData = protoimpl.X.CompressGZIP(file_structs_structs_fleet_proto_rawDescData)
	})
	return file_structs_structs_fleet_proto_rawDescData
}

var file_structs_structs_fleet_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_structs_structs_fleet_proto_goTypes = []interface{}{
	(*Fleet)(nil),                // 0: structs.structs.Fleet
	(*FleetAttributeRecord)(nil), // 1: structs.structs.FleetAttributeRecord
	(ObjectType)(0),              // 2: structs.structs.objectType
	(FleetStatus)(0),             // 3: structs.structs.fleetStatus
}
var file_structs_structs_fleet_proto_depIdxs = []int32{
	2, // 0: structs.structs.Fleet.locationType:type_name -> structs.structs.objectType
	3, // 1: structs.structs.Fleet.status:type_name -> structs.structs.fleetStatus
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_structs_structs_fleet_proto_init() }
func file_structs_structs_fleet_proto_init() {
	if File_structs_structs_fleet_proto != nil {
		return
	}
	file_structs_structs_keys_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_structs_structs_fleet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fleet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structs_structs_fleet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FleetAttributeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structs_structs_fleet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structs_structs_fleet_proto_goTypes,
		DependencyIndexes: file_structs_structs_fleet_proto_depIdxs,
		MessageInfos:      file_structs_structs_fleet_proto_msgTypes,
	}.Build()
	File_structs_structs_fleet_proto = out.File
	file_structs_structs_fleet_proto_rawDesc = nil
	file_structs_structs_fleet_proto_goTypes = nil
	file_structs_structs_fleet_proto_depIdxs = nil
}
