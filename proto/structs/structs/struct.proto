syntax = "proto3";

package structs.structs;

option go_package = "structs/x/structs/types";
import "structs/structs/keys.proto";
import "amino/amino.proto";

message Struct {
  // What it is
  string id         = 1;
  uint64 index      = 2;
  uint64 type       = 3;

  // Who is it
  string creator  = 4;
  string owner    = 5;

  // Where it is
  objectType  locationType    = 6 [(amino.dont_omitempty) = true];
  string      locationId      = 7;
  ambit       operatingAmbit  = 8 [(amino.dont_omitempty) = true];
  uint64      slot            = 9;
}

message StructType {
  uint64  id    = 1;
  string  type  = 2; // TODO Deprecating... Will match with Class for now.

  // New Struct Type Identity Details
  string  class = 65;
  string  classAbbreviation = 66;
  string  defaultCosmeticModelNumber = 67;
  string  defaultCosmeticName = 68;

  // Fundamental attributes
  objectType      category        = 3 [(amino.dont_omitempty) = true]; // Planet or Fleet
  uint64          buildLimit      = 4; // How many of this Struct Type a player can have
  uint64          buildDifficulty = 5; // How much compute is needed to build
  uint64          buildDraw       = 6; // How much energy the Struct consumes during building
  uint64          maxHealth       = 7; // How much damage can it take
  uint64          passiveDraw     = 8; // How much energy the Struct consumes when active

  // Details about location and movement
  // TODO move category to here and make it flag based too
  // Replicate what was done for ambits flags
  uint64  possibleAmbit   = 9;  // Where can it be built and moved to. Usually only a single ambit but some Structs have multiple possible (i.e. Command Ship)
  bool    movable         = 10;  // Can the Struct change ambit?
  bool    slotBound       = 11; // Does the Struct occupy a slot. Trying to find something to help set Command Ships apart

  // Primary Weapon Configuration
  techActiveWeaponry  primaryWeapon                 = 12 [(amino.dont_omitempty) = true];
  techWeaponControl   primaryWeaponControl          = 13 [(amino.dont_omitempty) = true];
  uint64              primaryWeaponCharge           = 14;
  uint64              primaryWeaponAmbits           = 15;
  uint64              primaryWeaponTargets          = 16;
  uint64              primaryWeaponShots            = 17;
  uint64              primaryWeaponDamage           = 18;
  bool                primaryWeaponBlockable        = 19;
  bool                primaryWeaponCounterable      = 20;
  uint64              primaryWeaponRecoilDamage     = 21;
  uint64              primaryWeaponShotSuccessRateNumerator   = 22;
  uint64              primaryWeaponShotSuccessRateDenominator = 23;

  // Secondary Weapon Configuration
  techActiveWeaponry  secondaryWeapon                 = 24 [(amino.dont_omitempty) = true];
  techWeaponControl   secondaryWeaponControl          = 25 [(amino.dont_omitempty) = true];
  uint64              secondaryWeaponCharge           = 26;
  uint64              secondaryWeaponAmbits           = 27;
  uint64              secondaryWeaponTargets          = 28;
  uint64              secondaryWeaponShots            = 29;
  uint64              secondaryWeaponDamage           = 30;
  bool                secondaryWeaponBlockable        = 31;
  bool                secondaryWeaponCounterable      = 32;
  uint64              secondaryWeaponRecoilDamage     = 33;
  uint64              secondaryWeaponShotSuccessRateNumerator   = 34;
  uint64              secondaryWeaponShotSuccessRateDenominator = 35;

  // Tech Tree Features
  techPassiveWeaponry               passiveWeaponry             = 36 [(amino.dont_omitempty) = true];

  techUnitDefenses                  unitDefenses                = 37 [(amino.dont_omitempty) = true];
  techOreReserveDefenses            oreReserveDefenses          = 38 [(amino.dont_omitempty) = true];
  techPlanetaryDefenses             planetaryDefenses           = 39 [(amino.dont_omitempty) = true];

  techPlanetaryMining               planetaryMining             = 40 [(amino.dont_omitempty) = true];
  techPlanetaryRefineries           planetaryRefinery           = 41 [(amino.dont_omitempty) = true];

  techPowerGeneration               powerGeneration             = 42 [(amino.dont_omitempty) = true];

  // Charge uses
  uint64 activateCharge         = 43;
  uint64 buildCharge            = 44;
  uint64 defendChangeCharge     = 45;
  uint64 moveCharge             = 46;
  uint64 oreMiningCharge        = 47;
  uint64 oreRefiningCharge      = 48;
  uint64 stealthActivateCharge  = 49;


  // Tech Tree Attributes
  uint64 attackReduction              = 50; // For Defensive Cannon
  bool   attackCounterable            = 51; // For Indirect Combat Module
  bool   stealthSystems               = 52; // For Stealth Mode

  uint64 counterAttack                = 53; // Counter
  uint64 counterAttackSameAmbit       = 54; // Advanced Counter

  uint64 postDestructionDamage        = 55;

  uint64 generatingRate               = 56; // Power Generation

  uint64 planetaryShieldContribution  = 57; // The shield that is added to the Planet

  uint64 oreMiningDifficulty          = 58;
  uint64 oreRefiningDifficulty        = 59;

  /*  Storage Not in MVP

  techStorageFacilities storageFacility  = x;
  uint64 storageChangeCharge             = x;

  uint64 storageSpace                 = x;
  uint64 storageAir                   = x;
  uint64 storageLand                  = x;
  uint64 storageWater                 = x;
  */

  uint64 unguidedDefensiveSuccessRateNumerator    = 60;
  uint64 unguidedDefensiveSuccessRateDenominator  = 61;

  uint64 guidedDefensiveSuccessRateNumerator      = 62;
  uint64 guidedDefensiveSuccessRateDenominator    = 63;

  // I wish this was higher up in a different area of the definition
  // but I really don't feel like renumbering this entire thing again.
  bool triggerRaidDefeatByDestruction = 64;
}

message StructDefender {
  string  protectedStructId      = 1;
  string  defendingStructId      = 2;
}

message StructDefenders {
  repeated StructDefender structDefenders = 1;
}


message StructAttributeRecord {
  string attributeId = 1;
  uint64 value = 2;
}

message StructAttributes {
  uint64  health                      = 1;
  uint64  status                      = 2;

  uint64  blockStartBuild             = 3;
  uint64  blockStartOreMine           = 4;
  uint64  blockStartOreRefine         = 5;

  uint64  protectedStructIndex        = 6;

  uint64  typeCount                   = 7;

  bool isMaterialized                 = 8;
  bool isBuilt                        = 9;
  bool isOnline                       = 10;
  bool isHidden                       = 11;
  bool isDestroyed                    = 12;
  bool isLocked                       = 13;

}



/*

Defined Directly in Go instead of as a proto.
Never written to or recalled from a keeper, so this shouldn't be an issue.

message StructCache {
  string structId         = 1;

  bool  structureLoaded   = 2;
  Struct structure        = 3;

  bool structTypeLoaded   = 4;
  StructType structType   = 5;

  bool healthLoaded       = 6;
  uint64 health           = 7;

  string  statusAttributeId  = 8;
  bool    statusLoaded       = 9;
  uint64  status             = 10;

  bool    blockStartBuildLoaded = 11;
  uint64  blockStartBuild       = 12;

  bool    blockStartOreMineLoaded = 13;
  uint64  blockStarOreMine        = 14;

  bool    blockStartOreRefineLoaded = 15;
  uint64  blockStartOreRefine       = 16;

  bool    protectedStructIndexLoaded  = 17;
  uint64  protectedStructIndex        = 18;

}

*/


