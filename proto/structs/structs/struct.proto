syntax = "proto3";

package structs.structs;

option go_package = "structs/x/structs/types";
import "structs/structs/keys.proto";

message Struct {
  // What it is
  string id         = 1;
  uint64 index      = 2;
  uint64 type       = 3;

  // Who is it
  string creator  = 4;
  string owner    = 5;

  // Where it is
  objectType  locationType    = 6;
  string      locationId      = 7;
  ambit       operatingAmbit  = 8;
  uint64      slot            = 9;
}

message StructType {
  uint64  id    = 1;
  string  type  = 2;

  // Fundamental attributes
  objectType      category        = 3; // Planet or Fleet
  uint64           buildDifficulty = 4; // How much compute is needed to build
  uint64          buildDraw       = 5; // How much energy the Struct consumes during building
  uint64          maxHealth       = 6; // How much damage can it take
  uint64          passiveDraw     = 7; // How much energy the Struct consumes when active

  // Details about location and movement
  // TODO move category to here and make it flag based too
  // Replicate what was done for ambits flags
  uint64  possibleAmbit   = 8;  // Where can it be built and moved to. Usually only a single ambit but some Structs have multiple possible (i.e. Command Ship)
  bool    movable         = 9;  // Can the Struct change ambit?
  bool    slotBound       = 10; // Does the Struct occupy a slot. Trying to find something to help set Command Ships apart

  // Primary Weapon Configuration
  techActiveWeaponry  primaryWeapon                 = 11;
  techWeaponControl   primaryWeaponControl          = 12;
  uint64              primaryWeaponCharge           = 13;
  uint64              primaryWeaponTargets          = 14;
  uint64              primaryWeaponShots            = 15;
  uint64              primaryWeaponDamage           = 16;
  bool                primaryWeaponBlockable        = 17;
  bool                primaryWeaponCounterable      = 18;
  uint64              primaryWeaponRecoilDamage     = 19;
  uint64              primaryWeaponShotSuccessRateNumerator   = 20;
  uint64              primaryWeaponShotSuccessRateDenominator = 21;

  // Secondary Weapon Configuration
  techActiveWeaponry  secondaryWeapon                 = 22;
  techWeaponControl   secondaryWeaponControl          = 23;
  uint64              secondaryWeaponCharge           = 24;
  uint64              secondaryWeaponTargets          = 25;
  uint64              secondaryWeaponShots            = 26;
  uint64              secondaryWeaponDamage           = 27;
  bool                secondaryWeaponBlockable        = 28;
  bool                secondaryWeaponCounterable      = 29;
  uint64              secondaryWeaponRecoilDamage     = 30;
  uint64              secondaryWeaponShotSuccessRateNumerator   = 31;
  uint64              secondaryWeaponShotSuccessRateDenominator = 32;

  // Tech Tree Features
  techPassiveWeaponry               passiveWeaponry             = 33;

  techUnitDefenses                  unitDefenses                = 34;
  techOreReserveDefenses            oreReserveDefenses          = 35;
  techPlanetaryDefenses             planetaryDefenses           = 36;

  techPlanetaryMining               planetaryMining             = 37;
  techPlanetaryRefineries           planetaryRefinery           = 38;

  techPowerGeneration               powerGeneration             = 39;

  // Charge uses
  uint64 activateCharge         = 40;
  uint64 buildCharge            = 41;
  uint64 defendChangeCharge     = 42;
  uint64 moveCharge             = 43;
  uint64 oreMiningCharge        = 44;
  uint64 oreRefiningCharge      = 45;
  uint64 stealthActivateCharge  = 46;


  // Tech Tree Attributes
  uint64 attackReduction              = 47; // For Defensive Cannon
  bool   attackCounterable            = 48; // For Indirect Combat Module
  bool   stealthSystems               = 49; // For Stealth Mode

  uint64 counterAttack                = 50; // Counter
  uint64 counterAttackSameAmbit       = 51; // Advanced Counter

  uint64 postDestructionDamage        = 52;

  uint64 generatingRate               = 53; // Power Generation

  uint64 planetaryShieldContribution  = 54; // The shield that is added to the Planet

  uint64 oreMiningDifficulty          = 55;
  uint64 oreRefiningDifficulty        = 56;

  /*  Storage Not in MVP

  techStorageFacilities storageFacility  = x;
  uint64 storageChangeCharge             = x;

  uint64 storageSpace                 = x;
  uint64 storageAir                   = x;
  uint64 storageLand                  = x;
  uint64 storageWater                 = x;
  */

  uint64 unguidedDefensiveSuccessRateNumerator    = 57;
  uint64 unguidedDefensiveSuccessRateDenominator  = 58;

  uint64 guidedDefensiveSuccessRateNumerator      = 59;
  uint64 guidedDefensiveSuccessRateDenominator    = 60;
}

message StructDefender {
  string  protectedStructId      = 1;
  string  defendingStructId      = 2;

  objectType  locationType       = 3;
  string      locationId         = 4;
  ambit       operatingAmbit     = 5;

  uint64  counterAttack          = 6;
  uint64  counterAttackSameAmbit = 7;
}

message StructAttributeRecord {
  string attributeId = 1;
  uint64 value = 2;
}