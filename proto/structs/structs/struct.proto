syntax = "proto3";

package structs.structs;

option go_package = "structs/x/structs/types";
import "structs/structs/keys.proto";

message Struct {
  // What it is
  string id         = 1;
  uint64 index      = 2;
  uint64 type       = 3;

  // Who is it
  string creator  = 4;
  string owner    = 5;

  // Where it is
  string  locationId      = 6;
  ambit   operatingAmbit  = 7;
  uint64  slot            = 8;
}

message StructType {
  uint64  id    = 1;
  string  type  = 2;

  // Fundamental attributes
  objectType      category        = 3; // Planet or Fleet
  uint64          buildDifficulty = 4; // How much compute is needed to build
  uint64          buildDraw       = 5; // How much energy the Struct consumes during building
  uint64          maxHealth       = 6; // How much damage can it take
  uint64          passiveDraw     = 7; // How much energy the Struct consumes when active
  uint64          possibleAmbit   = 8; // Where can it be built and moved to. Usually only a single ambit but some Structs have multiple possible (i.e. Command Ship)

  // Primary Weapon Configuration
  techActiveWeaponry  primaryWeapon                 = 9;
  techWeaponControl   primaryWeaponControl          = 10;
  uint64              primaryWeaponCharge           = 11;
  uint64              primaryWeaponTargets          = 12;
  uint64              primaryWeaponShots            = 13;
  uint64              primaryWeaponDamage           = 14;
  bool                primaryWeaponBlockable        = 15;
  bool                primaryWeaponCounterable      = 16;
  uint64              primaryWeaponRecoilDamage     = 17;
  uint64              primaryWeaponShotSuccessRateNumerator   = 18;
  uint64              primaryWeaponShotSuccessRateDenominator = 19;

  // Secondary Weapon Configuration
  techActiveWeaponry  secondaryWeapon                 = 20;
  techWeaponControl   secondaryWeaponControl          = 21;
  uint64              secondaryWeaponCharge           = 22;
  uint64              secondaryWeaponTargets          = 23;
  uint64              secondaryWeaponShots            = 24;
  uint64              secondaryWeaponDamage           = 25;
  bool                secondaryWeaponBlockable        = 26;
  bool                secondaryWeaponCounterable      = 27;
  uint64              secondaryWeaponRecoilDamage     = 28;
  uint64              secondaryWeaponShotSuccessRateNumerator   = 29;
  uint64              secondaryWeaponShotSuccessRateDenominator = 30;

  // Tech Tree Features
  techPassiveWeaponry               passiveWeaponry             = 31;

  techUnitDefenses                  unitDefenses                = 32;
  techOreReserveDefenses            oreReserveDefenses          = 33;
  techPlanetaryDefenses             planetaryDefenses           = 34;

  techPlanetaryMining               planetaryMining             = 35;
  techPlanetaryRefineries           planetaryRefinery           = 36;

  techPowerGeneration               powerGeneration             = 37;

  // Charge uses
  uint64 activateCharge             = 38;
  uint64 buildCharge                = 39;
  uint64 defendChangeCharge         = 40;
  uint64 moveCharge                 = 41;
  uint64 oreMiningActivateCharge    = 42;
  uint64 oreRefiningActivateCharge  = 43;
  uint64 stealthActivateCharge      = 44;


  // Tech Tree Attributes
  uint64 attackReduction              = 45; // For Defensive Cannon
  bool   attackCounterable            = 46; // For Indirect Combat Module
  bool   stealthSystems               = 47; // For Stealth Mode

  uint64 counterAttack                = 48; // Counter
  uint64 counterAttackSameAmbit       = 49; // Advanced Counter

  uint64 postDestructionDamage        = 50;

  uint64 generatingRate               = 51; // Power Generation

  uint64 planetaryShieldContribution  = 52; // The shield that is added to the Planet

  /*  Storage Not in MVP

  techStorageFacilities storageFacility  = x;
  uint64 storageChangeCharge             = x;

  uint64 storageSpace                 = x;
  uint64 storageAir                   = x;
  uint64 storageLand                  = x;
  uint64 storageWater                 = x;
  */

  uint64 unguidedDefensiveSuccessRateNumerator    = 53;
  uint64 unguidedDefensiveSuccessRateDenominator  = 54;

  uint64 guidedDefensiveSuccessRateNumerator      = 55;
  uint64 guidedDefensiveSuccessRateDenominator    = 56;
}

message StructDefender {
  string  protectedStructId      = 1;
  string  defendingStructId      = 2;

  string  locationId             = 3;
  ambit   operatingAmbit         = 4;

  uint64  counterAttack          = 5;
  uint64  counterAttackSameAmbit = 6;
}

message StructAttributeRecord {
  string attributeId = 1;
  uint64 value = 2;
}