syntax = "proto3";

package structs.structs;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "structs/structs/params.proto";

import "structs/structs/address.proto";
import "structs/structs/allocation.proto";
import "structs/structs/fleet.proto";
import "structs/structs/grid.proto";
import "structs/structs/guild.proto";
import "structs/structs/infusion.proto";
import "structs/structs/keys.proto";
import "structs/structs/permission.proto";
import "structs/structs/player.proto";
import "structs/structs/planet.proto";
import "structs/structs/reactor.proto";
import "structs/structs/struct.proto";
import "structs/structs/substation.proto";

option go_package = "structs/x/structs/types";

// Query defines the gRPC querier service.
service Query {
  rpc GetBlockHeight (QueryBlockHeight) returns (QueryBlockHeightResponse) {
    option (google.api.http).get = "/blockheight";
  }

  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/structs/structs/params";
  }

  // Queries for Addresses.
  rpc Address    (QueryGetAddressRequest) returns (QueryAddressResponse) {
    option (google.api.http).get = "/structs/address/{address}";
  }

  rpc AddressAll (QueryAllAddressRequest) returns (QueryAllAddressResponse) {
    option (google.api.http).get = "/structs/address";
  }

  rpc AddressAllByPlayer (QueryAllAddressByPlayerRequest) returns (QueryAllAddressResponse) {
    option (google.api.http).get = "/structs/address_by_player/{playerId}";
  }

  // Queries a list of Allocation items.
  rpc Allocation    (QueryGetAllocationRequest) returns (QueryGetAllocationResponse) {
    option (google.api.http).get = "/structs/allocation/{id}";
  }

  rpc AllocationAll (QueryAllAllocationRequest) returns (QueryAllAllocationResponse) {
    option (google.api.http).get = "/structs/allocation";
  }

  rpc AllocationAllBySource (QueryAllAllocationBySourceRequest) returns (QueryAllAllocationResponse) {
    option (google.api.http).get = "/structs/allocation_by_source/{sourceId}";
  }

  rpc AllocationAllByDestination (QueryAllAllocationByDestinationRequest) returns (QueryAllAllocationResponse) {
    option (google.api.http).get = "/structs/allocation_by_destination/{destinationId}";
  }

  // Queries a list of Fleet items.
  rpc Fleet (QueryGetFleetRequest) returns (QueryGetFleetResponse) {
    option (google.api.http).get = "/structs/fleet/{id}";
  }

  rpc FleetByIndex (QueryGetFleetByIndexRequest) returns (QueryGetFleetResponse) {
    option (google.api.http).get = "/structs/fleet_by_index/{index}";
  }

  rpc FleetAll (QueryAllFleetRequest) returns (QueryAllFleetResponse) {
    option (google.api.http).get = "/structs/fleet";
  }

  // Queries a specific Grid details
  rpc Grid (QueryGetGridRequest) returns (QueryGetGridResponse) {
    option (google.api.http).get = "/structs/grid/{attributeId}";
  }

  // Queries a list of all Grid details
  rpc GridAll (QueryAllGridRequest) returns (QueryAllGridResponse) {
    option (google.api.http).get = "/structs/grid";
  }

  // Queries a list of Guild items.
  rpc Guild    (QueryGetGuildRequest) returns (QueryGetGuildResponse) {
    option (google.api.http).get = "/structs/guild/{id}";
  }

  rpc GuildAll (QueryAllGuildRequest) returns (QueryAllGuildResponse) {
    option (google.api.http).get = "/structs/guild";
  }

  rpc GuildMembershipApplication (QueryGetGuildMembershipApplicationRequest) returns (QueryGetGuildMembershipApplicationResponse) {
    option (google.api.http).get = "/structs/guild_membership_application/{guildId}/{playerId}";
  }

  rpc GuildMembershipApplicationAll (QueryAllGuildMembershipApplicationRequest) returns (QueryAllGuildMembershipApplicationResponse) {
    option (google.api.http).get = "/structs/guild_membership_application";
  }

  // Queries a list of Infusions.
  rpc Infusion    (QueryGetInfusionRequest) returns (QueryGetInfusionResponse) {
    option (google.api.http).get = "/structs/infusion/{destinationId}/{address}";
  }

  rpc InfusionAll (QueryAllInfusionRequest) returns (QueryAllInfusionResponse) {
    option (google.api.http).get = "/structs/infusion";
  }

  rpc InfusionAllByDestination (QueryAllInfusionByDestinationRequest) returns (QueryAllInfusionResponse) {
    option (google.api.http).get = "/structs/infusion_by_destination/{destinationId}";
  }

  // Queries a specific Permission
  rpc Permission (QueryGetPermissionRequest) returns (QueryGetPermissionResponse) {
    option (google.api.http).get = "/structs/permission/{permissionId}";
  }

  // Queries a list of Permissions based on Object
  rpc PermissionByObject (QueryAllPermissionByObjectRequest) returns (QueryAllPermissionResponse) {
    option (google.api.http).get = "/structs/permission/object/{objectId}";
  }

  // Queries a list of Permissions based on the Player with the permissions
  rpc PermissionByPlayer   (QueryAllPermissionByPlayerRequest) returns (QueryAllPermissionResponse) {
    option (google.api.http).get = "/structs/permission/player/{playerId}";
  }

  // Queries a list of all Permissions
  rpc PermissionAll (QueryAllPermissionRequest) returns (QueryAllPermissionResponse) {
    option (google.api.http).get = "/structs/permission";
  }

  // Queries a list of Player items.
  rpc Player    (QueryGetPlayerRequest) returns (QueryGetPlayerResponse) {
    option (google.api.http).get = "/structs/player/{id}";
  }

  rpc PlayerAll (QueryAllPlayerRequest) returns (QueryAllPlayerResponse) {
    option (google.api.http).get = "/structs/player";
  }


  // Queries a list of Planet items.
  rpc Planet    (QueryGetPlanetRequest) returns (QueryGetPlanetResponse) {
    option (google.api.http).get = "/structs/planet/{id}";
  }

  rpc PlanetAll (QueryAllPlanetRequest) returns (QueryAllPlanetResponse) {
    option (google.api.http).get = "/structs/planet";
  }

  rpc PlanetAllByPlayer (QueryAllPlanetByPlayerRequest) returns (QueryAllPlanetResponse) {
    option (google.api.http).get = "/structs/planet_by_player/{playerId}";
  }

  rpc PlanetAttribute    (QueryGetPlanetAttributeRequest) returns (QueryGetPlanetAttributeResponse) {
    option (google.api.http).get = "/structs/planet_attribute/{planetId}/{attributeType}";
  }

  // Queries a list of all Planet Attributes
  rpc PlanetAttributeAll (QueryAllPlanetAttributeRequest) returns (QueryAllPlanetAttributeResponse) {
    option (google.api.http).get = "/structs/planet_attribute";
  }

  // Queries a list of Reactor items.
  rpc Reactor    (QueryGetReactorRequest) returns (QueryGetReactorResponse) {
    option (google.api.http).get = "/structs/reactor/{id}";
  }

  rpc ReactorAll (QueryAllReactorRequest) returns (QueryAllReactorResponse) {
    option (google.api.http).get = "/structs/reactor";
  }

  // Queries a list of Structs items.
  rpc Struct    (QueryGetStructRequest) returns (QueryGetStructResponse) {
    option (google.api.http).get = "/structs/struct/{id}";
  }

  rpc StructAll (QueryAllStructRequest) returns (QueryAllStructResponse) {
    option (google.api.http).get = "/structs/struct";
  }

  rpc StructAttribute    (QueryGetStructAttributeRequest) returns (QueryGetStructAttributeResponse) {
    option (google.api.http).get = "/structs/struct_attribute/{structId}/{attributeType}";
  }

  // Queries a list of all Struct Attributes
  rpc StructAttributeAll (QueryAllStructAttributeRequest) returns (QueryAllStructAttributeResponse) {
    option (google.api.http).get = "/structs/struct_attribute";
  }

  // Queries a list of Struct Types items.
  rpc StructType    (QueryGetStructTypeRequest) returns (QueryGetStructTypeResponse) {
    option (google.api.http).get = "/structs/struct_type/{id}";
  }

  rpc StructTypeAll (QueryAllStructTypeRequest) returns (QueryAllStructTypeResponse) {
    option (google.api.http).get = "/structs/struct_type";
  }

  // Queries a list of Substation items.
  rpc Substation    (QueryGetSubstationRequest) returns (QueryGetSubstationResponse) {
    option (google.api.http).get = "/structs/substation/{id}";
  }

  rpc SubstationAll (QueryAllSubstationRequest) returns (QueryAllSubstationResponse) {
    option (google.api.http).get = "/structs/substation";
  }

  rpc ValidateSignature (QueryValidateSignatureRequest) returns (QueryValidateSignatureResponse) {
    option (google.api.http).get = "/structs/validate_signature/{address}/{proofPubKey}/{proofSignature}/{message}";
  }

}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}


message QueryBlockHeight {}

message QueryBlockHeightResponse { uint64 blockHeight = 1;}


message QueryGetAddressRequest {
  string address = 1;
}

message QueryAllAddressByPlayerRequest {
  string playerId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllAddressRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAddressResponse {
  string address          = 1;
  string playerId         = 2;
  uint64 permissions      = 3;
}

message QueryAllAddressResponse {
  repeated QueryAddressResponse address = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetAllocationRequest {
  string id = 1;
}

message QueryGetAllocationResponse {
  Allocation Allocation = 1 [(gogoproto.nullable) = false];
  GridAttributes gridAttributes = 2;
}

message QueryAllAllocationRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAllocationBySourceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string sourceId = 2;
}
message QueryAllAllocationByDestinationRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string destinationId = 2;
}

message QueryAllAllocationResponse {
  repeated Allocation Allocation = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
  repeated uint64  status     = 3;
}


message QueryGetFleetRequest {
  string id = 1;
}

message QueryGetFleetResponse {
  Fleet Fleet = 1 [(gogoproto.nullable) = false];
}

message QueryGetFleetByIndexRequest {
  uint64 index = 1;
}

message QueryAllFleetRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFleetResponse {
  repeated Fleet Fleet = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}



message QueryGetGridRequest {
  string attributeId = 1;
}

message QueryAllGridRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// Generic Responses for Permissions
message QueryGetGridResponse {
  GridRecord gridRecord = 1;
}

message QueryAllGridResponse {
  repeated GridRecord gridRecords = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetGuildRequest {
  string id = 1;
}

message QueryGetGuildResponse {
  Guild Guild = 1 [(gogoproto.nullable) = false];
}

message QueryAllGuildRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGuildResponse {
  repeated Guild                                  Guild      = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetGuildMembershipApplicationRequest {
  string guildId  = 1;
  string playerId = 2;
}

message QueryGetGuildMembershipApplicationResponse {
  GuildMembershipApplication GuildMembershipApplication = 1 [(gogoproto.nullable) = false];
}

message QueryAllGuildMembershipApplicationRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGuildMembershipApplicationResponse {
  repeated GuildMembershipApplication GuildMembershipApplication      = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetInfusionRequest {
  string destinationId        = 1;
  string address              = 2;
}

message QueryGetInfusionResponse {
  Infusion Infusion = 1 [(gogoproto.nullable) = false];
}

message QueryAllInfusionByDestinationRequest{
  string destinationId                              = 1;
  cosmos.base.query.v1beta1.PageRequest pagination  = 2;
}

message QueryAllInfusionRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInfusionResponse {
  repeated Infusion                             Infusion = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
  repeated uint64                                 status     = 3;
}

message QueryGetPermissionRequest {
  string permissionId = 1;
}

message QueryAllPermissionByObjectRequest {
  string objectId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}


message QueryAllPermissionByPlayerRequest {
  string playerId  = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllPermissionRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}


// Generic Responses for Permissions
message QueryGetPermissionResponse {
  PermissionRecord permissionRecord = 1;
}

message QueryAllPermissionResponse {
  repeated PermissionRecord permissionRecords = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetPlanetRequest {
  string id = 1;
}

message QueryGetPlanetResponse {
  Planet Planet = 1 [(gogoproto.nullable) = false];
  GridAttributes gridAttributes = 2;
  PlanetAttributes planetAttributes = 3;
}

message QueryAllPlanetRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryAllPlanetByPlayerRequest {
  string playerId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllPlanetResponse {
  repeated Planet                                  Planet      = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetPlanetAttributeRequest {
  string planetId = 1;
  string attributeType = 2;
}

message QueryGetPlanetAttributeResponse {
  uint64 attribute = 1;
}

message QueryAllPlanetAttributeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPlanetAttributeResponse {
  repeated PlanetAttributeRecord planetAttributeRecords = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetPlayerRequest {
  string id = 1;
}

message QueryGetPlayerResponse {
  Player Player = 1 [(gogoproto.nullable) = false];
  GridAttributes gridAttributes = 2;
  PlayerInventory playerInventory = 3;
}

message QueryAllPlayerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPlayerResponse {
  repeated Player                                 Player     = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetReactorRequest {
  string id = 1;
}

message QueryGetReactorResponse {
  Reactor Reactor = 1 [(gogoproto.nullable) = false];
  GridAttributes gridAttributes = 2;
}

message QueryAllReactorRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReactorResponse {
  repeated Reactor                                Reactor    = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetStructRequest {
  string id = 1;
}

message QueryGetStructResponse {
  Struct Struct = 1 [(gogoproto.nullable) = false];
  StructAttributes structAttributes = 2;
  GridAttributes gridAttributes = 3;
  repeated string structDefenders = 4;
}

message QueryAllStructRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStructResponse {
  repeated Struct                                  Struct      = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetStructAttributeRequest {
  string structId = 1;
  string attributeType = 2;
}

message QueryGetStructAttributeResponse {
  uint64 attribute = 1;
}

message QueryAllStructAttributeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStructAttributeResponse {
  repeated StructAttributeRecord structAttributeRecords = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetStructTypeRequest {
  uint64 id = 1;
}

message QueryGetStructTypeResponse {
  StructType StructType = 1 [(gogoproto.nullable) = false];
}

message QueryAllStructTypeRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStructTypeResponse {
  repeated StructType                                  StructType      = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSubstationRequest {
  string id = 1;
}

message QueryGetSubstationResponse {
  Substation Substation = 1 [(gogoproto.nullable) = false];
  GridAttributes gridAttributes = 2;
}

message QueryAllSubstationRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSubstationResponse {
  repeated Substation                             Substation = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryValidateSignatureRequest {
  string address        = 1;
  string message        = 2;
  string proofPubKey    = 3;
  string proofSignature = 4;
}

message QueryValidateSignatureResponse {
  bool pubkeyFormatError      = 1;
  bool signatureFormatError   = 2;
  bool addressPubkeyMismatch  = 3;
  bool signatureInvalid       = 4;
  bool valid                  = 5;
}