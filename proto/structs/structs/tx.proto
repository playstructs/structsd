syntax = "proto3";

package structs.structs;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "structs/structs/params.proto";
import "cosmos/base/v1beta1/coin.proto";

import "structs/structs/keys.proto";
import "structs/structs/fleet.proto";
import "structs/structs/guild.proto";
import "structs/structs/planet.proto";
import "structs/structs/struct.proto";

option go_package = "structs/x/structs/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc AddressRegister                (MsgAddressRegister               ) returns (MsgAddressRegisterResponse );
  rpc AddressRevoke                  (MsgAddressRevoke                 ) returns (MsgAddressRevokeResponse );

  rpc AgreementOpen                 (MsgAgreementOpen                  ) returns (MsgAgreementResponse);
  rpc AgreementClose                (MsgAgreementClose                 ) returns (MsgAgreementResponse);
  rpc AgreementCapacityIncrease     (MsgAgreementCapacityIncrease      ) returns (MsgAgreementResponse);
  rpc AgreementCapacityDecrease     (MsgAgreementCapacityDecrease      ) returns (MsgAgreementResponse);
  rpc AgreementDurationIncrease     (MsgAgreementDurationIncrease      ) returns (MsgAgreementResponse);

  rpc AllocationCreate               (MsgAllocationCreate              ) returns (MsgAllocationCreateResponse );
  rpc AllocationDelete               (MsgAllocationDelete              ) returns (MsgAllocationDeleteResponse );
  rpc AllocationUpdate               (MsgAllocationUpdate              ) returns (MsgAllocationUpdateResponse );
  rpc AllocationTransfer             (MsgAllocationTransfer            ) returns (MsgAllocationTransferResponse );

  rpc FleetMove                                     (MsgFleetMove                                     ) returns (MsgFleetMoveResponse );

  rpc GuildCreate                                   (MsgGuildCreate                                   ) returns (MsgGuildCreateResponse );
  rpc GuildUpdateOwnerId                            (MsgGuildUpdateOwnerId                            ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateEntrySubstationId                  (MsgGuildUpdateEntrySubstationId                  ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateEndpoint                           (MsgGuildUpdateEndpoint                           ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateJoinInfusionMinimum                (MsgGuildUpdateJoinInfusionMinimum                ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateJoinInfusionMinimumBypassByInvite  (MsgGuildUpdateJoinInfusionMinimumBypassByInvite  ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateJoinInfusionMinimumBypassByRequest (MsgGuildUpdateJoinInfusionMinimumBypassByRequest ) returns (MsgGuildUpdateResponse );

  rpc GuildMembershipInvite           (MsgGuildMembershipInvite        ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipInviteApprove    (MsgGuildMembershipInviteApprove ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipInviteDeny       (MsgGuildMembershipInviteDeny    ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipInviteRevoke     (MsgGuildMembershipInviteRevoke  ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipJoin             (MsgGuildMembershipJoin          ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipJoinProxy        (MsgGuildMembershipJoinProxy     ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipKick             (MsgGuildMembershipKick          ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequest          (MsgGuildMembershipRequest       ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequestApprove   (MsgGuildMembershipRequestApprove) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequestDeny      (MsgGuildMembershipRequestDeny   ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequestRevoke    (MsgGuildMembershipRequestRevoke ) returns (MsgGuildMembershipResponse );


  rpc PermissionGrantOnAddress       (MsgPermissionGrantOnAddress      ) returns (MsgPermissionResponse);
  rpc PermissionGrantOnObject        (MsgPermissionGrantOnObject       ) returns (MsgPermissionResponse);
  rpc PermissionRevokeOnAddress      (MsgPermissionRevokeOnAddress     ) returns (MsgPermissionResponse);
  rpc PermissionRevokeOnObject       (MsgPermissionRevokeOnObject      ) returns (MsgPermissionResponse);
  rpc PermissionSetOnAddress         (MsgPermissionSetOnAddress        ) returns (MsgPermissionResponse);
  rpc PermissionSetOnObject          (MsgPermissionSetOnObject         ) returns (MsgPermissionResponse);


  rpc PlanetExplore                  (MsgPlanetExplore                 ) returns (MsgPlanetExploreResponse                 );
  rpc PlanetRaidComplete             (MsgPlanetRaidComplete            ) returns (MsgPlanetRaidCompleteResponse                 );

  rpc PlayerUpdatePrimaryAddress     (MsgPlayerUpdatePrimaryAddress    ) returns (MsgPlayerUpdatePrimaryAddressResponse    );

  rpc ProviderCreate                 (MsgProviderCreate                ) returns (MsgProviderResponse);
  rpc ProviderWithdrawBalance        (MsgProviderWithdrawBalance       ) returns (MsgProviderResponse);
  rpc ProviderUpdateCapacityMinimum  (MsgProviderUpdateCapacityMinimum ) returns (MsgProviderResponse);
  rpc ProviderUpdateCapacityMaximum  (MsgProviderUpdateCapacityMaximum ) returns (MsgProviderResponse);
  rpc ProviderUpdateDurationMinimum  (MsgProviderUpdateDurationMinimum ) returns (MsgProviderResponse);
  rpc ProviderUpdateDurationMaximum  (MsgProviderUpdateDurationMaximum ) returns (MsgProviderResponse);
  rpc ProviderUpdateAccessPolicy     (MsgProviderUpdateAccessPolicy    ) returns (MsgProviderResponse);
  rpc ProviderGuildGrant             (MsgProviderGuildGrant            ) returns (MsgProviderResponse);
  rpc ProviderGuildRevoke            (MsgProviderGuildRevoke           ) returns (MsgProviderResponse);
  rpc ProviderDelete                 (MsgProviderDelete                ) returns (MsgProviderResponse);


  rpc StructActivate                 (MsgStructActivate                ) returns (MsgStructStatusResponse                  );
  rpc StructDeactivate               (MsgStructDeactivate              ) returns (MsgStructStatusResponse                  );

  rpc StructBuildInitiate            (MsgStructBuildInitiate           ) returns (MsgStructStatusResponse                  );
  rpc StructBuildComplete            (MsgStructBuildComplete           ) returns (MsgStructStatusResponse                  );
  // Not MVP
  // rpc StructBuildCompleteAndStash    (MsgStructBuildCompleteAndStash   ) returns (MsgStructStatusResponse                  );

  rpc StructDefenseSet               (MsgStructDefenseSet              ) returns (MsgStructStatusResponse                  );
  rpc StructDefenseClear             (MsgStructDefenseClear            ) returns (MsgStructStatusResponse                  );

  rpc StructMove                     (MsgStructMove                    ) returns (MsgStructStatusResponse                  );

  rpc StructAttack                   (MsgStructAttack                  ) returns (MsgStructAttackResponse                  );

  rpc StructStealthActivate          (MsgStructStealthActivate         ) returns (MsgStructStatusResponse                  );
  rpc StructStealthDeactivate        (MsgStructStealthDeactivate       ) returns (MsgStructStatusResponse                  );

  rpc StructGeneratorInfuse          (MsgStructGeneratorInfuse         ) returns (MsgStructGeneratorStatusResponse          );

  rpc StructOreMinerComplete         (MsgStructOreMinerComplete        ) returns (MsgStructOreMinerStatusResponse          );

  rpc StructOreRefineryComplete      (MsgStructOreRefineryComplete     ) returns (MsgStructOreRefineryStatusResponse       );

  // Not MVP
  //  rpc StructStorageStash             (MsgStructStorageStash            ) returns (MsgStructStatusResponse                  );
  //  rpc StructStorageRecall            (MsgStructStorageRecall           ) returns (MsgStructStatusResponse                  );


  rpc SubstationCreate               (MsgSubstationCreate              ) returns (MsgSubstationCreateResponse              );
  rpc SubstationDelete               (MsgSubstationDelete              ) returns (MsgSubstationDeleteResponse              );
  rpc SubstationAllocationConnect    (MsgSubstationAllocationConnect   ) returns (MsgSubstationAllocationConnectResponse   );
  rpc SubstationAllocationDisconnect (MsgSubstationAllocationDisconnect) returns (MsgSubstationAllocationDisconnectResponse);
  rpc SubstationPlayerConnect        (MsgSubstationPlayerConnect       ) returns (MsgSubstationPlayerConnectResponse       );
  rpc SubstationPlayerDisconnect     (MsgSubstationPlayerDisconnect    ) returns (MsgSubstationPlayerDisconnectResponse    );
  rpc SubstationPlayerMigrate        (MsgSubstationPlayerMigrate       ) returns (MsgSubstationPlayerMigrateResponse       );


}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "structs/x/structs/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgAddressRegister {
  option (cosmos.msg.v1.signer) = "creator";

  string creator        = 1;
  string playerId       = 2;
  string address        = 3;
  string proofPubKey    = 4;
  string proofSignature = 5;
  uint64 permissions    = 6;
}

message MsgAddressRegisterResponse {}

message MsgAddressRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string address  = 2;
}

message MsgAddressRevokeResponse {}

message MsgAllocationCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string          creator        = 1;
  string          controller     = 2;
  string          sourceObjectId = 3;
  allocationType  allocationType = 4;
  uint64          power          = 5;
}

message MsgAllocationCreateResponse {
  string allocationId = 1;
}

message MsgAllocationDelete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string allocationId       = 2;
}

message MsgAllocationDeleteResponse {
  string allocationId = 1;
}


message MsgAllocationUpdate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string allocationId       = 2;
  uint64 power              = 3;
}

message MsgAllocationUpdateResponse {
  string allocationId = 1;
}

message MsgAllocationTransfer {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string allocationId       = 2;
  string controller         = 3;
}

message MsgAllocationTransferResponse {
  string allocationId = 1;
}


message MsgFleetMove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string fleetId = 2;
  string destinationLocationId = 3;
}

message MsgFleetMoveResponse { Fleet fleet = 1; }

message MsgGuildCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string endpoint = 2;
  string entrySubstationId = 3;
}

message MsgGuildCreateResponse { string guildId = 1; }

message MsgGuildUpdateOwnerId {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string guildId            = 2;
  string owner              = 3;
}

message MsgGuildUpdateEntrySubstationId {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string guildId            = 2;
  string entrySubstationId  = 3;
}

message MsgGuildUpdateEndpoint {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string guildId            = 2;
  string endpoint           = 3;
}


message MsgGuildUpdateJoinInfusionMinimum {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string guildId              = 2;
  uint64 joinInfusionMinimum  = 3;
}

message MsgGuildUpdateJoinInfusionMinimumBypassByRequest {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                = 1;
  string guildId                = 2;
  guildJoinBypassLevel guildJoinBypassLevel   = 3;
}

message MsgGuildUpdateJoinInfusionMinimumBypassByInvite {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                = 1;
  string guildId                = 2;
  guildJoinBypassLevel guildJoinBypassLevel   = 3;
}


message MsgGuildUpdateResponse{}


message MsgGuildMembershipInvite {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string guildId      = 2;
  string playerId     = 3;
  string substationId = 4;
}


message MsgGuildMembershipInviteApprove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string guildId      = 2;
  string playerId     = 3;
  string substationId = 4;
}


message MsgGuildMembershipInviteDeny {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipInviteRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipJoin {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string guildId              = 2;
  string playerId             = 3;
  string substationId         = 4;
  repeated string infusionId  = 5;
}

message MsgGuildMembershipJoinProxy {
  option (cosmos.msg.v1.signer) = "creator";

  string creator          = 1;
  string address          = 2;
  string substationId     = 3;

  string proofPubKey       = 4;
  string proofSignature    = 5;
}

message MsgGuildMembershipKick {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}


message MsgGuildMembershipRequest {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string guildId      = 2;
  string playerId     = 3;
  string substationId = 4;
}


message MsgGuildMembershipRequestApprove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
  string substationId = 4;
}


message MsgGuildMembershipRequestDeny {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipRequestRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipResponse { GuildMembershipApplication guildMembershipApplication = 1;}


message MsgPermissionGrantOnObject {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string objectId     = 2;
  string playerId     = 3;
  uint64 permissions  = 4;
}

message MsgPermissionGrantOnAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string address      = 2;
  uint64 permissions  = 3;
}

message MsgPermissionRevokeOnObject {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string objectId     = 2;
  string playerId     = 3;
  uint64 permissions  = 4;
}

message MsgPermissionRevokeOnAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string address      = 2;
  uint64 permissions  = 3;
}

message MsgPermissionSetOnObject {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string objectId     = 2;
  string playerId     = 3;
  uint64 permissions  = 4;
}

message MsgPermissionSetOnAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string address      = 2;
  uint64 permissions  = 3;
}

message MsgPermissionResponse {}

message MsgPlanetExplore {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string playerId    = 2;
}

message MsgPlanetExploreResponse {
  Planet planet = 1 [(gogoproto.nullable) = false];
}

message MsgPlanetRaidComplete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string fleetId      = 2;
  string proof        = 3;
  string nonce        = 4;
}

message MsgPlanetRaidCompleteResponse {
  Fleet fleet = 1 [(gogoproto.nullable) = false];
  Planet planet = 2 [(gogoproto.nullable) = false];
  uint64 oreStolen = 3;
}

message MsgPlayerUpdatePrimaryAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator        = 1;
  string playerId       = 2;
  string primaryAddress = 3;
}

message MsgPlayerUpdatePrimaryAddressResponse {}

message MsgStructStatusResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructActivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}

message MsgStructDeactivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}



message MsgStructBuildInitiate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator          = 1;
  string playerId         = 2;
  uint64 structTypeId     = 3;
  //objectType locationType = 4;
  ambit operatingAmbit    = 4;
  uint64 slot             = 5;
}


message MsgStructBuildComplete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;
}

message MsgStructBuildCompleteAndStash {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string structId             = 2;
  string proof                = 3;
  string nonce                = 4;

  string storageDestinationId = 5;
  ambit  storageAmbit         = 6;
  uint64 storageSlot          = 7;
}


message MsgStructDefenseSet {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string defenderStructId     = 2;
  string protectedStructId    = 3;
}

message MsgStructDefenseClear {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string defenderStructId     = 2;
}

message MsgStructMove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator          = 1;
  string structId         = 2;
  objectType locationType = 4;
  ambit  ambit            = 5;
  uint64 slot             = 6;
}

message MsgStructAttack {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                  = 1;
  string operatingStructId        = 2;
  repeated string targetStructId  = 3;
  string weaponSystem   = 4;
}

message MsgStructAttackResponse {}

message MsgStructStealthActivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator   = 1;
  string structId  = 2;
}

message MsgStructStealthDeactivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator   = 1;
  string structId  = 2;
}

message MsgStructGeneratorInfuse{
  option (cosmos.msg.v1.signer) = "creator";

  string creator        = 1;
  string structId       = 2;
  string infuseAmount   = 3;
}

message MsgStructGeneratorStatusResponse {}


message MsgStructOreMinerComplete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;
}

message MsgStructOreMinerStatusResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}


message MsgStructOreRefineryComplete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;
}


message MsgStructOreRefineryStatusResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructStorageStash {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string locationId   = 3;
  ambit  ambit        = 4;
  uint64 slot         = 5;
}

message MsgStructStorageRecall {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string locationId   = 3;
  ambit  ambit        = 4;
  uint64 slot         = 5;
  bool   activate     = 6;
}


message MsgSubstationCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string owner        = 2;
  string allocationId = 3;
}

message MsgSubstationCreateResponse {
  string substationId = 1;
}

message MsgSubstationDelete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator               = 1;
  string substationId          = 2;
  string migrationSubstationId = 3;
}

message MsgSubstationDeleteResponse {}

message MsgSubstationAllocationConnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string allocationId       = 2;
  string destinationId      = 3;
}

message MsgSubstationAllocationConnectResponse {}

message MsgSubstationAllocationDisconnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string allocationId       = 2;
}

message MsgSubstationAllocationDisconnectResponse {}

message MsgSubstationPlayerConnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string substationId = 2;
  string playerId     = 3;
}

message MsgSubstationPlayerConnectResponse {}

message MsgSubstationPlayerDisconnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string playerId = 2;
}

message MsgSubstationPlayerDisconnectResponse {}


message MsgSubstationPlayerMigrate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string substationId       = 2;
  repeated string playerId  = 3;
}
message MsgSubstationPlayerMigrateResponse {}



message MsgAgreementOpen {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string playerId           = 2;
  string providerId         = 3;
  uint64 duration           = 4;
  uint64 capacity           = 5;
}

message MsgAgreementClose {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string agreementId        = 2;
}

message MsgAgreementCapacityIncrease {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string agreementId        = 2;
  uint64 capacityIncrease   = 3;
}

message MsgAgreementCapacityDecrease {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string agreementId        = 2;
  uint64 capacityDecrease   = 3;
}

message MsgAgreementDurationIncrease {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string agreementId        = 2;
  uint64 durationIncrease   = 3;
}

message MsgAgreementResponse {}



message MsgProviderCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string substationId       = 2;

  repeated cosmos.base.v1beta1.Coin rate  = 3 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  providerAccessPolicy accessPolicy = 4;

  string  providerCancellationPenalty     = 5 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  string  consumerCancellationPenalty     = 6 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  uint64 minimumCapacity                  = 7;
  uint64 maximumCapacity                  = 8;
  uint64 minimumDuration                  = 9;
  uint64 maximumDuration                  = 10;
}

message MsgProviderWithdrawBalance {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  string destinationAddress = 3;
}

message MsgProviderUpdateCapacityMinimum {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  uint64 newMinimumCapacity = 3;
}

message MsgProviderUpdateCapacityMaximum {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  uint64 newMaximumCapacity = 3;
}

message MsgProviderUpdateDurationMinimum {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  uint64 newMinimumDuration = 3;
}

message MsgProviderUpdateDurationMaximum {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  uint64 newMaximumDuration = 3;
}

message MsgProviderUpdateAccessPolicy {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                    = 1;
  string providerId                 = 2;
  providerAccessPolicy accessPolicy = 3;
}

message MsgProviderGuildGrant {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  repeated string guildId   = 3;
}

message MsgProviderGuildRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
  repeated string guildId   = 3;
}

message MsgProviderDelete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string providerId         = 2;
}

message MsgProviderResponse {}
