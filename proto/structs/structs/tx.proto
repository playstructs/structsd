syntax = "proto3";

package structs.structs;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "structs/structs/params.proto";

import "structs/structs/keys.proto";
import "structs/structs/guild.proto";
import "structs/structs/planet.proto";
import "structs/structs/struct.proto";

option go_package = "structs/x/structs/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc AddressRegister                (MsgAddressRegister               ) returns (MsgAddressRegisterResponse );
  rpc AddressRevoke                  (MsgAddressRevoke                 ) returns (MsgAddressRevokeResponse );

  rpc AllocationCreate               (MsgAllocationCreate              ) returns (MsgAllocationCreateResponse );

  rpc GuildCreate                                   (MsgGuildCreate                                   ) returns (MsgGuildCreateResponse );
  rpc GuildUpdateOwnerId                            (MsgGuildUpdateOwnerId                            ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateEntrySubstationId                  (MsgGuildUpdateEntrySubstationId                  ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateEndpoint                           (MsgGuildUpdateEndpoint                           ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateJoinInfusionMinimum                (MsgGuildUpdateJoinInfusionMinimum                ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateJoinInfusionMinimumBypassByInvite  (MsgGuildUpdateJoinInfusionMinimumBypassByInvite  ) returns (MsgGuildUpdateResponse );
  rpc GuildUpdateJoinInfusionMinimumBypassByRequest (MsgGuildUpdateJoinInfusionMinimumBypassByRequest ) returns (MsgGuildUpdateResponse );

  rpc GuildMembershipInvite           (MsgGuildMembershipInvite        ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipInviteApprove    (MsgGuildMembershipInviteApprove ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipInviteDeny       (MsgGuildMembershipInviteDeny    ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipInviteRevoke     (MsgGuildMembershipInviteRevoke  ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipJoin             (MsgGuildMembershipJoin          ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipJoinProxy        (MsgGuildMembershipJoinProxy     ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipKick             (MsgGuildMembershipKick          ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequest          (MsgGuildMembershipRequest       ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequestApprove   (MsgGuildMembershipRequestApprove) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequestDeny      (MsgGuildMembershipRequestDeny   ) returns (MsgGuildMembershipResponse );
  rpc GuildMembershipRequestRevoke    (MsgGuildMembershipRequestRevoke ) returns (MsgGuildMembershipResponse );


  rpc PermissionGrantOnAddress       (MsgPermissionGrantOnAddress      ) returns (MsgPermissionResponse);
  rpc PermissionGrantOnObject        (MsgPermissionGrantOnObject       ) returns (MsgPermissionResponse);
  rpc PermissionRevokeOnAddress      (MsgPermissionRevokeOnAddress     ) returns (MsgPermissionResponse);
  rpc PermissionRevokeOnObject       (MsgPermissionRevokeOnObject      ) returns (MsgPermissionResponse);

  rpc PlanetExplore                  (MsgPlanetExplore                 ) returns (MsgPlanetExploreResponse                 );

  rpc PlayerUpdatePrimaryAddress     (MsgPlayerUpdatePrimaryAddress    ) returns (MsgPlayerUpdatePrimaryAddressResponse    );

  rpc StructActivate                 (MsgStructActivate                ) returns (MsgStructActivateResponse                );
  rpc StructBuildInitiate            (MsgStructBuildInitiate           ) returns (MsgStructBuildInitiateResponse           );
  rpc StructBuildComplete            (MsgStructBuildComplete           ) returns (MsgStructBuildCompleteResponse           );
  rpc StructMineActivate             (MsgStructMineActivate            ) returns (MsgStructMineActivateResponse            );
  rpc StructMineDeactivate           (MsgStructMineDeactivate          ) returns (MsgStructMineDeactivateResponse          );
  rpc StructMine                     (MsgStructMine                    ) returns (MsgStructMineResponse                    );
  rpc StructRefineActivate           (MsgStructRefineActivate          ) returns (MsgStructRefineActivateResponse          );
  rpc StructRefineDeactivate         (MsgStructRefineDeactivate        ) returns (MsgStructRefineDeactivateResponse        );
  rpc StructRefine                   (MsgStructRefine                  ) returns (MsgStructRefineResponse                  );
  rpc StructInfuse                   (MsgStructInfuse                  ) returns (MsgStructInfuseResponse                  );

  rpc SubstationCreate               (MsgSubstationCreate              ) returns (MsgSubstationCreateResponse              );
  rpc SubstationDelete               (MsgSubstationDelete              ) returns (MsgSubstationDeleteResponse              );
  rpc SubstationAllocationConnect    (MsgSubstationAllocationConnect   ) returns (MsgSubstationAllocationConnectResponse   );
  rpc SubstationAllocationDisconnect (MsgSubstationAllocationDisconnect) returns (MsgSubstationAllocationDisconnectResponse);
  rpc SubstationPlayerConnect        (MsgSubstationPlayerConnect       ) returns (MsgSubstationPlayerConnectResponse       );
  rpc SubstationPlayerDisconnect     (MsgSubstationPlayerDisconnect    ) returns (MsgSubstationPlayerDisconnectResponse    );
  rpc SubstationPlayerMigrate        (MsgSubstationPlayerMigrate       ) returns (MsgSubstationPlayerMigrateResponse       );

  // To Remove after battle mechanics added
  rpc Sabotage                       (MsgSabotage                      ) returns (MsgSabotageResponse                      );

}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "structs/x/structs/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgAddressRegister {
  option (cosmos.msg.v1.signer) = "creator";

  string creator        = 1;
  string address        = 2;
  string proofPubKey    = 3;
  string proofSignature = 4;
  uint64 permissions    = 5;
}

message MsgAddressRegisterResponse {}

message MsgAddressRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string address  = 2;
}

message MsgAddressRevokeResponse {}

message MsgAllocationCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string          creator        = 1;
  string          controller     = 2;
  string          sourceObjectId = 3;
  allocationType  allocationType = 4;
  uint64          power          = 5;
}

message MsgAllocationCreateResponse {
  string allocationId = 1;
}

message MsgGuildCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string endpoint = 2;
  string entrySubstationId = 3;
}

message MsgGuildCreateResponse { string guildId = 1; }

message MsgGuildUpdateOwnerId {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string guildId            = 2;
  string owner              = 3;
}

message MsgGuildUpdateEntrySubstationId {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string guildId            = 2;
  string entrySubstationId  = 3;
}

message MsgGuildUpdateEndpoint {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string guildId            = 2;
  string endpoint           = 3;
}


message MsgGuildUpdateJoinInfusionMinimum {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string guildId              = 2;
  uint64 joinInfusionMinimum  = 3;
}

message MsgGuildUpdateJoinInfusionMinimumBypassByRequest {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                = 1;
  string guildId                = 2;
  guildJoinBypassLevel guildJoinBypassLevel   = 3;
}

message MsgGuildUpdateJoinInfusionMinimumBypassByInvite {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                = 1;
  string guildId                = 2;
  guildJoinBypassLevel guildJoinBypassLevel   = 3;
}


message MsgGuildUpdateResponse{}


message MsgGuildMembershipInvite {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string guildId      = 2;
  string playerId     = 3;
  string substationId = 4;
}


message MsgGuildMembershipInviteApprove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string guildId      = 2;
  string playerId     = 3;
  string substationId = 4;
}


message MsgGuildMembershipInviteDeny {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipInviteRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipJoin {
  option (cosmos.msg.v1.signer) = "creator";

  string creator              = 1;
  string guildId              = 2;
  string playerId             = 3;
  string substationId         = 4;
  repeated string infusionId  = 5;
}

message MsgGuildMembershipJoinProxy {
  option (cosmos.msg.v1.signer) = "creator";

  string creator          = 1;
  string address          = 2;
  string substationId     = 3;

  string proofPubKey       = 4;
  string proofSignature    = 5;
}

message MsgGuildMembershipKick {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}


message MsgGuildMembershipRequest {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string guildId      = 2;
  string playerId     = 3;
  string substationId = 4;
}


message MsgGuildMembershipRequestApprove {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
  string substationId = 4;
}


message MsgGuildMembershipRequestDeny {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipRequestRevoke {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
  string guildId     = 2;
  string playerId    = 3;
}

message MsgGuildMembershipResponse { GuildMembershipApplication guildMembershipApplication = 1;}


message MsgPermissionGrantOnObject {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string objectId     = 2;
  string playerId     = 3;
  uint64 permissions  = 4;
}

message MsgPermissionGrantOnAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string address      = 2;
  uint64 permissions  = 3;
}

message MsgPermissionRevokeOnObject {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string objectId     = 2;
  string playerId     = 3;
  uint64 permissions  = 4;
}

message MsgPermissionRevokeOnAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string address      = 2;
  uint64 permissions  = 3;
}
message MsgPermissionResponse {}

message MsgPlanetExplore {
  option (cosmos.msg.v1.signer) = "creator";

  string creator     = 1;
}

message MsgPlanetExploreResponse {
  Planet planet = 1 [(gogoproto.nullable) = false];
}

message MsgPlayerUpdatePrimaryAddress {
  option (cosmos.msg.v1.signer) = "creator";

  string creator        = 1;
  string primaryAddress = 2;
}

message MsgPlayerUpdatePrimaryAddressResponse {}

message MsgStructActivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}

message MsgStructActivateResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructBuildInitiate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;

  string structType   = 2;
  string planetId     = 3;
  uint64 slot         = 4;


}

message MsgStructBuildInitiateResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructBuildComplete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;

}

message MsgStructBuildCompleteResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}


message MsgStructInfuse{
  option (cosmos.msg.v1.signer) = "creator";

  string creator        = 1;
  string structId       = 2;
  string infuseAmount   = 3;
}

message MsgStructInfuseResponse {}


message MsgStructMineActivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}

message MsgStructMineActivateResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructMineDeactivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}

message MsgStructMineDeactivateResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructMine {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;
}

message MsgStructMineResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructRefineActivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}

message MsgStructRefineActivateResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructRefineDeactivate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
}

message MsgStructRefineDeactivateResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgStructRefine {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;
}

message MsgStructRefineResponse {
  Struct struct = 1 [(gogoproto.nullable) = false];
}

message MsgSubstationCreate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string owner        = 2;
  string allocationId = 3;
}

message MsgSubstationCreateResponse {
  string substationId = 1;
}

message MsgSubstationDelete {
  option (cosmos.msg.v1.signer) = "creator";

  string creator               = 1;
  string substationId          = 2;
  string migrationSubstationId = 3;
}

message MsgSubstationDeleteResponse {}

message MsgSubstationAllocationConnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator                 = 1;
  string allocationId            = 2;
  string destinationId = 3;
}

message MsgSubstationAllocationConnectResponse {}

message MsgSubstationAllocationDisconnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string allocationId = 2;
}

message MsgSubstationAllocationDisconnectResponse {}

message MsgSubstationPlayerConnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string substationId = 2;
  string playerId     = 3;
}

message MsgSubstationPlayerConnectResponse {}

message MsgSubstationPlayerDisconnect {
  option (cosmos.msg.v1.signer) = "creator";

  string creator  = 1;
  string playerId = 2;
}

message MsgSubstationPlayerDisconnectResponse {}


message MsgSubstationPlayerMigrate {
  option (cosmos.msg.v1.signer) = "creator";

  string creator            = 1;
  string substationId       = 2;
  repeated string playerId  = 3;
}
message MsgSubstationPlayerMigrateResponse {}

message MsgSabotage {
  option (cosmos.msg.v1.signer) = "creator";

  string creator      = 1;
  string structId     = 2;
  string proof        = 3;
  string nonce        = 4;
}

message MsgSabotageResponse {}
